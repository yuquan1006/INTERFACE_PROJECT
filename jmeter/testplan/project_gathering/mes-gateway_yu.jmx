<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0.20190625">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="datasource" enabled="true">
        <stringProp name="TestPlan.comments">Connect to local HSPAD_Demo_CO and set its isolation mode to SNAPSHOT (4096) and disable auto commit.</stringProp>
        <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="dbUrl">${__P(datasource.url,)}</stringProp>
        <stringProp name="driver">${__P(datasource.driver-class-name,)}</stringProp>
        <stringProp name="username">${__P(datasource.username,)}</stringProp>
        <stringProp name="password">${__P(datasource.password,)}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <me.yangqiuhua.jmeter.protocol.config.RedisElement guiclass="TestBeanGUI" testclass="me.yangqiuhua.jmeter.protocol.config.RedisElement" testname="redis" enabled="true">
        <stringProp name="database">${__P(redis.database,)}</stringProp>
        <stringProp name="host">${__P(redis.host,)}</stringProp>
        <stringProp name="jedisPoolName">${__P(redis.pool-name,)}</stringProp>
        <stringProp name="maxIdle">8</stringProp>
        <stringProp name="maxTotal">8</stringProp>
        <stringProp name="maxWaitMillis">-1</stringProp>
        <stringProp name="minIdle">0</stringProp>
        <stringProp name="password">${__P(redis.password,)}</stringProp>
        <stringProp name="port">${__P(redis.port,)}</stringProp>
        <stringProp name="timeout">60000</stringProp>
      </me.yangqiuhua.jmeter.protocol.config.RedisElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="http" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="httpMethod" elementType="Argument">
            <stringProp name="Argument.name">httpMethod</stringProp>
            <stringProp name="Argument.value">POST</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="charset" elementType="Argument">
            <stringProp name="Argument.name">charset</stringProp>
            <stringProp name="Argument.value">UTF-8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP请求默认值" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.proxyHost">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.proxyPort">8888</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">20000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">20000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="注册、登录" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis del" enabled="true">
            <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_SEND_TIMES_${__P(mes.phone,)}_user_regist&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	jedis.del(redisKey);

	String responseData = &quot;del redisKey：&quot; + redisKey + &quot; success&quot;;

SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="手机号注册、登录" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 fe.t_member 根据login_name" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_MEMBER t
where t.login_name = &apos;${__P(mes.email,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="手机号注册" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发送注册短信验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;requestObj&quot;:&quot;${__P(mes.phone,)}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/sendSmsCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis 查询注册短信验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_user_regist&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	String redisValue = jedis.get(redisKey);
	log.info(&quot;redisValue：{}&quot;,redisValue);
	vars.put(&quot;verifyCode&quot;, redisValue.replaceAll(&quot;\&quot;&quot;, &quot;&quot;));

	String responseData = &quot;redisKey：&quot; + redisKey + &quot;\r\n&quot; 
	+ &quot;redisValue：&quot; + redisValue;

SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="注册" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;requestObj&quot;: {&#xd;
        &quot;agreement&quot;: true,&#xd;
        &quot;loginPhone&quot;: &quot;${__P(mes.phone,)}&quot;,&#xd;
        &quot;moblileVerifCode&quot;: &quot;${verifyCode}&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/mobile.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="1001411671">&quot;responseObj&quot;:&quot;MES_SIGN_VERFY_TOKEN_${__P(mes.phone,)}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="完善账户信息" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;requestObj&quot;: {&#xd;
        &quot;email&quot;: &quot;${__P(mes.email,)}&quot;,&#xd;
        &quot;loginPhone&quot;: &quot;${__P(mes.phone,)}&quot;,&#xd;
        &quot;payPwd&quot;: &quot;${__P(mes.payPwd,)}&quot;,&#xd;
        &quot;payPwdRepeat&quot;: &quot;${__P(mes.payPwd,)}&quot;,&#xd;
        &quot;pwd&quot;: &quot;${__P(mes.loginPwd,)}&quot;,&#xd;
        &quot;pwdRepeat&quot;: &quot;${__P(mes.loginPwd,)}&quot;,&#xd;
        &quot;recommendCode&quot;: &quot;&quot;,&#xd;
        &quot;signType&quot;: 1,&#xd;
        &quot;verfyToken&quot;: &quot;MES_SIGN_VERFY_TOKEN_${__P(mes.phone,)}&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/improveInfo.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="登录" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;requestObj&quot;: {&#xd;
    &quot;loginName&quot;: &quot;${__P(mes.phone,)}&quot;,&#xd;
    &quot;password&quot;: &quot;${__P(mes.loginPwd,)}&quot;&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/security/login.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-2083166786">&quot;responseObj&quot;:{&quot;token&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取token" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String token = responseObj.getString(&quot;token&quot;);
vars.put(&quot;token&quot;, token);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="邮箱注册、登录" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 fe.t_member 根据login_name" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_MEMBER t
where t.login_name = &apos;${__P(mes.email,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="邮箱注册" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="注册" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;requestObj&quot;: {&#xd;
        &quot;agreement&quot;: true,&#xd;
        &quot;email&quot;: &quot;${__P(mes.email,)}&quot;,&#xd;
        &quot;recommendCode&quot;: &quot;&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/email.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis 查询邮箱注册跳转链接token" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_REDIS_EMAIL_${__P(mes.email,)}&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	String redisValue = jedis.get(redisKey);
	log.info(&quot;redisValue：{}&quot;,redisValue);
	vars.put(&quot;registerToken&quot;, redisValue.replaceAll(&quot;\&quot;&quot;, &quot;&quot;));

	String responseData = &quot;redisKey：&quot; + redisKey + &quot;\r\n&quot; 
	+ &quot;redisValue：&quot; + redisValue;

SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="点击邮箱注册跳转链接" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;requestObj&quot;: {&#xd;
        &quot;agreement&quot;: true,&#xd;
        &quot;email&quot;: &quot;${__P(mes.email,)}&quot;,&#xd;
        &quot;token&quot;: &quot;${registerToken}&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/activeEmail.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发送注册短信验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;requestObj&quot;:&quot;${__P(mes.phone,)}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/sendSmsCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis 查询注册短信验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_user_regist&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	String redisValue = jedis.get(redisKey);
	log.info(&quot;redisValue：{}&quot;,redisValue);
	vars.put(&quot;verifyCode&quot;, redisValue.replaceAll(&quot;\&quot;&quot;, &quot;&quot;));

	String responseData = &quot;redisKey：&quot; + redisKey + &quot;\r\n&quot; 
	+ &quot;redisValue：&quot; + redisValue;

SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="完善账户信息" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;requestObj&quot;: {&#xd;
        &quot;email&quot;: &quot;${__P(mes.email,)}&quot;,&#xd;
        &quot;loginPhone&quot;: &quot;${__P(mes.phone,)}&quot;,&#xd;
        &quot;moblileVerifCode&quot;: &quot;${verifyCode}&quot;,&#xd;
        &quot;payPwd&quot;: &quot;${__P(mes.payPwd,)}&quot;,&#xd;
        &quot;payPwdRepeat&quot;: &quot;${__P(mes.payPwd,)}&quot;,&#xd;
        &quot;pwd&quot;: &quot;${__P(mes.loginPwd,)}&quot;,&#xd;
        &quot;pwdRepeat&quot;: &quot;${__P(mes.loginPwd,)}&quot;,&#xd;
        &quot;recommendCode&quot;: &quot;&quot;,&#xd;
        &quot;signType&quot;: 2,&#xd;
        &quot;verfyToken&quot;: &quot;MES_SIGN_VERFY_TOKEN_${__P(mes.email,)}&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/improveInfo.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="登录" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;requestObj&quot;: {&#xd;
    &quot;loginName&quot;: &quot;${__P(mes.email,)}&quot;,&#xd;
    &quot;password&quot;: &quot;${__P(mes.loginPwd,)}&quot;&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/security/login.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-2083166786">&quot;responseObj&quot;:{&quot;token&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取token" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String token = responseObj.getString(&quot;token&quot;);
vars.put(&quot;token&quot;, token);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="手机号+推荐码注册、登录" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 fe.t_member 根据login_name" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_MEMBER t
where t.login_name = &apos;${__P(mes.email,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="手机号注册" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发送注册短信验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;requestObj&quot;:&quot;${__P(mes.phone,)}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/sendSmsCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis 查询注册短信验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_user_regist&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	String redisValue = jedis.get(redisKey);
	log.info(&quot;redisValue：{}&quot;,redisValue);
	vars.put(&quot;verifyCode&quot;, redisValue.replaceAll(&quot;\&quot;&quot;, &quot;&quot;));

	String responseData = &quot;redisKey：&quot; + redisKey + &quot;\r\n&quot; 
	+ &quot;redisValue：&quot; + redisValue;

SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="注册" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;requestObj&quot;: {&#xd;
        &quot;agreement&quot;: true,&#xd;
        &quot;loginPhone&quot;: &quot;${__P(mes.phone,)}&quot;,&#xd;
        &quot;moblileVerifCode&quot;: &quot;${verifyCode}&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/mobile.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="1001411671">&quot;responseObj&quot;:&quot;MES_SIGN_VERFY_TOKEN_${__P(mes.phone,)}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="完善账户信息" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;requestObj&quot;: {&#xd;
        &quot;email&quot;: &quot;${__P(mes.email,)}&quot;,&#xd;
        &quot;loginPhone&quot;: &quot;${__P(mes.phone,)}&quot;,&#xd;
        &quot;payPwd&quot;: &quot;${__P(mes.payPwd,)}&quot;,&#xd;
        &quot;payPwdRepeat&quot;: &quot;${__P(mes.payPwd,)}&quot;,&#xd;
        &quot;pwd&quot;: &quot;${__P(mes.loginPwd,)}&quot;,&#xd;
        &quot;pwdRepeat&quot;: &quot;${__P(mes.loginPwd,)}&quot;,&#xd;
        &quot;recommendCode&quot;: &quot;${__P(mes.recommendCode,)}&quot;,&#xd;
        &quot;signType&quot;: 1,&#xd;
        &quot;verfyToken&quot;: &quot;MES_SIGN_VERFY_TOKEN_${__P(mes.phone,)}&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/improveInfo.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="登录" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;requestObj&quot;: {&#xd;
    &quot;loginName&quot;: &quot;${__P(mes.phone,)}&quot;,&#xd;
    &quot;password&quot;: &quot;${__P(mes.loginPwd,)}&quot;&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/security/login.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-2083166786">&quot;responseObj&quot;:{&quot;token&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取token" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String token = responseObj.getString(&quot;token&quot;);
vars.put(&quot;token&quot;, token);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="邮箱注册+推荐码、登录" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 fe.t_member 根据login_name" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_MEMBER t
where t.login_name = &apos;${__P(mes.email,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="邮箱注册" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="注册" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;requestObj&quot;: {&#xd;
        &quot;agreement&quot;: true,&#xd;
        &quot;email&quot;: &quot;${__P(mes.email,)}&quot;,&#xd;
        &quot;recommendCode&quot;: &quot;${__P(mes.recommendCode,)}&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/email.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis 查询邮箱注册跳转链接token" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_REDIS_EMAIL_${__P(mes.email,)}&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	String redisValue = jedis.get(redisKey);
	log.info(&quot;redisValue：{}&quot;,redisValue);
	vars.put(&quot;registerToken&quot;, redisValue.replaceAll(&quot;\&quot;&quot;, &quot;&quot;));

	String responseData = &quot;redisKey：&quot; + redisKey + &quot;\r\n&quot; 
	+ &quot;redisValue：&quot; + redisValue;

SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="点击邮箱注册跳转链接" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;requestObj&quot;: {&#xd;
        &quot;agreement&quot;: true,&#xd;
        &quot;email&quot;: &quot;${__P(mes.email,)}&quot;,&#xd;
        &quot;token&quot;: &quot;${registerToken}&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/activeEmail.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发送注册短信验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;requestObj&quot;:&quot;${__P(mes.phone,)}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/sendSmsCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis 查询注册短信验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_user_regist&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	String redisValue = jedis.get(redisKey);
	log.info(&quot;redisValue：{}&quot;,redisValue);
	vars.put(&quot;verifyCode&quot;, redisValue.replaceAll(&quot;\&quot;&quot;, &quot;&quot;));

	String responseData = &quot;redisKey：&quot; + redisKey + &quot;\r\n&quot; 
	+ &quot;redisValue：&quot; + redisValue;

SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="完善账户信息" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;requestObj&quot;: {&#xd;
        &quot;email&quot;: &quot;${__P(mes.email,)}&quot;,&#xd;
        &quot;loginPhone&quot;: &quot;${__P(mes.phone,)}&quot;,&#xd;
        &quot;moblileVerifCode&quot;: &quot;${verifyCode}&quot;,&#xd;
        &quot;payPwd&quot;: &quot;${__P(mes.payPwd,)}&quot;,&#xd;
        &quot;payPwdRepeat&quot;: &quot;${__P(mes.payPwd,)}&quot;,&#xd;
        &quot;pwd&quot;: &quot;${__P(mes.loginPwd,)}&quot;,&#xd;
        &quot;pwdRepeat&quot;: &quot;${__P(mes.loginPwd,)}&quot;,&#xd;
        &quot;recommendCode&quot;: &quot;${__P(mes.recommendCode,)}&quot;,&#xd;
        &quot;signType&quot;: 2,&#xd;
        &quot;verfyToken&quot;: &quot;MES_SIGN_VERFY_TOKEN_${__P(mes.email,)}&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/improveInfo.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="登录" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;requestObj&quot;: {&#xd;
    &quot;loginName&quot;: &quot;${__P(mes.email,)}&quot;,&#xd;
    &quot;password&quot;: &quot;${__P(mes.loginPwd,)}&quot;&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/security/login.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-2083166786">&quot;responseObj&quot;:{&quot;token&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取token" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String token = responseObj.getString(&quot;token&quot;);
vars.put(&quot;token&quot;, token);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="实名认证" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询 fe.t_member 根据 login_name" enabled="true">
            <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">select t.*, t.rowid
  from FE.T_MEMBER t
 where t.login_name = &apos;${__P(mes.email,)}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">memberList</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="大陆个人实名认证" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_INDIVIDUAL_INFO 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_INDIVIDUAL_INFO t
where t.member_code = &apos;${memberCode}&apos;
or t.cer_code = &apos;${__P(mes.idCardNo,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_BASE 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_BASE t
where t.member_code = &apos;${memberCode}&apos;
or t.biz_licence_code = &apos;9151010409889665X3&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CERTIFICATE 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_CERTIFICATE t
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CONTACT 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_CONTACT t
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="修改 FE.T_MEMBER 根据 member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">update FE.T_MEMBER t
set t.audi_status = &apos;0&apos;
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="登录" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="600886531">注册-登录</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="已登录" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="上传图片至OSS" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传身份证人像面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/身份证正面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/身份证正面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 personIdPath" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;personIdPath&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传身份证国徽面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../..//testdata/mes-gateway/身份证反面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../..//testdata/mes-gateway/身份证反面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 personIdBackPath" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;personIdBackPath&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传手持身份证至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../..//testdata/mes-gateway/手持身份证.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../..//testdata/mes-gateway/手持身份证.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 personIdHoldPath" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;personIdHoldPath&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="大陆个人实名认证" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="大陆个人实名认证" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;country&quot;: &quot;中国大陆&quot;,&#xd;
    &quot;name&quot;: &quot;${__P(mes.individualName,)}&quot;,&#xd;
    &quot;cerCode&quot;: &quot;${__P(mes.idCardNo,)}&quot;,&#xd;
    &quot;address&quot;: &quot;${__P(mes.address,)}&quot;,&#xd;
    &quot;personIdPath&quot;: &quot;${personIdPath}&quot;,&#xd;
    &quot;personIdBackPath&quot;: &quot;${personIdBackPath}&quot;,&#xd;
    &quot;cerStartExpDate&quot;: &quot;${__P(mes.idCardStartExpDate,)}&quot;,&#xd;
    &quot;cerExpDate&quot;: &quot;${__P(mes.idCardEndExpDate,)}&quot;,&#xd;
    &quot;individualEnName&quot;: &quot;${__P(mes.individualEnName,)}&quot;,&#xd;
    &quot;personIdHoldPath&quot;: &quot;${personIdHoldPath}&quot;,&#xd;
    &quot;bankCardNo&quot;: &quot;${__P(mes.bankCardNo,)}&quot;,&#xd;
    &quot;mobile&quot;: &quot;${__P(mes.reservedPhoneNo,)}&quot;,&#xd;
    &quot;passport&quot;: &quot;&quot;,&#xd;
    &quot;city&quot;: &quot;${__P(mes.city,)}&quot;,&#xd;
    &quot;province&quot;: &quot;${__P(mes.province,)}&quot;,&#xd;
    &quot;birthDate&quot;: &quot;&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/modifyLoginPwd/doPersonAuthentication.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="其他个人实名认证" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_INDIVIDUAL_INFO 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_INDIVIDUAL_INFO t
where t.member_code = &apos;${memberCode}&apos;
or t.cer_code = &apos;${__P(mes.idCardNo,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_BASE 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_BASE t
where t.member_code = &apos;${memberCode}&apos;
or t.biz_licence_code = &apos;9151010409889665X3&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CERTIFICATE 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_CERTIFICATE t
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CONTACT 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_CONTACT t
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="修改 FE.T_MEMBER 根据 member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">update FE.T_MEMBER t
set t.audi_status = &apos;0&apos;
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="登录" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="600886531">注册-登录</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="已登录" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="上传图片至OSS" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传护照至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/护照.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/护照.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 passport" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;passport&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="其他个人实名认证" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="其他个人实名认证" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;country&quot;: &quot;其他&quot;,&#xd;
    &quot;name&quot;: &quot;${__P(mes.individualName,)}&quot;,&#xd;
    &quot;cerCode&quot;: &quot;${__P(mes.idCardNo,)}&quot;,&#xd;
    &quot;address&quot;: &quot;${__P(mes.address,)}&quot;,&#xd;
    &quot;personIdPath&quot;: &quot;&quot;,&#xd;
    &quot;personIdBackPath&quot;: &quot;&quot;,&#xd;
    &quot;cerStartExpDate&quot;: &quot;1&quot;,&#xd;
    &quot;cerExpDate&quot;: &quot;9&quot;,&#xd;
    &quot;individualEnName&quot;: &quot;${__P(mes.individualEnName,)}&quot;,&#xd;
    &quot;personIdHoldPath&quot;: &quot;&quot;,&#xd;
    &quot;bankCardNo&quot;: &quot;&quot;,&#xd;
    &quot;mobile&quot;: &quot;&quot;,&#xd;
    &quot;passport&quot;: &quot;${passport}&quot;,&#xd;
    &quot;city&quot;: &quot;&quot;,&#xd;
    &quot;province&quot;: &quot;&quot;,&#xd;
    &quot;birthDate&quot;: &quot;${__P(mes.birthDay,)}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/modifyLoginPwd/doPersonAuthentication.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="poss 实名认证审核" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询 fe.t_member 根据 login_name" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Select Statement</stringProp>
                <stringProp name="query">select t.*, t.rowid
  from FE.T_MEMBER t
 where t.login_name = &apos;${__P(mes.email,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable">memberList</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as Object</stringProp>
              </JDBCSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                <collectionProp name="CookieManager.cookies"/>
                <boolProp name="CookieManager.clearEachIteration">false</boolProp>
              </CookieManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取验证码" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/cfp-poss/validatecode/validatecode.htm?d=${__UUID}</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录poss" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="j_username" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__P(poss.username,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">j_username</stringProp>
                    </elementProp>
                    <elementProp name="j_password" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__P(poss.loginPwd,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">j_password</stringProp>
                    </elementProp>
                    <elementProp name="rand" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__P(poss.verifyCode,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rand</stringProp>
                    </elementProp>
                    <elementProp name="uuid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__UUID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">uuid</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/cfp-poss/j_spring_security_check</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="poss 实名认证审核" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="memberCode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${memberCode}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">memberCode</stringProp>
                    </elementProp>
                    <elementProp name="checkType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">checkType</stringProp>
                    </elementProp>
                    <elementProp name="auditDesc" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">checkType=1 通过；checkType=2 拒绝</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">auditDesc</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/cfp-poss/cfpMemberCheck.do?method=memberCheckPerson</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="大陆企业实名认证" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_INDIVIDUAL_INFO 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_INDIVIDUAL_INFO t
where t.member_code = &apos;${memberCode}&apos;
or t.cer_code = &apos;${__P(mes.idCardNo,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_BASE 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_BASE t
where t.member_code = &apos;${memberCode}&apos;
or t.biz_licence_code = &apos;9151010409889665X3&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CERTIFICATE 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_CERTIFICATE t
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CONTACT 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_CONTACT t
where t.member_code = &apos;${memberCode}&apos; and t.cer_code=&apos;${__P(mes.idCardNo,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="修改 FE.T_MEMBER 根据 member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">update FE.T_MEMBER t
set t.audi_status = &apos;0&apos;
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="登录" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="600886531">注册-登录</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="已登录" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="上传图片至OSS" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传营业执照至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/营业执照.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/营业执照.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 businessLicense" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;businessLicense&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业法人身份证人像面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/企业法人身份证正面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/企业法人身份证正面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 legalFront" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;legalFront&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业法人身份证国徽面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../..//testdata/mes-gateway/企业法人身份证反面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../..//testdata/mes-gateway/企业法人身份证反面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 legalBack" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;legalBack&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业代理人身份证人像面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/企业代理人身份证正面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/企业代理人身份证正面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 agentFront" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;agentFront&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业代理人身份证国徽面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../..//testdata/mes-gateway/企业代理人身份证反面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../..//testdata/mes-gateway/企业代理人身份证反面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 agentBack" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;agentBack&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业授权书至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/企业授权书.png" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/企业授权书.png</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 agentAuthorizationLetter" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;agentAuthorizationLetter&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="大陆企业实名认证" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="大陆企业实名认证" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;country&quot;: &quot;中国大陆&quot;,&#xd;
    &quot;zhName&quot;: &quot;成都精英银河建筑装饰设计有限公司&quot;,&#xd;
    &quot;enName&quot;: &quot;CDJY&quot;,&#xd;
    &quot;govCode&quot;: &quot;9151010409889665X3&quot;,&#xd;
    &quot;addr&quot;: &quot;成都市锦江区庆云南街69号红星国际3-3-313号&quot;,&#xd;
    &quot;certificateType&quot;: &quot;&quot;,&#xd;
    &quot;pdfOssToken&quot;: &quot;&quot;,&#xd;
    &quot;legalRegisterPlace&quot;: &quot;中国大陆&quot;,&#xd;
    &quot;legalName&quot;: &quot;杨秋华&quot;,&#xd;
    &quot;legalEnName&quot;: &quot;yangqiuhua&quot;,&#xd;
    &quot;legalProvince&quot;: &quot;江苏省&quot;,&#xd;
    &quot;legalCity&quot;: &quot;南京市&quot;,&#xd;
    &quot;legalAddress&quot;: &quot;南京市高淳区阳江镇杨家湾村350号&quot;,&#xd;
    &quot;legalFrontImgOssToken&quot;: &quot;${legalFront}&quot;,&#xd;
    &quot;legalBackImgOssToken&quot;: &quot;${legalBack}&quot;,&#xd;
    &quot;legalPassportImgOssToken&quot;: &quot;&quot;,&#xd;
    &quot;agentRegisterPlace&quot;: &quot;中国大陆&quot;,&#xd;
    &quot;agentName&quot;: &quot;李志祥&quot;,&#xd;
    &quot;agentEnName&quot;: &quot;lizhixiang&quot;,&#xd;
    &quot;agentFrontImgOssToken&quot;: &quot;${agentFront}&quot;,&#xd;
    &quot;agentBackImgOssToken&quot;: &quot;${agentBack}&quot;,&#xd;
    &quot;agentPassportImgOssToken&quot;: &quot;&quot;,&#xd;
    &quot;agenAuthorizationLetter&quot;: &quot;${agentAuthorizationLetter}&quot;,&#xd;
    &quot;bussImgOssToken&quot;: &quot;${businessLicense}&quot;,&#xd;
    &quot;regImgOssToken&quot;: &quot;&quot;,&#xd;
    &quot;enterpriseUpgradeFlag&quot;: &quot;0&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/modifyLoginPwd/doCompanyAuthentication.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="poss 实名认证审核" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询 fe.t_member 根据 login_name" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Select Statement</stringProp>
                <stringProp name="query">select t.*, t.rowid
  from FE.T_MEMBER t
 where t.login_name = &apos;${__P(mes.email,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable">memberList</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as Object</stringProp>
              </JDBCSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                <collectionProp name="CookieManager.cookies"/>
                <boolProp name="CookieManager.clearEachIteration">false</boolProp>
              </CookieManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取验证码" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/cfp-poss/validatecode/validatecode.htm?d=${__UUID}</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录poss" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="j_username" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__P(poss.username,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">j_username</stringProp>
                    </elementProp>
                    <elementProp name="j_password" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__P(poss.loginPwd,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">j_password</stringProp>
                    </elementProp>
                    <elementProp name="rand" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__P(poss.verifyCode,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rand</stringProp>
                    </elementProp>
                    <elementProp name="uuid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__UUID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">uuid</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/cfp-poss/j_spring_security_check</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="poss 实名认证审核" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="memberCode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${memberCode}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">memberCode</stringProp>
                    </elementProp>
                    <elementProp name="checkType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">checkType</stringProp>
                    </elementProp>
                    <elementProp name="auditDesc" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">checkType=1 通过；checkType=2 拒绝</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">auditDesc</stringProp>
                    </elementProp>
                    <elementProp name="individualCerStartExpDateStr" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">individualCerStartExpDateStr</stringProp>
                    </elementProp>
                    <elementProp name="individualCerExpDateStr" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">individualCerExpDateStr</stringProp>
                    </elementProp>
                    <elementProp name="legalCountry" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">中国大陆</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">legalCountry</stringProp>
                    </elementProp>
                    <elementProp name="legalProvince" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">江苏省</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">legalProvince</stringProp>
                    </elementProp>
                    <elementProp name="legalCity" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">南京市</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">legalCity</stringProp>
                    </elementProp>
                    <elementProp name="legalCerStartExpDateStr" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">2016-10-06</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">legalCerStartExpDateStr</stringProp>
                    </elementProp>
                    <elementProp name="legalCerExpDateStr" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">2026-10-06</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">legalCerExpDateStr</stringProp>
                    </elementProp>
                    <elementProp name="agentCountry" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">中国大陆</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">agentCountry</stringProp>
                    </elementProp>
                    <elementProp name="agentProvince" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">agentProvince</stringProp>
                    </elementProp>
                    <elementProp name="agentCity" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">agentCity</stringProp>
                    </elementProp>
                    <elementProp name="agentAddress" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">agentAddress</stringProp>
                    </elementProp>
                    <elementProp name="agentCerStartExpDateStr" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">2017-09-06</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">agentCerStartExpDateStr</stringProp>
                    </elementProp>
                    <elementProp name="agentCerExpDateStr" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">2027-09-06</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">agentCerExpDateStr</stringProp>
                    </elementProp>
                    <elementProp name="refuseReason" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">refuseReason</stringProp>
                    </elementProp>
                    <elementProp name="legalBirthDateStr" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">legalBirthDateStr</stringProp>
                    </elementProp>
                    <elementProp name="agentBirthDateStr" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">agentBirthDateStr</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/cfp-poss/cfpMemberCheck.do?method=memberCheckCompany</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="香港企业实名认证" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_INDIVIDUAL_INFO 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_INDIVIDUAL_INFO t
where t.member_code = &apos;${memberCode}&apos;
or t.cer_code = &apos;${__P(mes.idCardNo,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_BASE 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_BASE t
where t.member_code = &apos;${memberCode}&apos;
or t.biz_licence_code = &apos;9151010409889665X3&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CERTIFICATE 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_CERTIFICATE t
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CONTACT 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_CONTACT t
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="修改 FE.T_MEMBER 根据 member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">update FE.T_MEMBER t
set t.audi_status = &apos;0&apos;
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="登录" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="600886531">注册-登录</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="已登录" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="上传图片至OSS" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传营业执照至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/营业执照.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/营业执照.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 businessLicense" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;businessLicense&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传公司注册说明书至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/公司注册说明书.png" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/公司注册说明书.png</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 registrationInstructions" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;registrationInstructions&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传认证资料至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/NAR1.pdf" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/NAR1.pdf</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 pdf" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;pdf&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业法人身份证人像面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/企业法人身份证正面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/企业法人身份证正面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 legalFront" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;legalFront&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业法人身份证国徽面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../..//testdata/mes-gateway/企业法人身份证反面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../..//testdata/mes-gateway/企业法人身份证反面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 legalBack" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;legalBack&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业代理人身份证人像面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/企业代理人身份证正面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/企业代理人身份证正面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 agentFront" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;agentFront&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业代理人身份证国徽面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../..//testdata/mes-gateway/企业代理人身份证反面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../..//testdata/mes-gateway/企业代理人身份证反面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 agentBack" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;agentBack&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业授权书至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/企业授权书.png" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/企业授权书.png</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 agentAuthorizationLetter" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;agentAuthorizationLetter&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="香港企业实名认证" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="香港企业实名认证" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;country&quot;: &quot;中国香港&quot;,&#xd;
    &quot;zhName&quot;: &quot;成都精英银河建筑装饰设计有限公司&quot;,&#xd;
    &quot;enName&quot;: &quot;CDJY&quot;,&#xd;
    &quot;govCode&quot;: &quot;9151010409889665X3&quot;,&#xd;
    &quot;addr&quot;: &quot;成都市锦江区庆云南街69号红星国际3-3-313号&quot;,&#xd;
    &quot;certificateType&quot;: &quot;1&quot;,&#xd;
    &quot;pdfOssToken&quot;: &quot;${pdf}&quot;,&#xd;
    &quot;legalRegisterPlace&quot;: &quot;中国大陆&quot;,&#xd;
    &quot;legalName&quot;: &quot;杨秋华&quot;,&#xd;
    &quot;legalEnName&quot;: &quot;yangqiuhua&quot;,&#xd;
    &quot;legalProvince&quot;: &quot;江苏省&quot;,&#xd;
    &quot;legalCity&quot;: &quot;南京市&quot;,&#xd;
    &quot;legalAddress&quot;: &quot;南京市高淳区阳江镇杨家湾村350号&quot;,&#xd;
    &quot;legalFrontImgOssToken&quot;: &quot;${legalFront}&quot;,&#xd;
    &quot;legalBackImgOssToken&quot;: &quot;${legalBack}&quot;,&#xd;
    &quot;legalPassportImgOssToken&quot;: &quot;&quot;,&#xd;
    &quot;agentRegisterPlace&quot;: &quot;中国大陆&quot;,&#xd;
    &quot;agentName&quot;: &quot;李志祥&quot;,&#xd;
    &quot;agentEnName&quot;: &quot;lizhixiang&quot;,&#xd;
    &quot;agentFrontImgOssToken&quot;: &quot;${agentFront}&quot;,&#xd;
    &quot;agentBackImgOssToken&quot;: &quot;${agentBack}&quot;,&#xd;
    &quot;agentPassportImgOssToken&quot;: &quot;&quot;,&#xd;
    &quot;agenAuthorizationLetter&quot;: &quot;${agentAuthorizationLetter}&quot;,&#xd;
    &quot;bussImgOssToken&quot;: &quot;${businessLicense}&quot;,&#xd;
    &quot;regImgOssToken&quot;: &quot;${registrationInstructions}&quot;,&#xd;
    &quot;enterpriseUpgradeFlag&quot;: &quot;0&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/modifyLoginPwd/doCompanyAuthentication.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="poss 实名认证审核" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询 fe.t_member 根据 login_name" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Select Statement</stringProp>
                <stringProp name="query">select t.*, t.rowid
  from FE.T_MEMBER t
 where t.login_name = &apos;${__P(mes.email,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable">memberList</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as Object</stringProp>
              </JDBCSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                <collectionProp name="CookieManager.cookies"/>
                <boolProp name="CookieManager.clearEachIteration">false</boolProp>
              </CookieManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取验证码" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/cfp-poss/validatecode/validatecode.htm?d=${__UUID}</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录poss" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="j_username" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__P(poss.username,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">j_username</stringProp>
                    </elementProp>
                    <elementProp name="j_password" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__P(poss.loginPwd,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">j_password</stringProp>
                    </elementProp>
                    <elementProp name="rand" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__P(poss.verifyCode,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rand</stringProp>
                    </elementProp>
                    <elementProp name="uuid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__UUID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">uuid</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/cfp-poss/j_spring_security_check</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="poss 实名认证审核" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="memberCode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${memberCode}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">memberCode</stringProp>
                    </elementProp>
                    <elementProp name="checkType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">checkType</stringProp>
                    </elementProp>
                    <elementProp name="auditDesc" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">checkType=1 通过；checkType=2 拒绝</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">auditDesc</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/cfp-poss/cfpMemberCheck.do?method=memberCheckCompany</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="台湾企业实名认证" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_INDIVIDUAL_INFO 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_INDIVIDUAL_INFO t
where t.member_code = &apos;${memberCode}&apos;
or t.cer_code = &apos;${__P(mes.idCardNo,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_BASE 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_BASE t
where t.member_code = &apos;${memberCode}&apos;
or t.biz_licence_code = &apos;9151010409889665X3&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CERTIFICATE 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_CERTIFICATE t
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CONTACT 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_CONTACT t
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="修改 FE.T_MEMBER 根据 member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">update FE.T_MEMBER t
set t.audi_status = &apos;0&apos;
where t.member_code = &apos;${memberCode}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="登录" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-1326298271">登录mes</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="已登录" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="上传图片至OSS" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传营业执照至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/营业执照.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/营业执照.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 businessLicense" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;businessLicense&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传公司注册说明书至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/公司注册说明书.png" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/公司注册说明书.png</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 registrationInstructions" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;registrationInstructions&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传认证资料至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/NAR1.pdf" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/NAR1.pdf</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 pdf" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;pdf&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业法人身份证人像面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/企业法人身份证正面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/企业法人身份证正面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 legalFront" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;legalFront&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业法人身份证国徽面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../..//testdata/mes-gateway/企业法人身份证反面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../..//testdata/mes-gateway/企业法人身份证反面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 legalBack" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;legalBack&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业代理人身份证人像面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/企业代理人身份证正面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/企业代理人身份证正面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 agentFront" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;agentFront&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业代理人身份证国徽面至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../..//testdata/mes-gateway/企业代理人身份证反面.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">../..//testdata/mes-gateway/企业代理人身份证反面.jpg</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 agentBack" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;agentBack&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业授权书至OSS" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="../../testdata/mes-gateway/企业授权书.png" elementType="HTTPFileArg">
                        <stringProp name="File.path">../../testdata/mes-gateway/企业授权书.png</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">image/jpeg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subPath" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">auth</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subPath</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 agentAuthorizationLetter" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;agentAuthorizationLetter&quot;, fileOssKey);
</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="台湾企业实名认证" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="台湾企业实名认证" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;country&quot;: &quot;中国台湾&quot;,&#xd;
    &quot;zhName&quot;: &quot;成都精英银河建筑装饰设计有限公司&quot;,&#xd;
    &quot;enName&quot;: &quot;CDJY&quot;,&#xd;
    &quot;govCode&quot;: &quot;9151010409889665X3&quot;,&#xd;
    &quot;addr&quot;: &quot;成都市锦江区庆云南街69号红星国际3-3-313号&quot;,&#xd;
    &quot;certificateType&quot;: &quot;&quot;,&#xd;
    &quot;pdfOssToken&quot;: &quot;&quot;,&#xd;
    &quot;legalRegisterPlace&quot;: &quot;中国大陆&quot;,&#xd;
    &quot;legalName&quot;: &quot;杨秋华&quot;,&#xd;
    &quot;legalEnName&quot;: &quot;yangqiuhua&quot;,&#xd;
    &quot;legalProvince&quot;: &quot;江苏省&quot;,&#xd;
    &quot;legalCity&quot;: &quot;南京市&quot;,&#xd;
    &quot;legalAddress&quot;: &quot;南京市高淳区阳江镇杨家湾村350号&quot;,&#xd;
    &quot;legalFrontImgOssToken&quot;: &quot;${legalFront}&quot;,&#xd;
    &quot;legalBackImgOssToken&quot;: &quot;${legalBack}&quot;,&#xd;
    &quot;legalPassportImgOssToken&quot;: &quot;&quot;,&#xd;
    &quot;agentRegisterPlace&quot;: &quot;中国大陆&quot;,&#xd;
    &quot;agentName&quot;: &quot;李志祥&quot;,&#xd;
    &quot;agentEnName&quot;: &quot;lizhixiang&quot;,&#xd;
    &quot;agentFrontImgOssToken&quot;: &quot;${agentFront}&quot;,&#xd;
    &quot;agentBackImgOssToken&quot;: &quot;${agentBack}&quot;,&#xd;
    &quot;agentPassportImgOssToken&quot;: &quot;&quot;,&#xd;
    &quot;agenAuthorizationLetter&quot;: &quot;${agentAuthorizationLetter}&quot;,&#xd;
    &quot;bussImgOssToken&quot;: &quot;${businessLicense}&quot;,&#xd;
    &quot;regImgOssToken&quot;: &quot;&quot;,&#xd;
    &quot;enterpriseUpgradeFlag&quot;: &quot;0&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/modifyLoginPwd/doCompanyAuthentication.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="poss 实名认证审核" enabled="true"/>
            <hashTree>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                <collectionProp name="CookieManager.cookies"/>
                <boolProp name="CookieManager.clearEachIteration">false</boolProp>
              </CookieManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取验证码" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/cfp-poss/validatecode/validatecode.htm?d=${__UUID}</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录poss" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="j_username" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__P(poss.username,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">j_username</stringProp>
                    </elementProp>
                    <elementProp name="j_password" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__P(poss.loginPwd,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">j_password</stringProp>
                    </elementProp>
                    <elementProp name="rand" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__P(poss.verifyCode,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rand</stringProp>
                    </elementProp>
                    <elementProp name="uuid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__UUID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">uuid</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/cfp-poss/j_spring_security_check</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="poss 实名认证审核" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="memberCode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${memberCode}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">memberCode</stringProp>
                    </elementProp>
                    <elementProp name="checkType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">checkType</stringProp>
                    </elementProp>
                    <elementProp name="auditDesc" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">checkType=1 通过；checkType=2 拒绝</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">auditDesc</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/cfp-poss/cfpMemberCheck.do?method=memberCheckCompany</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="店铺提现" enabled="false"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="登录" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="phone" elementType="Argument">
                <stringProp name="Argument.name">phone</stringProp>
                <stringProp name="Argument.value">18912911129</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="loginPwd" elementType="Argument">
                <stringProp name="Argument.name">loginPwd</stringProp>
                <stringProp name="Argument.value">12345678A</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="提现" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="withdrawCurrency" elementType="Argument">
                <stringProp name="Argument.name">withdrawCurrency</stringProp>
                <stringProp name="Argument.value">USD</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="fundOutChannel" elementType="Argument">
                <stringProp name="Argument.name">fundOutChannel</stringProp>
                <stringProp name="Argument.value">FUIOU_ONLINE</stringProp>
                <stringProp name="Argument.desc">CCS_ONLINE：稠州银行；BOSC_ONLINE_NEW：上海银行线上2.0；FUIOU_ONLINE：富友；BOSC_OFFLINE：上海银行线下</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="出款渠道配置，决定路由渠道" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="稠州银行" enabled="true">
              <stringProp name="IfController.condition">&quot;${fundOutChannel}&quot; == &quot;CCS_ONLINE&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="启用稠州银行" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update CFP_CHANNEL.T_FUND_OUT_CHANNEL
   set CHANNEL_TYPE   = &apos;1&apos;,
       TRADE_TYPE     = &apos;1,7,8&apos;,
       BUSINESS_TYPE  = &apos;1,2&apos;,
       CURRENCY       = &apos;CNY&apos;,
       REGION         = &apos;CM&apos;,
       PRIORITY       = &apos;1&apos;,
       STATUS         = &apos;1&apos;,
       SITE           = &apos;101,103,104,105,102,203,204,301,401,402,501,601&apos;,
       AMOUNT         = &apos;100000000&apos;,
       FROM_TIME      = &apos;000000&apos;,
       TO_TIME        = &apos;235959&apos;,
       FROM_RATIO     = &apos;0&apos;,
       TO_RATIO       = &apos;100&apos;,
       NEED_ACCOUNT   = &apos;1&apos;,
       LIMIT_ONE_CARD = &apos;1&apos;,
       UPDATE_TIME    = sysdate
 where ORG_CODE = &apos;CCS_ONLINE&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="禁用非稠州银行" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update CFP_CHANNEL.T_FUND_OUT_CHANNEL
   set STATUS = &apos;0&apos;, 
       UPDATE_TIME = sysdate
 where ORG_CODE != &apos;CCS_ONLINE&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="上海银行线上2.0" enabled="true">
              <stringProp name="IfController.condition">&quot;${fundOutChannel}&quot; == &quot;BOSC_ONLINE_NEW&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="启用上海银行线上2.0" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update CFP_CHANNEL.T_FUND_OUT_CHANNEL
   set CHANNEL_TYPE   = &apos;1&apos;,
       TRADE_TYPE     = &apos;1,2&apos;,
       BUSINESS_TYPE  = &apos;1&apos;,
       CURRENCY       = &apos;CNY&apos;,
       REGION         = &apos;CM&apos;,
       PRIORITY       = &apos;1&apos;,
       STATUS         = &apos;1&apos;,
       SITE           = &apos;101,103,104,105,102,203,204,301,401,402,501,601&apos;,
       AMOUNT         = &apos;100000000&apos;,
       FROM_TIME      = &apos;000000&apos;,
       TO_TIME        = &apos;235959&apos;,
       FROM_RATIO     = &apos;0&apos;,
       TO_RATIO       = &apos;100&apos;,
       NEED_ACCOUNT   = &apos;1&apos;,
       LIMIT_ONE_CARD = &apos;0&apos;,
       UPDATE_TIME    = sysdate
 where ORG_CODE = &apos;BOSC_ONLINE_NEW&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="禁用非上海银行线上2.0" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update CFP_CHANNEL.T_FUND_OUT_CHANNEL
   set STATUS = &apos;0&apos;, 
       UPDATE_TIME = sysdate
 where ORG_CODE != &apos;BOSC_ONLINE_NEW&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="富友" enabled="true">
              <stringProp name="IfController.condition">&quot;${fundOutChannel}&quot; == &quot;FUIOU_ONLINE&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="启用富友" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update CFP_CHANNEL.T_FUND_OUT_CHANNEL
   set CHANNEL_TYPE   = &apos;1&apos;,
       TRADE_TYPE     = &apos;1,2&apos;,
       BUSINESS_TYPE  = &apos;1&apos;,
       CURRENCY       = &apos;CNY&apos;,
       REGION         = &apos;CM&apos;,
       PRIORITY       = &apos;1&apos;,
       STATUS         = &apos;1&apos;,
       SITE           = &apos;101,103,104,105,102,203,204,301,401,402,501,601&apos;,
       AMOUNT         = &apos;100000000&apos;,
       FROM_TIME      = &apos;000000&apos;,
       TO_TIME        = &apos;235959&apos;,
       FROM_RATIO     = &apos;0&apos;,
       TO_RATIO       = &apos;100&apos;,
       NEED_ACCOUNT   = &apos;0&apos;,
       LIMIT_ONE_CARD = &apos;0&apos;,
       UPDATE_TIME    = sysdate
 where ORG_CODE = &apos;FUIOU_ONLINE&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="禁用非富友" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update CFP_CHANNEL.T_FUND_OUT_CHANNEL
   set STATUS = &apos;0&apos;, 
       UPDATE_TIME = sysdate
 where ORG_CODE != &apos;FUIOU_ONLINE&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="上海银行线下" enabled="true">
              <stringProp name="IfController.condition">&quot;${fundOutChannel}&quot; == &quot;BOSC_OFFLINE&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="启用上海银行线下" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update CFP_CHANNEL.T_FUND_OUT_CHANNEL
   set CHANNEL_TYPE   = &apos;1&apos;,
       TRADE_TYPE     = &apos;1,6,9,10&apos;,
       BUSINESS_TYPE  = &apos;1,2&apos;,
       CURRENCY       = &apos;USD,EUR,GBP,HKD,AUD,CAD,JPY&apos;,
       REGION         = &apos;CM,HK&apos;,
       PRIORITY       = &apos;1&apos;,
       STATUS         = &apos;1&apos;,
       SITE           = &apos;101,103,104,105,102,203,204,301,401,402,501,601&apos;,
       AMOUNT         = &apos;100000000&apos;,
       FROM_TIME      = &apos;000000&apos;,
       TO_TIME        = &apos;235959&apos;,
       FROM_RATIO     = &apos;0&apos;,
       TO_RATIO       = &apos;100&apos;,
       NEED_ACCOUNT   = &apos;0&apos;,
       LIMIT_ONE_CARD = &apos;0&apos;,
       UPDATE_TIME    = sysdate
 where ORG_CODE = &apos;BOSC_OFFLINE&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="禁用非上海银行线下" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update CFP_CHANNEL.T_FUND_OUT_CHANNEL
   set STATUS = &apos;0&apos;, 
       UPDATE_TIME = sysdate
 where ORG_CODE != &apos;BOSC_OFFLINE&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="登录" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestObj&quot;: {&#xd;
    &quot;loginName&quot;: &quot;${phone}&quot;,&#xd;
    &quot;password&quot;: &quot;${loginPwd}&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
              <stringProp name="HTTPSampler.path">/mes-gateway/api/security/login.json</stringProp>
              <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                  <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                  <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  <stringProp name="-2083166786">&quot;responseObj&quot;:{&quot;token&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取token" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String token = responseObj.getString(&quot;token&quot;);
vars.put(&quot;token&quot;, token);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="店铺提现" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="支付密码提现" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="用户选择银行卡时，调用锁汇接口" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;currency&quot;:&quot;${withdrawCurrency}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/withdraw/lockExchangeRate.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="1652331244">&quot;responseObj&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="店铺提现" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;platId&quot;: 101,&#xd;
    &quot;liquidateId&quot;: 9074,&#xd;
    &quot;withdrawAmount&quot;: 2010,&#xd;
    &quot;withdrawCurrency&quot;: &quot;${withdrawCurrency}&quot;,&#xd;
    &quot;settleCurrency&quot;: &quot;CNY&quot;,&#xd;
    &quot;checkMethod&quot;: &quot;1&quot;,&#xd;
    &quot;paymengPwd&quot;: &quot;12345678Z&quot;,&#xd;
    &quot;couponIds&quot;: [],&#xd;
    &quot;details&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: 4609,&#xd;
            &quot;memberCode&quot;: 10000007381,&#xd;
            &quot;platId&quot;: 101,&#xd;
            &quot;shopId&quot;: 5946,&#xd;
            &quot;accountNo&quot;: &quot;320299110000007381840000000005946&quot;,&#xd;
            &quot;withdrawAmount&quot;: &quot;2000&quot;,&#xd;
            &quot;currencyCode&quot;: &quot;${withdrawCurrency}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: 3642,&#xd;
            &quot;memberCode&quot;: 10000007381,&#xd;
            &quot;platId&quot;: 101,&#xd;
            &quot;shopId&quot;: 5050,&#xd;
            &quot;accountNo&quot;: &quot;320299110000007381840000000005050&quot;,&#xd;
            &quot;withdrawAmount&quot;: &quot;10&quot;,&#xd;
            &quot;currencyCode&quot;: &quot;${withdrawCurrency}&quot;&#xd;
        }&#xd;
    ] &#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/withdraw/applyWithdraw.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="短信验证码提现" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="用户选择银行卡时，调用锁汇接口" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;currency&quot;:&quot;${withdrawCurrency}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/withdraw/lockExchangeRate.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="1652331244">&quot;responseObj&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发送提现短信验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;codeType&quot;:&quot;payment_verification&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/common/sendVerifyCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="1652331244">&quot;responseObj&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis 查询提现短信验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_${phone}_payment_verification&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	String redisValue = jedis.get(redisKey);
	log.info(&quot;redisValue：{}&quot;,redisValue);
	vars.put(&quot;verifyCode&quot;, redisValue.replaceAll(&quot;\&quot;&quot;, &quot;&quot;));

	String responseData = &quot;redisKey：&quot; + redisKey + &quot;\r\n&quot; 
	+ &quot;redisValue：&quot; + redisValue;

SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="店铺提现" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;platId&quot;: 101,&#xd;
    &quot;liquidateId&quot;: 9074,&#xd;
    &quot;withdrawAmount&quot;: 2010,&#xd;
    &quot;withdrawCurrency&quot;: &quot;${withdrawCurrency}&quot;,&#xd;
    &quot;settleCurrency&quot;: &quot;CNY&quot;,&#xd;
    &quot;checkMethod&quot;: &quot;0&quot;,&#xd;
    &quot;verifyCode&quot;: &quot;${verifyCode}&quot;,&#xd;
    &quot;couponIds&quot;: [],&#xd;
    &quot;details&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: 4609,&#xd;
            &quot;memberCode&quot;: 10000007381,&#xd;
            &quot;platId&quot;: 101,&#xd;
            &quot;shopId&quot;: 5946,&#xd;
            &quot;accountNo&quot;: &quot;320299110000007381840000000005946&quot;,&#xd;
            &quot;withdrawAmount&quot;: &quot;2000&quot;,&#xd;
            &quot;currencyCode&quot;: &quot;${withdrawCurrency}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: 3642,&#xd;
            &quot;memberCode&quot;: 10000007381,&#xd;
            &quot;platId&quot;: 101,&#xd;
            &quot;shopId&quot;: 5050,&#xd;
            &quot;accountNo&quot;: &quot;320299110000007381840000000005050&quot;,&#xd;
            &quot;withdrawAmount&quot;: &quot;10&quot;,&#xd;
            &quot;currencyCode&quot;: &quot;${withdrawCurrency}&quot;&#xd;
        }&#xd;
    ] &#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/withdraw/applyWithdraw.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加提现卡" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="个人用户-个人中国大陆-人民币银行卡" enabled="false"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="提现卡" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="swiftCode" elementType="Argument">
                  <stringProp name="Argument.name">swiftCode</stringProp>
                  <stringProp name="Argument.value">AAAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="currency" elementType="Argument">
                  <stringProp name="Argument.name">currency</stringProp>
                  <stringProp name="Argument.value">CNY</stringProp>
                  <stringProp name="Argument.desc">币种</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankName" elementType="Argument">
                  <stringProp name="Argument.name">bankName</stringProp>
                  <stringProp name="Argument.value">中国</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="openBankName" elementType="Argument">
                  <stringProp name="Argument.name">openBankName</stringProp>
                  <stringProp name="Argument.value">中国银行上海市分行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">开户行名称</stringProp>
                </elementProp>
                <elementProp name="bankAcctType" elementType="Argument">
                  <stringProp name="Argument.name">bankAcctType</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">银行账户类型（1个人，2企业）</stringProp>
                </elementProp>
                <elementProp name="acctName" elementType="Argument">
                  <stringProp name="Argument.name">acctName</stringProp>
                  <stringProp name="Argument.value">余泉</stringProp>
                  <stringProp name="Argument.desc">账户名称</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankAddress" elementType="Argument">
                  <stringProp name="Argument.name">bankAddress</stringProp>
                  <stringProp name="Argument.value">上海市陆家嘴东昌路13号中国银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="province" elementType="Argument">
                  <stringProp name="Argument.name">province</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                </elementProp>
                <elementProp name="city" elementType="Argument">
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankCnapsCode" elementType="Argument">
                  <stringProp name="Argument.name">bankCnapsCode</stringProp>
                  <stringProp name="Argument.value">银联号</stringProp>
                  <stringProp name="Argument.desc">银联号</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="1536726427">大陆个人实名认证</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加个人-中国大陆-人名币提现卡" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="银行卡加密" enabled="true">
                <stringProp name="BeanShellSampler.query">import com.ipaylinks.test.commons.codec.DESUtil;


String bankAcct = DESUtil.encrypt(&quot;${__P(mes.bankAcct_person_yu,)}&quot;);
log.info(&quot;bankAcct：{}&quot;,bankAcct);
vars.put(&quot;des_bankAcct&quot;,bankAcct)</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_ACCOUNT_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行开户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_ACCOUNT_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_SIGN_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行签约表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_SIGN_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO_HISTORY 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户历史记录表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO_HISTORY where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询member_code 根据loginname" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select member_code from FE.T_MEMBER WHERE login_name=&apos;${__P(mes.email,)}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">memberCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as Object</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询实名认证姓名 根据membercode" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select name from FE.T_INDIVIDUAL_INFO where MEMBER_CODE=&apos;${memberCode_1}&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">name</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加体现卡-发送验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;codeType&quot;: &quot;add_bank_card&quot;,&#xd;
  &quot;mobileNo&quot;: &quot;${__P(mes.phone,)}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/common/sendVerifyCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-575703187">{&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="从redis获取验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
Jedis jedis = RedisElement.getJedis(redisPoolName);
String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_add_bank_card&quot;;
log.info(&quot;redisKey：{}&quot;,redisKey);
String redisValue = jedis.get(redisKey);
log.info(&quot;redisValue：{}&quot;,redisValue);
jedis.close();
vars.put(&quot;verifyCode&quot;, redisValue);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis-删除验证码次数记录" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_SEND_TIMES_${__P(mes.phone,)}_add_bank_card&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	jedis.del(redisKey);

	String responseData = &quot;del redisKey：&quot; + redisKey + &quot; success&quot;;
jedis.close();//断开连接
log.info(&quot;退出redis连接！&quot;);
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加个人用户-个人中国大陆-人民币银行卡提现卡" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bankAcct&quot;: &quot;${__P(mes.bankAcct_person_yu,)}&quot;,&#xd;
  &quot;swiftCode&quot;: &quot;&quot;,&#xd;
  &quot;currency&quot;: &quot;CNY&quot;,&#xd;
  &quot;bankName&quot;: &quot;${bankName}&quot;,&#xd;
  &quot;openBankName&quot;: &quot;${openBankName}&quot;,&#xd;
  &quot;bankCountry&quot;: &quot;中国大陆&quot;,&#xd;
  &quot;bankAcctType&quot;: &quot;${bankAcctType}&quot;,&#xd;
  &quot;province&quot;: &quot;${province}&quot;,&#xd;
  &quot;city&quot;: &quot;${city}&quot;,&#xd;
  &quot;verifyCode&quot;: ${verifyCode},&#xd;
  &quot;branchBankCode&quot;: &quot;&quot;,&#xd;
  &quot;acctName&quot;: &quot;${name_1}&quot;,&#xd;
  &quot;bankCnapsCode&quot;: &quot;&quot;,&#xd;
  &quot;reservedPhone&quot;: &quot;${__P(mes.phone,)}&quot;,&#xd;
  &quot;bankAddress&quot;: &quot;${bankAddress}&quot;&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/bankcard/addBankCard.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                  <stringProp name="BeanShellAssertion.query"></stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="检查T_LIQUIDATE_INFO是否新增一条数据 根据MEMBER_CODE" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select * from FE.T_LIQUIDATE_INFO where MEMBER_CODE=&apos;${memberCode_1}&apos;

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">result</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">int result = Integer.valueOf(${result_#}).intValue();
if(result&lt;=0) {
    Failure = true; 
    FailureMessage = &quot;规则解析失败&quot;;
}else{
    FailureMessage = &quot;规则解析成功&quot;;
    }
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="个人用户-个人中国大陆-外币银行卡" enabled="false"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="提现卡" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="swiftCode" elementType="Argument">
                  <stringProp name="Argument.name">swiftCode</stringProp>
                  <stringProp name="Argument.value">AAAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="currency" elementType="Argument">
                  <stringProp name="Argument.name">currency</stringProp>
                  <stringProp name="Argument.value">GBP</stringProp>
                  <stringProp name="Argument.desc">币种</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankName" elementType="Argument">
                  <stringProp name="Argument.name">bankName</stringProp>
                  <stringProp name="Argument.value">外币银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="openBankName" elementType="Argument">
                  <stringProp name="Argument.name">openBankName</stringProp>
                  <stringProp name="Argument.value">东昌路分行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">开户行名称</stringProp>
                </elementProp>
                <elementProp name="bankAcctType" elementType="Argument">
                  <stringProp name="Argument.name">bankAcctType</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">银行账户类型（1个人，2企业）</stringProp>
                </elementProp>
                <elementProp name="bankAddress" elementType="Argument">
                  <stringProp name="Argument.name">bankAddress</stringProp>
                  <stringProp name="Argument.value">上海市陆家嘴东昌路12号上海银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankCnapsCode" elementType="Argument">
                  <stringProp name="Argument.name">bankCnapsCode</stringProp>
                  <stringProp name="Argument.value">银联号</stringProp>
                  <stringProp name="Argument.desc">银联号</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="1536726427">大陆个人实名认证</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加个人用户-个人中国大陆-外币银行卡提现卡" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="银行卡加密" enabled="true">
                  <stringProp name="BeanShellSampler.query">import com.ipaylinks.test.commons.codec.DESUtil;


String bankAcct = DESUtil.encrypt(&quot;${__P(mes.bankAcct_person_yu,)}&quot;);
log.info(&quot;bankAcct：{}&quot;,bankAcct);
vars.put(&quot;des_bankAcct&quot;,bankAcct)</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询member_code 根据loginname" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select member_code from FE.T_MEMBER WHERE login_name=&apos;${__P(mes.email,)}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">memberCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as Object</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询实名认证英文名 通国membercode" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select INDIVIDUAL_EN_NAME from FE.T_INDIVIDUAL_INFO where  MEMBER_CODE=&apos;${memberCode_1}&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">name</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_ACCOUNT_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行开户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_ACCOUNT_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_SIGN_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行签约表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_SIGN_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO_HISTORY 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户历史记录表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO_HISTORY where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加体现卡-发送验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;codeType&quot;: &quot;add_bank_card&quot;,&#xd;
  &quot;mobileNo&quot;: &quot;${__P(mes.phone,)}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/common/sendVerifyCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-575703187">{&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="从redis获取验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
Jedis jedis = RedisElement.getJedis(redisPoolName);
String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_add_bank_card&quot;;
log.info(&quot;redisKey：{}&quot;,redisKey);
String redisValue = jedis.get(redisKey);
log.info(&quot;redisValue：{}&quot;,redisValue);
vars.put(&quot;verifyCode&quot;, redisValue);
String responseData = &quot;get redisKey &quot;+ redisKey+&quot; \n redisValue：&quot; + redisValue + &quot; success&quot;;
jedis.close();
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis-删除验证码次数记录" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_SEND_TIMES_${__P(mes.phone,)}_add_bank_card&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	jedis.del(redisKey);

	String responseData = &quot;del redisKey：&quot; + redisKey + &quot; success&quot;;
jedis.close();
log.info(&quot;退出redis连接！&quot;);
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加个人用户-个人中国大陆-外币银行卡" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bankAcct&quot;: &quot;${__P(mes.bankAcct_person_yu,)}&quot;,&#xd;
  &quot;swiftCode&quot;: &quot;${swiftCode}&quot;,&#xd;
  &quot;currency&quot;: &quot;${currency}&quot;,&#xd;
  &quot;bankName&quot;: &quot;${bankName}&quot;,&#xd;
  &quot;openBankName&quot;: &quot;${openBankName}&quot;,&#xd;
  &quot;bankCountry&quot;: &quot;中国大陆&quot;,&#xd;
  &quot;bankAcctType&quot;: &quot;${bankAcctType}&quot;,&#xd;
  &quot;province&quot;: &quot;&quot;,&#xd;
  &quot;city&quot;: &quot;&quot;,&#xd;
  &quot;verifyCode&quot;: ${verifyCode},&#xd;
  &quot;branchBankCode&quot;: &quot;&quot;,&#xd;
  &quot;acctName&quot;: &quot;${name_1}&quot;,&#xd;
  &quot;bankCnapsCode&quot;: &quot;&quot;,&#xd;
  &quot;reservedPhone&quot;: &quot;&quot;,&#xd;
  &quot;bankAddress&quot;: &quot;${bankAddress}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/bankcard/addBankCard.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="检查T_LIQUIDATE_INFO是否新增一条数据 根据MEMBER_CODE" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">select * from FE.T_LIQUIDATE_INFO where MEMBER_CODE=&apos;${memberCode_1}&apos; order by CREATE_DATE desc

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">result</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">int result = Integer.valueOf(${result_#}).intValue();
if(result&lt;=0) {
    Failure = true; 
    FailureMessage = &quot;规则解析失败&quot;;
}else{
    FailureMessage = &quot;规则解析成功&quot;;
    }
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="个人用户-个人非中国大陆外币银行卡" enabled="false"/>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="提现" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="swiftCode" elementType="Argument">
                    <stringProp name="Argument.name">swiftCode</stringProp>
                    <stringProp name="Argument.value">AAAAAAA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="currency" elementType="Argument">
                    <stringProp name="Argument.name">currency</stringProp>
                    <stringProp name="Argument.value">GBP</stringProp>
                    <stringProp name="Argument.desc">币种</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bankName" elementType="Argument">
                    <stringProp name="Argument.name">bankName</stringProp>
                    <stringProp name="Argument.value">外币银行</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="openBankName" elementType="Argument">
                    <stringProp name="Argument.name">openBankName</stringProp>
                    <stringProp name="Argument.value">东昌路分行</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <stringProp name="Argument.desc">开户行名称</stringProp>
                  </elementProp>
                  <elementProp name="bankAcctType" elementType="Argument">
                    <stringProp name="Argument.name">bankAcctType</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <stringProp name="Argument.desc">银行账户类型（1个人，2企业）</stringProp>
                  </elementProp>
                  <elementProp name="bankAddress" elementType="Argument">
                    <stringProp name="Argument.name">bankAddress</stringProp>
                    <stringProp name="Argument.value">上海市陆家嘴东昌路12号上海银行</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bankCnapsCode" elementType="Argument">
                    <stringProp name="Argument.name">bankCnapsCode</stringProp>
                    <stringProp name="Argument.value">银联号</stringProp>
                    <stringProp name="Argument.desc">银联号</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;requestObj&quot;: {&#xd;
    &quot;loginName&quot;: &quot;${__P(mes.email_person_yu,)}&quot;,&#xd;
    &quot;password&quot;: &quot;${__P(mes.loginPwd_person_yu,)}&quot;&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/security/login.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-2083166786">&quot;responseObj&quot;:{&quot;token&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取token" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = (JSONObject) responseData.get(&quot;responseObj&quot;);
String token = String.valueOf(responseObj.get(&quot;token&quot;));
vars.put(&quot;token&quot;, token);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加个人-非中国大陆提现卡" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="银行卡加密" enabled="true">
                    <stringProp name="BeanShellSampler.query">import com.ipaylinks.test.commons.codec.DESUtil;


String bankAcct = DESUtil.encrypt(&quot;${__P(mes.bankAcct_person_yu,)}&quot;);
log.info(&quot;bankAcct：{}&quot;,bankAcct);
vars.put(&quot;des_bankAcct&quot;,bankAcct)</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询member_code 根据loginname" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Select Statement</stringProp>
                    <stringProp name="query">select member_code from FE.T_MEMBER WHERE login_name=&apos;${__P(mes.email_person_yu,)}&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames">memberCode</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as Object</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                      <stringProp name="cacheKey">false</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询实名认证英文名 通国membercode" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Select Statement</stringProp>
                    <stringProp name="query">select INDIVIDUAL_EN_NAME from FE.T_INDIVIDUAL_INFO where  MEMBER_CODE=&apos;${memberCode_1}&apos;
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames">name</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO 根据银行卡号" enabled="true">
                    <stringProp name="TestPlan.comments">提现账户表</stringProp>
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_LIQUIDATE_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_ACCOUNT_INFO 根据银行卡号" enabled="true">
                    <stringProp name="TestPlan.comments">银行开户表</stringProp>
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_LIQUIDATE_ACCOUNT_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_SIGN_INFO 根据银行卡号" enabled="true">
                    <stringProp name="TestPlan.comments">银行签约表</stringProp>
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_LIQUIDATE_SIGN_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO_HISTORY 根据银行卡号" enabled="true">
                    <stringProp name="TestPlan.comments">提现账户历史记录表</stringProp>
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_LIQUIDATE_INFO_HISTORY where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                      <stringProp name="Header.value">${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加体现卡-发送验证码" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;codeType&quot;: &quot;add_bank_card&quot;,&#xd;
  &quot;mobileNo&quot;: &quot;${__P(mes.phone_person_yu,)}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/common/sendVerifyCode.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-575703187">{&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="从redis获取验证码" enabled="true">
                  <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
Jedis jedis = RedisElement.getJedis(redisPoolName);
String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone_person_yu,)}_add_bank_card&quot;;
log.info(&quot;redisKey：{}&quot;,redisKey);
String redisValue = jedis.get(redisKey);
log.info(&quot;redisValue：{}&quot;,redisValue);
vars.put(&quot;verifyCode&quot;, redisValue);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加提现卡" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;bankAcct&quot;: &quot;${__P(mes.bankAcct_person_yu,)}&quot;,&#xd;
  &quot;swiftCode&quot;: &quot;${swiftCode}&quot;,&#xd;
  &quot;currency&quot;: &quot;${currency}&quot;,&#xd;
  &quot;bankName&quot;: &quot;${bankName}&quot;,&#xd;
  &quot;openBankName&quot;: &quot;${openBankName}&quot;,&#xd;
  &quot;bankCountry&quot;: &quot;非中国大陆&quot;,&#xd;
  &quot;bankAcctType&quot;: &quot;${bankAcctType}&quot;,&#xd;
  &quot;province&quot;: &quot;&quot;,&#xd;
  &quot;city&quot;: &quot;&quot;,&#xd;
  &quot;verifyCode&quot;: ${verifyCode},&#xd;
  &quot;branchBankCode&quot;: &quot;&quot;,&#xd;
  &quot;acctName&quot;: &quot;${name_1}&quot;,&#xd;
  &quot;bankCnapsCode&quot;: &quot;&quot;,&#xd;
  &quot;reservedPhone&quot;: &quot;&quot;,&#xd;
  &quot;bankAddress&quot;: &quot;${bankAddress}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/bankcard/addBankCard.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="检查T_LIQUIDATE_INFO是否新增一条数据 根据MEMBER_CODE" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Select Statement</stringProp>
                <stringProp name="query">select * from FE.T_LIQUIDATE_INFO where MEMBER_CODE=&apos;${memberCode_1}&apos; order by CREATE_DATE desc

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">result</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">int result = Integer.valueOf(${result_#}).intValue();
if(result&lt;=0) {
    Failure = true; 
    FailureMessage = &quot;规则解析失败&quot;;
}else{
    FailureMessage = &quot;规则解析成功&quot;;
    }
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="个人用户-个人非中国大陆-外币银行卡" enabled="false"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="提现卡" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="swiftCode" elementType="Argument">
                  <stringProp name="Argument.name">swiftCode</stringProp>
                  <stringProp name="Argument.value">AAAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="currency" elementType="Argument">
                  <stringProp name="Argument.name">currency</stringProp>
                  <stringProp name="Argument.value">GBP</stringProp>
                  <stringProp name="Argument.desc">币种</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankName" elementType="Argument">
                  <stringProp name="Argument.name">bankName</stringProp>
                  <stringProp name="Argument.value">外币银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="openBankName" elementType="Argument">
                  <stringProp name="Argument.name">openBankName</stringProp>
                  <stringProp name="Argument.value">东昌路分行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">开户行名称</stringProp>
                </elementProp>
                <elementProp name="bankAcctType" elementType="Argument">
                  <stringProp name="Argument.name">bankAcctType</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">银行账户类型（1个人，2企业）</stringProp>
                </elementProp>
                <elementProp name="bankAddress" elementType="Argument">
                  <stringProp name="Argument.name">bankAddress</stringProp>
                  <stringProp name="Argument.value">上海市陆家嘴东昌路12号上海银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankCnapsCode" elementType="Argument">
                  <stringProp name="Argument.name">bankCnapsCode</stringProp>
                  <stringProp name="Argument.value">银联号</stringProp>
                  <stringProp name="Argument.desc">银联号</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="1536726427">大陆个人实名认证</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加个人-非中国大陆-外币提现卡" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="银行卡加密" enabled="true">
                  <stringProp name="BeanShellSampler.query">import com.ipaylinks.test.commons.codec.DESUtil;


String bankAcct = DESUtil.encrypt(&quot;${__P(mes.bankAcct_person_yu,)}&quot;);
log.info(&quot;bankAcct：{}&quot;,bankAcct);
vars.put(&quot;des_bankAcct&quot;,bankAcct)</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询member_code 根据loginname" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select member_code from FE.T_MEMBER WHERE login_name=&apos;${__P(mes.email,)}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">memberCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as Object</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询实名认证英文名 通国membercode" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select INDIVIDUAL_EN_NAME from FE.T_INDIVIDUAL_INFO where  MEMBER_CODE=&apos;${memberCode_1}&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">name</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_ACCOUNT_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行开户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_ACCOUNT_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_SIGN_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行签约表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_SIGN_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO_HISTORY 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户历史记录表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO_HISTORY where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加体现卡-发送验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;codeType&quot;: &quot;add_bank_card&quot;,&#xd;
  &quot;mobileNo&quot;: &quot;${__P(mes.phone,)}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/common/sendVerifyCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-575703187">{&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="从redis获取验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
Jedis jedis = RedisElement.getJedis(redisPoolName);
String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_add_bank_card&quot;;
log.info(&quot;redisKey：{}&quot;,redisKey);
String redisValue = jedis.get(redisKey);
log.info(&quot;redisValue：{}&quot;,redisValue);
jedis.close();
vars.put(&quot;verifyCode&quot;, redisValue);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis-删除验证码次数记录" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_SEND_TIMES_${__P(mes.phone,)}_add_bank_card&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	jedis.del(redisKey);

	String responseData = &quot;del redisKey：&quot; + redisKey + &quot; success&quot;;
jedis.close();;//断开连接
log.info(&quot;退出redis连接！&quot;);
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加个人用户-个人非中国大陆-外币银行卡提现卡" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bankAcct&quot;: &quot;${__P(mes.bankAcct_person_yu,)}&quot;,&#xd;
  &quot;swiftCode&quot;: &quot;${swiftCode}&quot;,&#xd;
  &quot;currency&quot;: &quot;${currency}&quot;,&#xd;
  &quot;bankName&quot;: &quot;${bankName}&quot;,&#xd;
  &quot;openBankName&quot;: &quot;${openBankName}&quot;,&#xd;
  &quot;bankCountry&quot;: &quot;非中国大陆&quot;,&#xd;
  &quot;bankAcctType&quot;: &quot;${bankAcctType}&quot;,&#xd;
  &quot;province&quot;: &quot;&quot;,&#xd;
  &quot;city&quot;: &quot;&quot;,&#xd;
  &quot;verifyCode&quot;: ${verifyCode},&#xd;
  &quot;branchBankCode&quot;: &quot;&quot;,&#xd;
  &quot;acctName&quot;: &quot;${name_1}&quot;,&#xd;
  &quot;bankCnapsCode&quot;: &quot;&quot;,&#xd;
  &quot;reservedPhone&quot;: &quot;&quot;,&#xd;
  &quot;bankAddress&quot;: &quot;${bankAddress}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/bankcard/addBankCard.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="检查T_LIQUIDATE_INFO是否新增一条数据 根据MEMBER_CODE" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">select * from FE.T_LIQUIDATE_INFO where MEMBER_CODE=&apos;${memberCode_1}&apos; order by CREATE_DATE desc

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">result</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">int result = Integer.valueOf(${result_#}).intValue();
if(result&lt;=0) {
    Failure = true; 
    FailureMessage = &quot;规则解析失败&quot;;
}else{
    FailureMessage = &quot;规则解析成功&quot;;
    }
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="个人用户-个人非中国大陆外币银行卡" enabled="false"/>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="提现" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="swiftCode" elementType="Argument">
                    <stringProp name="Argument.name">swiftCode</stringProp>
                    <stringProp name="Argument.value">AAAAAAA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="currency" elementType="Argument">
                    <stringProp name="Argument.name">currency</stringProp>
                    <stringProp name="Argument.value">GBP</stringProp>
                    <stringProp name="Argument.desc">币种</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bankName" elementType="Argument">
                    <stringProp name="Argument.name">bankName</stringProp>
                    <stringProp name="Argument.value">外币银行</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="openBankName" elementType="Argument">
                    <stringProp name="Argument.name">openBankName</stringProp>
                    <stringProp name="Argument.value">东昌路分行</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <stringProp name="Argument.desc">开户行名称</stringProp>
                  </elementProp>
                  <elementProp name="bankAcctType" elementType="Argument">
                    <stringProp name="Argument.name">bankAcctType</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <stringProp name="Argument.desc">银行账户类型（1个人，2企业）</stringProp>
                  </elementProp>
                  <elementProp name="bankAddress" elementType="Argument">
                    <stringProp name="Argument.name">bankAddress</stringProp>
                    <stringProp name="Argument.value">上海市陆家嘴东昌路12号上海银行</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bankCnapsCode" elementType="Argument">
                    <stringProp name="Argument.name">bankCnapsCode</stringProp>
                    <stringProp name="Argument.value">银联号</stringProp>
                    <stringProp name="Argument.desc">银联号</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;requestObj&quot;: {&#xd;
    &quot;loginName&quot;: &quot;${__P(mes.email_person_yu,)}&quot;,&#xd;
    &quot;password&quot;: &quot;${__P(mes.loginPwd_person_yu,)}&quot;&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/security/login.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    <stringProp name="-2083166786">&quot;responseObj&quot;:{&quot;token&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取token" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = (JSONObject) responseData.get(&quot;responseObj&quot;);
String token = String.valueOf(responseObj.get(&quot;token&quot;));
vars.put(&quot;token&quot;, token);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加个人-非中国大陆提现卡" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="银行卡加密" enabled="true">
                    <stringProp name="BeanShellSampler.query">import com.ipaylinks.test.commons.codec.DESUtil;


String bankAcct = DESUtil.encrypt(&quot;${__P(mes.bankAcct_person_yu,)}&quot;);
log.info(&quot;bankAcct：{}&quot;,bankAcct);
vars.put(&quot;des_bankAcct&quot;,bankAcct)</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询member_code 根据loginname" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Select Statement</stringProp>
                    <stringProp name="query">select member_code from FE.T_MEMBER WHERE login_name=&apos;${__P(mes.email_person_yu,)}&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames">memberCode</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as Object</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                      <stringProp name="cacheKey">false</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询实名认证英文名 通国membercode" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Select Statement</stringProp>
                    <stringProp name="query">select INDIVIDUAL_EN_NAME from FE.T_INDIVIDUAL_INFO where  MEMBER_CODE=&apos;${memberCode_1}&apos;
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames">name</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO 根据银行卡号" enabled="true">
                    <stringProp name="TestPlan.comments">提现账户表</stringProp>
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_LIQUIDATE_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_ACCOUNT_INFO 根据银行卡号" enabled="true">
                    <stringProp name="TestPlan.comments">银行开户表</stringProp>
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_LIQUIDATE_ACCOUNT_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_SIGN_INFO 根据银行卡号" enabled="true">
                    <stringProp name="TestPlan.comments">银行签约表</stringProp>
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_LIQUIDATE_SIGN_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO_HISTORY 根据银行卡号" enabled="true">
                    <stringProp name="TestPlan.comments">提现账户历史记录表</stringProp>
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_LIQUIDATE_INFO_HISTORY where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                      <stringProp name="Header.value">${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加体现卡-发送验证码" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;codeType&quot;: &quot;add_bank_card&quot;,&#xd;
  &quot;mobileNo&quot;: &quot;${__P(mes.phone_person_yu,)}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/common/sendVerifyCode.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-575703187">{&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                      <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                      <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="从redis获取验证码" enabled="true">
                  <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
Jedis jedis = RedisElement.getJedis(redisPoolName);
String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone_person_yu,)}_add_bank_card&quot;;
log.info(&quot;redisKey：{}&quot;,redisKey);
String redisValue = jedis.get(redisKey);
log.info(&quot;redisValue：{}&quot;,redisValue);
vars.put(&quot;verifyCode&quot;, redisValue);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加提现卡" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;bankAcct&quot;: &quot;${__P(mes.bankAcct_person_yu,)}&quot;,&#xd;
  &quot;swiftCode&quot;: &quot;${swiftCode}&quot;,&#xd;
  &quot;currency&quot;: &quot;${currency}&quot;,&#xd;
  &quot;bankName&quot;: &quot;${bankName}&quot;,&#xd;
  &quot;openBankName&quot;: &quot;${openBankName}&quot;,&#xd;
  &quot;bankCountry&quot;: &quot;非中国大陆&quot;,&#xd;
  &quot;bankAcctType&quot;: &quot;${bankAcctType}&quot;,&#xd;
  &quot;province&quot;: &quot;&quot;,&#xd;
  &quot;city&quot;: &quot;&quot;,&#xd;
  &quot;verifyCode&quot;: ${verifyCode},&#xd;
  &quot;branchBankCode&quot;: &quot;&quot;,&#xd;
  &quot;acctName&quot;: &quot;${name_1}&quot;,&#xd;
  &quot;bankCnapsCode&quot;: &quot;&quot;,&#xd;
  &quot;reservedPhone&quot;: &quot;&quot;,&#xd;
  &quot;bankAddress&quot;: &quot;${bankAddress}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/bankcard/addBankCard.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="检查T_LIQUIDATE_INFO是否新增一条数据 根据MEMBER_CODE" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Select Statement</stringProp>
                <stringProp name="query">select * from FE.T_LIQUIDATE_INFO where MEMBER_CODE=&apos;${memberCode_1}&apos; order by CREATE_DATE desc

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">result</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">int result = Integer.valueOf(${result_#}).intValue();
if(result&lt;=0) {
    Failure = true; 
    FailureMessage = &quot;规则解析失败&quot;;
}else{
    FailureMessage = &quot;规则解析成功&quot;;
    }
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="企业用户-个人中国大陆-人民币银行卡" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="提现卡" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="swiftCode" elementType="Argument">
                  <stringProp name="Argument.name">swiftCode</stringProp>
                  <stringProp name="Argument.value">AAAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="currency" elementType="Argument">
                  <stringProp name="Argument.name">currency</stringProp>
                  <stringProp name="Argument.value">CNY</stringProp>
                  <stringProp name="Argument.desc">币种</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankName" elementType="Argument">
                  <stringProp name="Argument.name">bankName</stringProp>
                  <stringProp name="Argument.value">中国</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="openBankName" elementType="Argument">
                  <stringProp name="Argument.name">openBankName</stringProp>
                  <stringProp name="Argument.value">中国银行上海市分行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">开户行名称</stringProp>
                </elementProp>
                <elementProp name="bankAcctType" elementType="Argument">
                  <stringProp name="Argument.name">bankAcctType</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">银行账户类型（1个人，2企业）</stringProp>
                </elementProp>
                <elementProp name="acctName" elementType="Argument">
                  <stringProp name="Argument.name">acctName</stringProp>
                  <stringProp name="Argument.value">余泉</stringProp>
                  <stringProp name="Argument.desc">账户名称</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankAddress" elementType="Argument">
                  <stringProp name="Argument.name">bankAddress</stringProp>
                  <stringProp name="Argument.value">上海市陆家嘴东昌路13号中国银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="province" elementType="Argument">
                  <stringProp name="Argument.name">province</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                </elementProp>
                <elementProp name="city" elementType="Argument">
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankCnapsCode" elementType="Argument">
                  <stringProp name="Argument.name">bankCnapsCode</stringProp>
                  <stringProp name="Argument.value">银联号</stringProp>
                  <stringProp name="Argument.desc">银联号</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="1209543621">企业实名认证</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加企业-个人-中国大陆-人民币提现卡" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="银行卡加密" enabled="true">
                  <stringProp name="BeanShellSampler.query">import com.ipaylinks.test.commons.codec.DESUtil;


String bankAcct = DESUtil.encrypt(&quot;${__P(mes.bankAcct_company_yu,)}&quot;);
log.info(&quot;bankAcct：{}&quot;,bankAcct);
vars.put(&quot;des_bankAcct&quot;,bankAcct)</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_ACCOUNT_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行开户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_ACCOUNT_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_SIGN_INFO  根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行签约表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_SIGN_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO_HISTORY 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户历史记录表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO_HISTORY where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询member_code 根据loginname" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select member_code from FE.T_MEMBER WHERE login_name=&apos;${__P(mes.email,)}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">memberCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as Object</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询实名认证法人姓名 根据membercode" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select LEGAL_NAME from FE.T_ENTERPRISE_BASE where MEMBER_CODE=&apos;${memberCode_1}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">name</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="600886531">注册-登录</stringProp>
                  <stringProp name="964666">登录</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加体现卡-发送验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;codeType&quot;: &quot;add_bank_card&quot;,&#xd;
  &quot;mobileNo&quot;: &quot;${__P(mes.phone,)}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/common/sendVerifyCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-575703187">{&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="从redis获取验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
Jedis jedis = RedisElement.getJedis(redisPoolName);
String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_add_bank_card&quot;;
log.info(&quot;redisKey：{}&quot;,redisKey);
String redisValue = jedis.get(redisKey);
log.info(&quot;redisValue：{}&quot;,redisValue);
vars.put(&quot;verifyCode&quot;, redisValue);
jedis.close();</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis-删除验证码次数记录" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_SEND_TIMES_${__P(mes.phone,)}_add_bank_card&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	jedis.del(redisKey);

	String responseData = &quot;del redisKey：&quot; + redisKey + &quot; success&quot;;
jedis.close();//断开连接
log.info(&quot;退出redis连接！&quot;);
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加企业用户-个人中国大陆-人民币银行卡提现卡" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bankAcct&quot;: &quot;${__P(mes.bankAcct_company_yu,)}&quot;,&#xd;
  &quot;swiftCode&quot;: &quot;&quot;,&#xd;
  &quot;currency&quot;: &quot;CNY&quot;,&#xd;
  &quot;bankName&quot;: &quot;${bankName}&quot;,&#xd;
  &quot;openBankName&quot;: &quot;${openBankName}&quot;,&#xd;
  &quot;bankCountry&quot;: &quot;中国大陆&quot;,&#xd;
  &quot;bankAcctType&quot;: &quot;${bankAcctType}&quot;,&#xd;
  &quot;province&quot;: &quot;${province}&quot;,&#xd;
  &quot;city&quot;: &quot;${city}&quot;,&#xd;
  &quot;verifyCode&quot;: ${verifyCode},&#xd;
  &quot;branchBankCode&quot;: &quot;&quot;,&#xd;
  &quot;acctName&quot;: &quot;${name_1}&quot;,&#xd;
  &quot;bankCnapsCode&quot;: &quot;${bankCnapsCode}&quot;,&#xd;
  &quot;reservedPhone&quot;: &quot;${__P(mes.reservedPhoneNo,)}&quot;,&#xd;
  &quot;bankAddress&quot;: &quot;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/bankcard/addBankCard.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                  <stringProp name="BeanShellAssertion.query"></stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="检查T_LIQUIDATE_INFO是否新增一条数据 根据MEMBER_CODE" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select * from FE.T_LIQUIDATE_INFO where MEMBER_CODE=&apos;${memberCode_1}&apos; order by CREATE_DATE desc

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">result</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">int result = Integer.valueOf(${result_#}).intValue();
if(result&lt;=0) {
    Failure = true; 
    FailureMessage = &quot;规则解析失败&quot;;
}else{
    FailureMessage = &quot;规则解析成功&quot;;
    }
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="企业用户-个人中国大陆-外币银行卡" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="提现卡" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="swiftCode" elementType="Argument">
                  <stringProp name="Argument.name">swiftCode</stringProp>
                  <stringProp name="Argument.value">AAAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="currency" elementType="Argument">
                  <stringProp name="Argument.name">currency</stringProp>
                  <stringProp name="Argument.value">EUR</stringProp>
                  <stringProp name="Argument.desc">币种</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankName" elementType="Argument">
                  <stringProp name="Argument.name">bankName</stringProp>
                  <stringProp name="Argument.value">中国银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="openBankName" elementType="Argument">
                  <stringProp name="Argument.name">openBankName</stringProp>
                  <stringProp name="Argument.value">中国银行上海市分行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">开户行名称</stringProp>
                </elementProp>
                <elementProp name="bankAcctType" elementType="Argument">
                  <stringProp name="Argument.name">bankAcctType</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">银行账户类型（1个人，2企业）</stringProp>
                </elementProp>
                <elementProp name="bankAddress" elementType="Argument">
                  <stringProp name="Argument.name">bankAddress</stringProp>
                  <stringProp name="Argument.value">上海市陆家嘴东昌路13号中国银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="province" elementType="Argument">
                  <stringProp name="Argument.name">province</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                </elementProp>
                <elementProp name="city" elementType="Argument">
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="1209543621">企业实名认证</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加企业用户-个人中国大陆-外币银行卡" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="银行卡加密" enabled="true">
                  <stringProp name="BeanShellSampler.query">import com.ipaylinks.test.commons.codec.DESUtil;


String bankAcct = DESUtil.encrypt(&quot;${__P(mes.bankAcct_company_yu,)}&quot;);
log.info(&quot;bankAcct：{}&quot;,bankAcct);
vars.put(&quot;des_bankAcct&quot;,bankAcct)</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_ACCOUNT_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行开户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_ACCOUNT_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_SIGN_INFO  根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行签约表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_SIGN_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO_HISTORY 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户历史记录表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO_HISTORY where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询member_code 根据loginname" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select member_code from FE.T_MEMBER WHERE login_name=&apos;${__P(mes.email,)}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">memberCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as Object</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询实名认证法人英文名 根据membercode" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select LEGAL_EN_NAME from FE.T_ENTERPRISE_CONTACT where MEMBER_CODE=&apos;${memberCode_1}&apos;



</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">name</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="600886531">注册-登录</stringProp>
                  <stringProp name="964666">登录</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加体现卡-发送验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;codeType&quot;: &quot;add_bank_card&quot;,&#xd;
  &quot;mobileNo&quot;: &quot;${__P(mes.phone_company_yu,)}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/common/sendVerifyCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-575703187">{&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="从redis获取验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
Jedis jedis = RedisElement.getJedis(redisPoolName);
String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_add_bank_card&quot;;
log.info(&quot;redisKey：{}&quot;,redisKey);
String redisValue = jedis.get(redisKey);
log.info(&quot;redisValue：{}&quot;,redisValue);
vars.put(&quot;verifyCode&quot;, redisValue);
jedis.close();
String responseData = &quot;get redisKey：&quot; +redisKey+&quot; success&quot;+&quot; \n redisValue :&quot;+redisValue;
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis-删除验证码次数记录" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_SEND_TIMES_${__P(mes.phone,)}_add_bank_card&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	jedis.del(redisKey);

	String responseData = &quot;del redisKey：&quot; + redisKey + &quot; success&quot;;
jedis.close();//断开连接
log.info(&quot;退出redis连接！&quot;);
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加企业用户-个人中国大陆-外币银行卡提现卡" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bankAcct&quot;: &quot;${__P(mes.bankAcct_company_yu,)}&quot;,&#xd;
  &quot;swiftCode&quot;: &quot;${swiftCode}&quot;,&#xd;
  &quot;currency&quot;: &quot;${currency}&quot;,&#xd;
  &quot;bankName&quot;: &quot;${bankName}&quot;,&#xd;
  &quot;openBankName&quot;: &quot;${openBankName}&quot;,&#xd;
  &quot;bankCountry&quot;: &quot;中国大陆&quot;,&#xd;
  &quot;bankAcctType&quot;: &quot;${bankAcctType}&quot;,&#xd;
  &quot;province&quot;: &quot;&quot;,&#xd;
  &quot;city&quot;: &quot;&quot;,&#xd;
  &quot;verifyCode&quot;: ${verifyCode},&#xd;
  &quot;branchBankCode&quot;: &quot;&quot;,&#xd;
  &quot;acctName&quot;: &quot;${name_1}&quot;,&#xd;
  &quot;bankCnapsCode&quot;: &quot;&quot;,&#xd;
  &quot;reservedPhone&quot;: &quot;&quot;,&#xd;
  &quot;bankAddress&quot;: &quot;${bankAddress}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/bankcard/addBankCard.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                  <stringProp name="BeanShellAssertion.query"></stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="检查T_LIQUIDATE_INFO是否新增一条数据 根据MEMBER_CODE" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">select * from FE.T_LIQUIDATE_INFO where MEMBER_CODE=&apos;${memberCode_1}&apos; order by CREATE_DATE desc

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">result</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">int result = Integer.valueOf(${result_#}).intValue();
if(result&lt;=0) {
    Failure = true; 
    FailureMessage = &quot;规则解析失败&quot;;
}else{
    FailureMessage = &quot;规则解析成功&quot;;
    }
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="企业用户-个人非中国大陆-外币银行卡" enabled="false"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="提现卡" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="swiftCode" elementType="Argument">
                  <stringProp name="Argument.name">swiftCode</stringProp>
                  <stringProp name="Argument.value">AAAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="currency" elementType="Argument">
                  <stringProp name="Argument.name">currency</stringProp>
                  <stringProp name="Argument.value">EUR</stringProp>
                  <stringProp name="Argument.desc">币种</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankName" elementType="Argument">
                  <stringProp name="Argument.name">bankName</stringProp>
                  <stringProp name="Argument.value">中国银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="openBankName" elementType="Argument">
                  <stringProp name="Argument.name">openBankName</stringProp>
                  <stringProp name="Argument.value">中国银行上海市分行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">开户行名称</stringProp>
                </elementProp>
                <elementProp name="bankAcctType" elementType="Argument">
                  <stringProp name="Argument.name">bankAcctType</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">银行账户类型（1个人，2企业）</stringProp>
                </elementProp>
                <elementProp name="bankAddress" elementType="Argument">
                  <stringProp name="Argument.name">bankAddress</stringProp>
                  <stringProp name="Argument.value">上海市陆家嘴东昌路13号中国银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="province" elementType="Argument">
                  <stringProp name="Argument.name">province</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                </elementProp>
                <elementProp name="city" elementType="Argument">
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="1209543621">企业实名认证</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加企业用户-个人非中国大陆-外币提现卡" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="银行卡加密" enabled="true">
                  <stringProp name="BeanShellSampler.query">import com.ipaylinks.test.commons.codec.DESUtil;


String bankAcct = DESUtil.encrypt(&quot;${__P(mes.bankAcct_company_yu,)}&quot;);
log.info(&quot;bankAcct：{}&quot;,bankAcct);
vars.put(&quot;des_bankAcct&quot;,bankAcct)</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_ACCOUNT_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行开户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_ACCOUNT_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_SIGN_INFO  根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行签约表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_SIGN_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO_HISTORY 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户历史记录表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO_HISTORY where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询member_code 根据loginname" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select member_code from FE.T_MEMBER WHERE login_name=&apos;${__P(mes.email,)}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">memberCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as Object</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询实名认证英文名 根据membercode" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select LEGAL_EN_NAME from FE.T_ENTERPRISE_CONTACT where MEMBER_CODE=&apos;${memberCode_1}&apos;


</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">name</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="600886531">注册-登录</stringProp>
                  <stringProp name="964666">登录</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加体现卡-发送验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;codeType&quot;: &quot;add_bank_card&quot;,&#xd;
  &quot;mobileNo&quot;: &quot;${__P(mes.phone,)}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/common/sendVerifyCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-575703187">{&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis-删除验证码次数记录" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_SEND_TIMES_${__P(mes.phone,)}_add_bank_card&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	jedis.del(redisKey);

	String responseData = &quot;del redisKey：&quot; + redisKey + &quot; success&quot;;
jedis.close();
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="从redis获取验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
Jedis jedis = RedisElement.getJedis(redisPoolName);
String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_add_bank_card&quot;;
log.info(&quot;redisKey：{}&quot;,redisKey);
String redisValue = jedis.get(redisKey);
log.info(&quot;redisValue：{}&quot;,redisValue);
vars.put(&quot;verifyCode&quot;, redisValue);
String responseData = &quot;get redisKey：&quot; +redisKey+&quot; success&quot;+&quot; \n redisValue :&quot;+redisValue;
jedis.close();
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加企业用户-个人非中国大陆-外币银行卡提现卡" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bankAcct&quot;: &quot;${__P(mes.bankAcct_company_yu,)}&quot;,&#xd;
  &quot;swiftCode&quot;: &quot;${swiftCode}&quot;,&#xd;
  &quot;currency&quot;: &quot;${currency}&quot;,&#xd;
  &quot;bankName&quot;: &quot;${bankName}&quot;,&#xd;
  &quot;openBankName&quot;: &quot;${openBankName}&quot;,&#xd;
  &quot;bankCountry&quot;: &quot;非中国大陆&quot;,&#xd;
  &quot;bankAcctType&quot;: &quot;${bankAcctType}&quot;,&#xd;
  &quot;province&quot;: &quot;&quot;,&#xd;
  &quot;city&quot;: &quot;&quot;,&#xd;
  &quot;verifyCode&quot;: ${verifyCode},&#xd;
  &quot;branchBankCode&quot;: &quot;&quot;,&#xd;
  &quot;acctName&quot;: &quot;${name_1}&quot;,&#xd;
  &quot;bankCnapsCode&quot;: &quot;&quot;,&#xd;
  &quot;reservedPhone&quot;: &quot;&quot;,&#xd;
  &quot;bankAddress&quot;: &quot;${bankAddress}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/bankcard/addBankCard.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                  <stringProp name="BeanShellAssertion.query"></stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="检查T_LIQUIDATE_INFO是否新增一条数据 根据MEMBER_CODE" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">select * from FE.T_LIQUIDATE_INFO where MEMBER_CODE=&apos;${memberCode_1}&apos; order by CREATE_DATE desc

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">result</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">int result = Integer.valueOf(${result_#}).intValue();
if(result&lt;=0) {
    Failure = true; 
    FailureMessage = &quot;规则解析失败&quot;;
}else{
    FailureMessage = &quot;规则解析成功&quot;;
    }
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="企业用户-企业中国大陆-人民币银行卡" enabled="false"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="提现卡" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="swiftCode" elementType="Argument">
                  <stringProp name="Argument.name">swiftCode</stringProp>
                  <stringProp name="Argument.value">AAAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="currency" elementType="Argument">
                  <stringProp name="Argument.name">currency</stringProp>
                  <stringProp name="Argument.value">CNY</stringProp>
                  <stringProp name="Argument.desc">币种</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankName" elementType="Argument">
                  <stringProp name="Argument.name">bankName</stringProp>
                  <stringProp name="Argument.value">中国</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="openBankName" elementType="Argument">
                  <stringProp name="Argument.name">openBankName</stringProp>
                  <stringProp name="Argument.value">中国银行上海市分行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">开户行名称</stringProp>
                </elementProp>
                <elementProp name="bankAcctType" elementType="Argument">
                  <stringProp name="Argument.name">bankAcctType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">银行账户类型（1个人，2企业）</stringProp>
                </elementProp>
                <elementProp name="acctName" elementType="Argument">
                  <stringProp name="Argument.name">acctName</stringProp>
                  <stringProp name="Argument.value">余泉</stringProp>
                  <stringProp name="Argument.desc">账户名称</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankAddress" elementType="Argument">
                  <stringProp name="Argument.name">bankAddress</stringProp>
                  <stringProp name="Argument.value">上海市陆家嘴东昌路13号中国银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="province" elementType="Argument">
                  <stringProp name="Argument.name">province</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                </elementProp>
                <elementProp name="city" elementType="Argument">
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankCnapsCode" elementType="Argument">
                  <stringProp name="Argument.name">bankCnapsCode</stringProp>
                  <stringProp name="Argument.value">a456445</stringProp>
                  <stringProp name="Argument.desc">银联号</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="1209543621">企业实名认证</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加企业用户-企业中国大陆-人民币银行卡" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="银行卡加密" enabled="true">
                  <stringProp name="BeanShellSampler.query">import com.ipaylinks.test.commons.codec.DESUtil;


String bankAcct = DESUtil.encrypt(&quot;${__P(mes.bankAcct_company_yu,)}&quot;);
log.info(&quot;bankAcct：{}&quot;,bankAcct);
vars.put(&quot;des_bankAcct&quot;,bankAcct)</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_ACCOUNT_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行开户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_ACCOUNT_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_SIGN_INFO  根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行签约表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_SIGN_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO_HISTORY 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户历史记录表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO_HISTORY where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询member_code 根据loginname" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select member_code from FE.T_MEMBER WHERE login_name=&apos;${__P(mes.email,)}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">memberCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as Object</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询实名认证中文姓名 根据membercode" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ZH_NAME from FE.T_ENTERPRISE_BASE where MEMBER_CODE=&apos;${memberCode_1}&apos;

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">name</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="600886531">注册-登录</stringProp>
                  <stringProp name="964666">登录</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加体现卡-发送验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;codeType&quot;: &quot;add_bank_card&quot;,&#xd;
  &quot;mobileNo&quot;: &quot;${__P(mes.phone,)}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/common/sendVerifyCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-575703187">{&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis-删除验证码次数记录" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_SEND_TIMES_${__P(mes.phone,)}_add_bank_card&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	jedis.del(redisKey);

	String responseData = &quot;del redisKey：&quot; + redisKey + &quot; success&quot;;
jedis.close();
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); 
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="从redis获取验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
Jedis jedis = RedisElement.getJedis(redisPoolName);
String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_add_bank_card&quot;;
log.info(&quot;redisKey：{}&quot;,redisKey);
String redisValue = jedis.get(redisKey);
log.info(&quot;redisValue：{}&quot;,redisValue);
vars.put(&quot;verifyCode&quot;, redisValue);
String responseData = &quot;get redisKey：&quot; +redisKey+&quot; success&quot;+&quot; \n redisValue :&quot;+redisValue;
jedis.close();
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加企业用户-企业中国大陆-人民币银行卡提现卡" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bankAcct&quot;: &quot;${__P(mes.bankAcct_company_yu,)}&quot;,&#xd;
  &quot;swiftCode&quot;: &quot;&quot;,&#xd;
  &quot;currency&quot;: &quot;CNY&quot;,&#xd;
  &quot;bankName&quot;: &quot;${bankName}&quot;,&#xd;
  &quot;openBankName&quot;: &quot;${openBankName}&quot;,&#xd;
  &quot;bankCountry&quot;: &quot;中国大陆&quot;,&#xd;
  &quot;bankAcctType&quot;: &quot;${bankAcctType}&quot;,&#xd;
  &quot;province&quot;: &quot;${province}&quot;,&#xd;
  &quot;city&quot;: &quot;${city}&quot;,&#xd;
  &quot;verifyCode&quot;: ${verifyCode},&#xd;
  &quot;branchBankCode&quot;: &quot;&quot;,&#xd;
  &quot;acctName&quot;: &quot;${name_1}&quot;,&#xd;
  &quot;bankCnapsCode&quot;: &quot;${bankCnapsCode}&quot;,&#xd;
  &quot;reservedPhone&quot;: &quot;&quot;,&#xd;
  &quot;bankAddress&quot;: &quot;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/bankcard/addBankCard.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                  <stringProp name="BeanShellAssertion.query"></stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="检查T_LIQUIDATE_INFO是否新增一条数据 根据MEMBER_CODE" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">select * from FE.T_LIQUIDATE_INFO where MEMBER_CODE=&apos;${memberCode_1}&apos; order by CREATE_DATE desc

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">result</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">int result = Integer.valueOf(${result_#}).intValue();
if(result&lt;=0) {
    Failure = true; 
    FailureMessage = &quot;规则解析失败&quot;;
}else{
    FailureMessage = &quot;规则解析成功&quot;;
    }
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="企业用户-企业非中国大陆-外币大陆银行卡" enabled="false"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="提现卡" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="swiftCode" elementType="Argument">
                  <stringProp name="Argument.name">swiftCode</stringProp>
                  <stringProp name="Argument.value">AAAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="currency" elementType="Argument">
                  <stringProp name="Argument.name">currency</stringProp>
                  <stringProp name="Argument.value">USD,JPY</stringProp>
                  <stringProp name="Argument.desc">币种</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankName" elementType="Argument">
                  <stringProp name="Argument.name">bankName</stringProp>
                  <stringProp name="Argument.value">中国</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="openBankName" elementType="Argument">
                  <stringProp name="Argument.name">openBankName</stringProp>
                  <stringProp name="Argument.value">中国银行上海市分行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">开户行名称</stringProp>
                </elementProp>
                <elementProp name="bankAcctType" elementType="Argument">
                  <stringProp name="Argument.name">bankAcctType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">银行账户类型（1个人，2企业）</stringProp>
                </elementProp>
                <elementProp name="acctName" elementType="Argument">
                  <stringProp name="Argument.name">acctName</stringProp>
                  <stringProp name="Argument.value">余泉</stringProp>
                  <stringProp name="Argument.desc">账户名称</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankAddress" elementType="Argument">
                  <stringProp name="Argument.name">bankAddress</stringProp>
                  <stringProp name="Argument.value">上海市陆家嘴东昌路13号中国银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="province" elementType="Argument">
                  <stringProp name="Argument.name">province</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                </elementProp>
                <elementProp name="city" elementType="Argument">
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankCnapsCode" elementType="Argument">
                  <stringProp name="Argument.name">bankCnapsCode</stringProp>
                  <stringProp name="Argument.value">4564645</stringProp>
                  <stringProp name="Argument.desc">银联号</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="1209543621">企业实名认证</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加企业-非中国大陆-外币提现卡" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="银行卡加密" enabled="true">
                  <stringProp name="BeanShellSampler.query">import com.ipaylinks.test.commons.codec.DESUtil;


String bankAcct = DESUtil.encrypt(&quot;${__P(mes.bankAcct_company_yu,)}&quot;);
log.info(&quot;bankAcct：{}&quot;,bankAcct);
vars.put(&quot;des_bankAcct&quot;,bankAcct)</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_ACCOUNT_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行开户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_ACCOUNT_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_SIGN_INFO  根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行签约表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_SIGN_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO_HISTORY 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户历史记录表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO_HISTORY where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询member_code 根据loginname" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select member_code from FE.T_MEMBER WHERE login_name=&apos;${__P(mes.email,)}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">memberCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as Object</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询实名认证英文姓名 根据membercode" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select EN_NAME from FE.T_ENTERPRISE_BASE where MEMBER_CODE=&apos;${memberCode_1}&apos;

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">name</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="600886531">注册-登录</stringProp>
                  <stringProp name="964666">登录</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加体现卡-发送验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;codeType&quot;: &quot;add_bank_card&quot;,&#xd;
  &quot;mobileNo&quot;: &quot;${__P(mes.phone,)}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/common/sendVerifyCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-575703187">{&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis-删除验证码次数记录" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_SEND_TIMES_${__P(mes.phone,)}_add_bank_card&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	jedis.del(redisKey);

	String responseData = &quot;del redisKey：&quot; + redisKey + &quot; success&quot;;
jedis.close();
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); 
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="从redis获取验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
Jedis jedis = RedisElement.getJedis(redisPoolName);
String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_add_bank_card&quot;;
log.info(&quot;redisKey：{}&quot;,redisKey);
String redisValue = jedis.get(redisKey);
log.info(&quot;redisValue：{}&quot;,redisValue);
vars.put(&quot;verifyCode&quot;, redisValue);
String responseData = &quot;get redisKey：&quot; +redisKey+&quot; success&quot;+&quot; \n redisValue :&quot;+redisValue;
jedis.close();
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加企业用户-企业非中国大陆-外币大陆银行卡提现卡" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bankAcct&quot;: &quot;${__P(mes.bankAcct_company_yu,)}&quot;,&#xd;
  &quot;swiftCode&quot;: &quot;${swiftCode}&quot;,&#xd;
  &quot;currency&quot;: &quot;${currency}&quot;,&#xd;
  &quot;bankName&quot;: &quot;${bankName}&quot;,&#xd;
  &quot;openBankName&quot;: &quot;${openBankName}&quot;,&#xd;
  &quot;bankCountry&quot;: &quot;非中国大陆&quot;,&#xd;
  &quot;bankAcctType&quot;: &quot;${bankAcctType}&quot;,&#xd;
  &quot;province&quot;: &quot;${province}&quot;,&#xd;
  &quot;city&quot;: &quot;${city}&quot;,&#xd;
  &quot;verifyCode&quot;: ${verifyCode},&#xd;
  &quot;branchBankCode&quot;: &quot;&quot;,&#xd;
  &quot;acctName&quot;: &quot;${name_1}&quot;,&#xd;
  &quot;bankCnapsCode&quot;: &quot;${bankCnapsCode}&quot;,&#xd;
  &quot;reservedPhone&quot;: &quot;&quot;,&#xd;
  &quot;bankAddress&quot;: &quot;${bankAddress}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/bankcard/addBankCard.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                  <stringProp name="BeanShellAssertion.query"></stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="检查T_LIQUIDATE_INFO是否新增一条数据 根据MEMBER_CODE" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">select * from FE.T_LIQUIDATE_INFO where MEMBER_CODE=&apos;${memberCode_1}&apos; order by CREATE_DATE desc

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">result</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">int result = Integer.valueOf(${result_#}).intValue();
if(result&lt;=0) {
    Failure = true; 
    FailureMessage = &quot;规则解析失败&quot;;
}else{
    FailureMessage = &quot;规则解析成功&quot;;
    }
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="企业用户-企业中国大陆-外币大陆银行卡" enabled="false"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="提现卡" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="swiftCode" elementType="Argument">
                  <stringProp name="Argument.name">swiftCode</stringProp>
                  <stringProp name="Argument.value">AAAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="currency" elementType="Argument">
                  <stringProp name="Argument.name">currency</stringProp>
                  <stringProp name="Argument.value">JPY</stringProp>
                  <stringProp name="Argument.desc">币种</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankName" elementType="Argument">
                  <stringProp name="Argument.name">bankName</stringProp>
                  <stringProp name="Argument.value">中国银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="openBankName" elementType="Argument">
                  <stringProp name="Argument.name">openBankName</stringProp>
                  <stringProp name="Argument.value">中国银行上海市分行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">开户行名称</stringProp>
                </elementProp>
                <elementProp name="bankAcctType" elementType="Argument">
                  <stringProp name="Argument.name">bankAcctType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">银行账户类型（1个人，2企业）</stringProp>
                </elementProp>
                <elementProp name="bankAddress" elementType="Argument">
                  <stringProp name="Argument.name">bankAddress</stringProp>
                  <stringProp name="Argument.value">上海市陆家嘴东昌路13号中国银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="province" elementType="Argument">
                  <stringProp name="Argument.name">province</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                </elementProp>
                <elementProp name="city" elementType="Argument">
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">2900</stringProp>
                  <stringProp name="Argument.desc">上海市 </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankCnapsCode" elementType="Argument">
                  <stringProp name="Argument.name">bankCnapsCode</stringProp>
                  <stringProp name="Argument.value">a4546878</stringProp>
                  <stringProp name="Argument.desc">银联号</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="1209543621">企业实名认证</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加企业用户-企业中国大陆-外币大陆银行卡" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="银行卡加密" enabled="true">
                  <stringProp name="BeanShellSampler.query">import com.ipaylinks.test.commons.codec.DESUtil;


String bankAcct = DESUtil.encrypt(&quot;${__P(mes.bankAcct_company_yu,)}&quot;);
log.info(&quot;bankAcct：{}&quot;,bankAcct);
vars.put(&quot;des_bankAcct&quot;,bankAcct)</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_ACCOUNT_INFO 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行开户表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_ACCOUNT_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_SIGN_INFO  根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">银行签约表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_SIGN_INFO where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 T_LIQUIDATE_INFO_HISTORY 根据银行卡号" enabled="true">
                  <stringProp name="TestPlan.comments">提现账户历史记录表</stringProp>
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Update Statement</stringProp>
                  <stringProp name="query">delete from FE.T_LIQUIDATE_INFO_HISTORY where BANK_ACCT=&apos;${des_bankAcct}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询member_code 根据loginname" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select member_code from FE.T_MEMBER WHERE login_name=&apos;${__P(mes.email,)}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">memberCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as Object</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询实名认证英文名姓名 根据membercode" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select EN_NAME from FE.T_ENTERPRISE_BASE where MEMBER_CODE=&apos;${memberCode_1}&apos;

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">name</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="600886531">注册-登录</stringProp>
                  <stringProp name="964666">登录</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加体现卡-发送验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;codeType&quot;: &quot;add_bank_card&quot;,&#xd;
  &quot;mobileNo&quot;: &quot;${__P(mes.phone,)}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/common/sendVerifyCode.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-575703187">{&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis-删除验证码次数记录" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_SEND_TIMES_${__P(mes.phone,)}_add_bank_card&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	jedis.del(redisKey);

	String responseData = &quot;del redisKey：&quot; + redisKey + &quot; success&quot;;
jedis.close();
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); 
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="从redis获取验证码" enabled="true">
                <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
Jedis jedis = RedisElement.getJedis(redisPoolName);
String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_add_bank_card&quot;;
log.info(&quot;redisKey：{}&quot;,redisKey);
String redisValue = jedis.get(redisKey);
log.info(&quot;redisValue：{}&quot;,redisValue);
vars.put(&quot;verifyCode&quot;, redisValue);
String responseData = &quot;get redisKey：&quot; +redisKey+&quot; success&quot;+&quot; \n redisValue :&quot;+redisValue;
jedis.close();
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加企业用户-企业中国大陆-外币大陆银行卡提现卡" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;bankAcct&quot;: &quot;${__P(mes.bankAcct_company_yu,)}&quot;,&#xd;
  &quot;swiftCode&quot;: &quot;${swiftCode}&quot;,&#xd;
  &quot;currency&quot;: &quot;${currency}&quot;,&#xd;
  &quot;bankName&quot;: &quot;${bankName}&quot;,&#xd;
  &quot;openBankName&quot;: &quot;${openBankName}&quot;,&#xd;
  &quot;bankCountry&quot;: &quot;中国大陆&quot;,&#xd;
  &quot;bankAcctType&quot;: &quot;${bankAcctType}&quot;,&#xd;
  &quot;province&quot;: &quot;${province}&quot;,&#xd;
  &quot;city&quot;: &quot;${city}&quot;,&#xd;
  &quot;verifyCode&quot;: ${verifyCode},&#xd;
  &quot;branchBankCode&quot;: &quot;&quot;,&#xd;
  &quot;acctName&quot;: &quot;${name_1}&quot;,&#xd;
  &quot;bankCnapsCode&quot;: &quot;${bankCnapsCode}&quot;,&#xd;
  &quot;reservedPhone&quot;: &quot;&quot;,&#xd;
  &quot;bankAddress&quot;: &quot;${bankAddress}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/bankcard/addBankCard.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                  <stringProp name="BeanShellAssertion.query"></stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="检查T_LIQUIDATE_INFO是否新增一条数据 根据MEMBER_CODE" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">select * from FE.T_LIQUIDATE_INFO where MEMBER_CODE=&apos;${memberCode_1}&apos; order by CREATE_DATE desc

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">result</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">int result = Integer.valueOf(${result_#}).intValue();
if(result&lt;=0) {
    Failure = true; 
    FailureMessage = &quot;规则解析失败&quot;;
}else{
    FailureMessage = &quot;规则解析成功&quot;;
    }
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加店铺" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加店铺-亚马逊免授权" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加-亚马逊北美站店铺-免授权" enabled="false">
              <stringProp name="TestPlan.comments">芝加哥渠道</stringProp>
            </GenericController>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="添加店铺" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="name" elementType="Argument">
                    <stringProp name="Argument.name">name</stringProp>
                    <stringProp name="Argument.value">shop_name</stringProp>
                    <stringProp name="Argument.desc">店铺名称</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="platId" elementType="Argument">
                    <stringProp name="Argument.name">platId</stringProp>
                    <stringProp name="Argument.value">101</stringProp>
                    <stringProp name="Argument.desc">平台站点（101 Amazon美国站 102 ebay美国站等等）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="unShopFlag" elementType="Argument">
                    <stringProp name="Argument.name">unShopFlag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.desc">是否需要授权（ 1预开店铺）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="salesCategory" elementType="Argument">
                    <stringProp name="Argument.name">salesCategory</stringProp>
                    <stringProp name="Argument.value">08</stringProp>
                    <stringProp name="Argument.desc">销售类目（01-10）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bankAccountName" elementType="Argument">
                    <stringProp name="Argument.name">bankAccountName</stringProp>
                    <stringProp name="Argument.value">hold_name</stringProp>
                    <stringProp name="Argument.desc">账户持有人名称</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="address" elementType="Argument">
                    <stringProp name="Argument.name">address</stringProp>
                    <stringProp name="Argument.value">http://mesnew2.innertest.ipaylinks.com/#/home/storeManagement/addStore</stringProp>
                    <stringProp name="Argument.desc">地址</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sellerId" elementType="Argument">
                    <stringProp name="Argument.name">sellerId</stringProp>
                    <stringProp name="Argument.value">1231121</stringProp>
                    <stringProp name="Argument.desc">卖家编号</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mwsAuthToken" elementType="Argument">
                    <stringProp name="Argument.name">mwsAuthToken</stringProp>
                    <stringProp name="Argument.value">111001221</stringProp>
                    <stringProp name="Argument.desc">MWS授权令牌</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="1536726427">大陆个人实名认证</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加店铺" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="设置会员不需要亚马逊授权" enabled="true"/>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="设置会员不需要亚马逊授权" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">update FE.T_MEMBER SET SHOP_AUTH=&apos;0&apos; WHERE LOGIN_NAME=&apos;${__P(mes.email,)}&apos;</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="芝加哥渠道" enabled="true"/>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="启用芝加哥渠道" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">update FE.T_FUND_IN_CHANNEL set PLAT=&apos;101,102&apos;,CHANNEL_TYPE=&apos;1&apos;,REGION=&apos;US&apos;,CURRENCY=&apos;USD&apos;,ACCOUNT_OPEN_TYPE=&apos;1&apos;,ACCOUNT_LIVE_TYPE=&apos;1&apos;,FUND_IN_TYPE=&apos;1&apos;,PRIORITY=&apos;1&apos;,STATUS=&apos;1&apos;
where CHANNEL_CODE=&apos;INBK&apos;</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="禁用非芝加哥渠道" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">update FE.T_FUND_IN_CHANNEL set STATUS=&apos;0&apos;,UPDATE_DATE = sysdate
where CHANNEL_CODE!=&apos;INBK&apos;</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                  </hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询卖家编号被占用的店铺id 根据卖家编号" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Select Statement</stringProp>
                    <stringProp name="query">select ID from FE.T_SHOP where name=&apos;${name}&apos;
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames">shopId</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果店铺数存在就修改该店铺的授权信息" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(${shopId_#}&gt;0,)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除收款账户信息表数据 根据店铺ID" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">delete from FE.T_FUND_IN_ACCOUNT where SHOP_ID=${shopId_1}</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除账户信息表数据 根据店铺ID" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">delete from FE.T_ACCOUNT_INFO where SHOP_ID=${shopId_1}</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="更新卖家编号 根据店铺id" enabled="false">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">UPDATE FE.T_SHOP set AUTH_DATA=&apos;{&quot;mwsAuthToken&quot;:&quot;amzn.mws.e2b33378-3130-980c-f29f-2af378e6776e&quot;,&quot;sellerId&quot;:&quot;0000&quot;,&quot;accessKey&quot;:&quot;AKIAIY3ITZLROHJ3X2CA&quot;,&quot;sellerKey&quot;:&quot;TrXcnFVwhFK0I+qyWJNo1slxSgZPF+NtjKRqqfgO&quot;}&apos;
WHERE id =${shopId_1}</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除店铺表数据 根据授权信息" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">delete from FE.T_SHOP WHERE id=${shopId_1}
</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除账户余额表数据 根据店铺ID" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">delete from FE.T_ACCOUNT_BALANCE where SHOP_ID=${shopId_1}</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                  </hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询是否还有芝加哥收款账户 " enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Select Statement</stringProp>
                    <stringProp name="query">select ID from FE.T_FUND_IN_ACCOUNT where STATUS=0 and channel_code=&apos;INBK&apos; AND CURRENCY=&apos;USD&apos;
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames">counts</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果芝加哥收款账户不存在就插入一条" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(${counts_#}==0,)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="插入一条芝加哥收款账号" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Update Statement</stringProp>
                      <stringProp name="query">insert into fe.T_FUND_IN_ACCOUNT(id,bank_account_no,bank_account_name,bank_address,bank_router_no,status,create_time,create_user,update_time,update_user,channel_code,Currency) values(fe.seq_fund_in_account.nextval,&apos;${__time(,)}&apos;,&apos;test&apos;,&apos;USA&apos;,&apos;SWIFTCODE&apos;,0,sysdate,&apos;SYS&apos;,sysdate,&apos;SYS&apos;,&apos;INBK&apos;,&apos;USD&apos;)</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                      <stringProp name="Header.value">${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加亚马逊北美洲店铺" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;${name}&quot;,&#xd;
  &quot;platId&quot;: ${platId},&#xd;
  &quot;unShopFlag&quot;: ${unShopFlag},&#xd;
  &quot;salesCategory&quot;: &quot;${salesCategory}&quot;,&#xd;
  &quot;bankAccountName&quot;: &quot;${bankAccountName}&quot;,&#xd;
  &quot;address&quot;: &quot;${address}&quot;,&#xd;
  &quot;sellerId&quot;: &quot;${sellerId}&quot;,&#xd;
  &quot;mwsAuthToken&quot;: &quot;${mwsAuthToken}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/shop/manager/addShop.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="poss 激活收款账户" enabled="false"/>
                <hashTree>
                  <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                    <collectionProp name="CookieManager.cookies"/>
                    <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                  </CookieManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取验证码" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                    <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                    <stringProp name="HTTPSampler.path">/cfp-poss/validatecode/validatecode.htm?d=${__UUID}</stringProp>
                    <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录poss" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="j_username" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${__P(poss.username,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">j_username</stringProp>
                        </elementProp>
                        <elementProp name="j_password" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${__P(poss.loginPwd,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">j_password</stringProp>
                        </elementProp>
                        <elementProp name="rand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${__P(poss.verifyCode,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">rand</stringProp>
                        </elementProp>
                        <elementProp name="uuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${__UUID}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uuid</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                    <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                    <stringProp name="HTTPSampler.path">/cfp-poss/j_spring_security_check</stringProp>
                    <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="poss 生成开户批次" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="channelCode" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">INBK</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">channelCode</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                    <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                    <stringProp name="HTTPSampler.path">/cfp-poss/accountActivateBatch.do?method=createBatchFile</stringProp>
                    <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器-path" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">path</stringProp>
                      <stringProp name="RegexExtractor.regex">com(.+?)\|null</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">path</stringProp>
                      <stringProp name="RegexExtractor.match_number">0</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器-host" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">host</stringProp>
                      <stringProp name="RegexExtractor.regex">//(.+?)/</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">host</stringProp>
                      <stringProp name="RegexExtractor.match_number">0</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/html;charset=UTF-8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="下载批次文件" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${host}</stringProp>
                    <stringProp name="HTTPSampler.port">80</stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${path}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.io.*;

byte[] result = prev.getResponseData(); // 获取接口返回数据
vars.put(&quot;AutoTestPath&quot;,System.getProperty(&quot;user.dir&quot;)+&quot;\\AutoTest\\CIMAutoTest&quot;);

log.info(&quot;AutoTestPath：{}&quot;,System.getProperty(&quot;user.dir&quot;)+&quot;\\AutoTest\\CIMAutoTest&quot;)</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加-亚马逊日本站店铺-免授权" enabled="false">
              <stringProp name="TestPlan.comments">QBC渠道
</stringProp>
            </GenericController>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="添加店铺" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="name" elementType="Argument">
                    <stringProp name="Argument.name">name</stringProp>
                    <stringProp name="Argument.value">shop_name</stringProp>
                    <stringProp name="Argument.desc">店铺名称</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="platId" elementType="Argument">
                    <stringProp name="Argument.name">platId</stringProp>
                    <stringProp name="Argument.value">105</stringProp>
                    <stringProp name="Argument.desc">平台站点（101 Amazon美国站 102 ebay美国站等等）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="unShopFlag" elementType="Argument">
                    <stringProp name="Argument.name">unShopFlag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.desc">是否需要授权（0是需要亚马逊授权校验 1是不需要）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="salesCategory" elementType="Argument">
                    <stringProp name="Argument.name">salesCategory</stringProp>
                    <stringProp name="Argument.value">02</stringProp>
                    <stringProp name="Argument.desc">销售类目（01-10）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bankAccountName" elementType="Argument">
                    <stringProp name="Argument.name">bankAccountName</stringProp>
                    <stringProp name="Argument.value">hold_name</stringProp>
                    <stringProp name="Argument.desc">账户持有人名称</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="address" elementType="Argument">
                    <stringProp name="Argument.name">address</stringProp>
                    <stringProp name="Argument.value">http://mesnew2.innertest.ipaylinks.com/#/home/storeManagement/addStore</stringProp>
                    <stringProp name="Argument.desc">地址</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sellerId" elementType="Argument">
                    <stringProp name="Argument.name">sellerId</stringProp>
                    <stringProp name="Argument.value">${__time(,)}</stringProp>
                    <stringProp name="Argument.desc">卖家编号</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mwsAuthToken" elementType="Argument">
                    <stringProp name="Argument.name">mwsAuthToken</stringProp>
                    <stringProp name="Argument.value">${__time(,)}${__Random(1,10,)}</stringProp>
                    <stringProp name="Argument.desc">MWS授权令牌</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="1536726427">大陆个人实名认证</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="设置会员不需要亚马逊授权" enabled="true"/>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="设置会员不需要亚马逊授权" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">update FE.T_MEMBER SET SHOP_AUTH=&apos;0&apos; WHERE LOGIN_NAME=&apos;${__P(mes.email,)}&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="QBC渠道" enabled="true"/>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="启用QBC渠道" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">update FE.T_FUND_IN_CHANNEL set PLAT=&apos;105&apos;,CHANNEL_TYPE=&apos;1&apos;,CURRENCY=&apos;JPY&apos;,ACCOUNT_OPEN_TYPE=&apos;1&apos;,ACCOUNT_LIVE_TYPE=&apos;1&apos;,FUND_IN_TYPE=&apos;2&apos;,PRIORITY=&apos;1&apos;,STATUS=&apos;1&apos;,UPDATE_DATE=SYSDATE
where CHANNEL_CODE=&apos;QBC&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="禁用非QBC渠道" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">update FE.T_FUND_IN_CHANNEL set STATUS=&apos;0&apos;,UPDATE_DATE = sysdate
where CHANNEL_CODE!=&apos;QBC&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询卖家编号被占用的店铺id 根据卖家编号" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_SHOP where name=&apos;${name}&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">shopId</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果店铺数存在就修改该店铺的授权信息" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(${shopId_#}&gt;0,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除收款账户信息表数据 根据店铺ID" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_FUND_IN_ACCOUNT where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除账户信息表数据 根据店铺ID" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_ACCOUNT_INFO where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="更新卖家编号 根据店铺id" enabled="false">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">UPDATE FE.T_SHOP set AUTH_DATA=&apos;{&quot;mwsAuthToken&quot;:&quot;amzn.mws.e2b33378-3130-980c-f29f-2af378e6776e&quot;,&quot;sellerId&quot;:&quot;0000&quot;,&quot;accessKey&quot;:&quot;AKIAIY3ITZLROHJ3X2CA&quot;,&quot;sellerKey&quot;:&quot;TrXcnFVwhFK0I+qyWJNo1slxSgZPF+NtjKRqqfgO&quot;}&apos;
WHERE id =${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除店铺表数据 根据授权信息" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_SHOP WHERE id=${shopId_1}
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除账户余额表数据 根据店铺ID" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_ACCOUNT_BALANCE where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询是否还有QBC收款账户 " enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_FUND_IN_ACCOUNT where STATUS=0 and channel_code=&apos;QBC&apos; AND CURRENCY=&apos;JPY&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">counts</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果QBC收款账户不存在就插入一条" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(${counts_#}==0,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="插入一条QBC收款账号" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="query">insert into fe.T_FUND_IN_ACCOUNT(id,bank_account_no,bank_account_name,bank_address,bank_router_no,status,create_time,create_user,update_time,update_user,channel_code,Currency) values(fe.seq_fund_in_account.nextval,&apos;${__time(,)}&apos;,&apos;test&apos;,&apos;Japan&apos;,&apos;071006651&apos;,0,sysdate,&apos;SYS&apos;,sysdate,&apos;SYS&apos;,&apos;QBC&apos;,&apos;JPY&apos;)
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加店铺" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;${name}&quot;,&#xd;
  &quot;platId&quot;: ${platId},&#xd;
  &quot;unShopFlag&quot;: ${unShopFlag},&#xd;
  &quot;salesCategory&quot;: &quot;${salesCategory}&quot;,&#xd;
  &quot;bankAccountName&quot;: &quot;${bankAccountName}&quot;,&#xd;
  &quot;address&quot;: &quot;${address}&quot;,&#xd;
  &quot;sellerId&quot;: &quot;${sellerId}&quot;,&#xd;
  &quot;mwsAuthToken&quot;: &quot;${mwsAuthToken}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/shop/manager/addShop.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="poss 激活收款账户" enabled="true"/>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                </CookieManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取验证码" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/cfp-poss/validatecode/validatecode.htm?d=${__UUID}</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录poss" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="j_username" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__P(poss.username,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">j_username</stringProp>
                      </elementProp>
                      <elementProp name="j_password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__P(poss.loginPwd,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">j_password</stringProp>
                      </elementProp>
                      <elementProp name="rand" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__P(poss.verifyCode,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">rand</stringProp>
                      </elementProp>
                      <elementProp name="uuid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__UUID}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">uuid</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/cfp-poss/j_spring_security_check</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询店铺id" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_SHOP where NAME=&apos;${name}&apos; and plat_id=&apos;${platId}&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">new_shopId</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="poss 店铺审核" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="choose" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${new_shopId_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">choose</stringProp>
                      </elementProp>
                      <elementProp name="setPageSize13" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">20</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">setPageSize13</stringProp>
                      </elementProp>
                      <elementProp name="auditDesc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">店铺审核备注</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">auditDesc</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/cfp-poss/shop.do?method=batchAuditNew&amp;auditType=2</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1867169789">success</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加-亚马逊澳洲站店铺-免授权" enabled="false">
              <stringProp name="TestPlan.comments">PAYzero渠道
</stringProp>
            </GenericController>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="添加店铺" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="name" elementType="Argument">
                    <stringProp name="Argument.name">name</stringProp>
                    <stringProp name="Argument.value">shop_name</stringProp>
                    <stringProp name="Argument.desc">店铺名称</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="platId" elementType="Argument">
                    <stringProp name="Argument.name">platId</stringProp>
                    <stringProp name="Argument.value">107</stringProp>
                    <stringProp name="Argument.desc">平台站点（103 Amazo欧洲站 ,104 亚马逊英国站）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="unShopFlag" elementType="Argument">
                    <stringProp name="Argument.name">unShopFlag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.desc">是否需要授权（0是需要亚马逊授权校验 1是不需要）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="salesCategory" elementType="Argument">
                    <stringProp name="Argument.name">salesCategory</stringProp>
                    <stringProp name="Argument.value">03</stringProp>
                    <stringProp name="Argument.desc">销售类目（01-10）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bankAccountName" elementType="Argument">
                    <stringProp name="Argument.name">bankAccountName</stringProp>
                    <stringProp name="Argument.value">hold_name</stringProp>
                    <stringProp name="Argument.desc">账户持有人名称</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="address" elementType="Argument">
                    <stringProp name="Argument.name">address</stringProp>
                    <stringProp name="Argument.value">http://mesnew2.innertest.ipaylinks.com/#/home/storeManagement/addStore</stringProp>
                    <stringProp name="Argument.desc">地址</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sellerId" elementType="Argument">
                    <stringProp name="Argument.name">sellerId</stringProp>
                    <stringProp name="Argument.value">${__time(,)}</stringProp>
                    <stringProp name="Argument.desc">卖家编号</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mwsAuthToken" elementType="Argument">
                    <stringProp name="Argument.name">mwsAuthToken</stringProp>
                    <stringProp name="Argument.value">${__time(,)}${__Random(1,10,)}</stringProp>
                    <stringProp name="Argument.desc">MWS授权令牌</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="600886531">注册-登录</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="设置会员不需要亚马逊授权" enabled="true"/>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="设置会员不需要亚马逊授权" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">update FE.T_MEMBER SET SHOP_AUTH=&apos;0&apos; WHERE LOGIN_NAME=&apos;${__P(mes.email_person_yu,)}&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="payzero渠道" enabled="true"/>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="启用payzero渠道" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="query">update FE.T_FUND_IN_CHANNEL set PLAT=&apos;107&apos;,CHANNEL_TYPE=&apos;1&apos;,CURRENCY=&apos;AUD&apos;,ACCOUNT_OPEN_TYPE=&apos;2&apos;,ACCOUNT_LIVE_TYPE=&apos;2&apos;,FUND_IN_TYPE=&apos;2&apos;,PRIORITY=&apos;1&apos;,STATUS=&apos;1&apos;,UPDATE_DATE=SYSDATE
where CHANNEL_CODE=&apos;PAYZERO&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="禁用非payzero渠道" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="query">update FE.T_FUND_IN_CHANNEL set STATUS=&apos;0&apos;,UPDATE_DATE = sysdate
where CHANNEL_CODE!=&apos;PAYZERO&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询卖家编号被占用的店铺id 根据卖家编号" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_SHOP where name=&apos;${name}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">shopId</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果店铺数存在就修改该店铺的授权信息" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(${shopId_#}&gt;0,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除收款账户信息表数据 根据店铺ID" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_FUND_IN_ACCOUNT where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除账户信息表数据 根据店铺ID" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_ACCOUNT_INFO where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="更新卖家编号 根据店铺id" enabled="false">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">UPDATE FE.T_SHOP set AUTH_DATA=&apos;{&quot;mwsAuthToken&quot;:&quot;amzn.mws.e2b33378-3130-980c-f29f-2af378e6776e&quot;,&quot;sellerId&quot;:&quot;0000&quot;,&quot;accessKey&quot;:&quot;AKIAIY3ITZLROHJ3X2CA&quot;,&quot;sellerKey&quot;:&quot;TrXcnFVwhFK0I+qyWJNo1slxSgZPF+NtjKRqqfgO&quot;}&apos;
WHERE id =${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除店铺表数据 根据授权信息" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_SHOP WHERE id=${shopId_1}
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除账户余额表数据 根据店铺ID" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_ACCOUNT_BALANCE where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除payzero对应收款账号表=表数据 根据店铺id" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_IN_CHANNEL_FUND_ACCOUNT WHERE shop_id=${shopId_1}
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除payzero对应店铺信息表=表数据 根据店铺id" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_IN_CHANNEL_SHOP WHERE id=${shopId_1}
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询在payzero 商户id 根据店铺id" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Select Statement</stringProp>
                    <stringProp name="query">select MERCHANT_ID from fe.T_IN_CHANNEL_SHOP where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames">merchant_id</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除收款渠道跟IPL会员对应商户表=表数据 根据店铺id" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_IN_CHANNEL_MERCHANT where MERCHANT_ID=&apos;${merchant_id_1}&apos;
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询是否还有SAXO欧元收款账户 " enabled="false">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_FUND_IN_ACCOUNT where STATUS=0 and channel_code=&apos;SAXO&apos; AND CURRENCY=&apos;EUR&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">counts_Eur</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询是否还有SAXO英镑收款账户 " enabled="false">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_FUND_IN_ACCOUNT where STATUS=0 and channel_code=&apos;SAXO&apos; AND CURRENCY=&apos;GBP&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">counts_Gbp</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果SAXO欧元收款账户不存在就插入一条" enabled="false">
                  <stringProp name="IfController.condition">${__jexl3(${counts_Eur_#}==0,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="插入一条SAXO欧元收款账户" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="query">insert into fe.T_FUND_IN_ACCOUNT(id, bank_account_no, bank_account_name, bank_address, bank_router_no, status,
                                 create_time, create_user, update_time, update_user, channel_code, BANK_NAME, Currency,
                                 ACCOUNT_ID,LINK_ACCOUNT_NO)
values (fe.seq_fund_in_account.nextval, &apos;${bank_account_no_eur}&apos;, &apos;test&apos;, &apos;Germany&apos;, &apos;SXPYDEHH&apos;, 0, sysdate, &apos;adminA&apos;,
        sysdate, &apos;SYS&apos;, &apos;SAXO&apos;, &apos;SAXO PAYMENTS&apos;, &apos;EUR&apos;,&apos;${bank_account_no_eur}&apos;,&apos;DK${__time(,)}&apos;)</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果SAXO英镑收款账户不存在就插入一条" enabled="false">
                  <stringProp name="IfController.condition">${__jexl3(${counts_Gbp_#}==0,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="插入一条SAXO英镑收款账户" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="query">insert into fe.T_FUND_IN_ACCOUNT(id, bank_account_no, bank_account_name, bank_address, bank_router_no, status,
                                 create_time, create_user, update_time, update_user, channel_code, BANK_NAME, Currency,
                                 ACCOUNT_ID,LINK_ACCOUNT_NO)
values (fe.seq_fund_in_account.nextval, &apos;${bank_account_no_gbp}&apos;, &apos;test&apos;, &apos;United Kingdom&apos;, &apos;SAPYGB2L&apos;, 0, sysdate, &apos;adminA&apos;,
        sysdate, &apos;SYS&apos;, &apos;SAXO&apos;, &apos;SAXO PAYMENTS A/S&apos;, &apos;GBP&apos;,&apos;${bank_account_no_gbp}&apos;,&apos;DK${__time(,)}&apos;)</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加店铺" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;${name}&quot;,&#xd;
  &quot;platId&quot;: ${platId},&#xd;
  &quot;unShopFlag&quot;: ${unShopFlag},&#xd;
  &quot;salesCategory&quot;: &quot;${salesCategory}&quot;,&#xd;
  &quot;bankAccountName&quot;: &quot;${bankAccountName}&quot;,&#xd;
  &quot;address&quot;: &quot;${address}&quot;,&#xd;
  &quot;sellerId&quot;: &quot;${sellerId}&quot;,&#xd;
  &quot;mwsAuthToken&quot;: &quot;${mwsAuthToken}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/shop/manager/addShop.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="xxjob执行补充收款账号" enabled="false"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                </CookieManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录xxjob" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="userName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">admin</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">userName</stringProp>
                      </elementProp>
                      <elementProp name="password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">escISX4C66PI</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">password</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(xxjob.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/xxl-job-admin/login</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-956033633">{&quot;code&quot;:200,&quot;msg&quot;:null,&quot;content&quot;:null}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="执行payzero接受收款账号补充执行器任务" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">326</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">id</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(xxjob.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/xxl-job-admin/jobinfo/trigger</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-956033633">{&quot;code&quot;:200,&quot;msg&quot;:null,&quot;content&quot;:null}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="poss 审核店铺" enabled="true"/>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                </CookieManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取验证码" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/cfp-poss/validatecode/validatecode.htm?d=${__UUID}</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录poss" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="j_username" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__P(poss.username,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">j_username</stringProp>
                      </elementProp>
                      <elementProp name="j_password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__P(poss.loginPwd,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">j_password</stringProp>
                      </elementProp>
                      <elementProp name="rand" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__P(poss.verifyCode,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">rand</stringProp>
                      </elementProp>
                      <elementProp name="uuid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__UUID}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">uuid</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/cfp-poss/j_spring_security_check</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询店铺id" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_SHOP where NAME=&apos;${name}&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">new_shopId</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="poss 店铺审核" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="choose" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${new_shopId_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">choose</stringProp>
                      </elementProp>
                      <elementProp name="setPageSize13" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">20</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">setPageSize13</stringProp>
                      </elementProp>
                      <elementProp name="auditDesc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">店铺审核备注</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">auditDesc</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/cfp-poss/shop.do?method=batchAuditNew&amp;auditType=2</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1867169789">success</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="xxjob执行补充收款账号" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                </CookieManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录xxjob" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="userName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">admin</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">userName</stringProp>
                      </elementProp>
                      <elementProp name="password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">escISX4C66PI</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">password</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(xxjob.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/xxl-job-admin/login</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-956033633">{&quot;code&quot;:200,&quot;msg&quot;:null,&quot;content&quot;:null}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="执行payzero接受收款账号补充执行器任务" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">326</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">id</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(xxjob.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/xxl-job-admin/jobinfo/trigger</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-956033633">{&quot;code&quot;:200,&quot;msg&quot;:null,&quot;content&quot;:null}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加店铺-亚马逊授权" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加-亚马逊北美站店铺-授权" enabled="true">
              <stringProp name="TestPlan.comments">芝加哥渠道
</stringProp>
            </GenericController>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="添加店铺" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="name" elementType="Argument">
                    <stringProp name="Argument.name">name</stringProp>
                    <stringProp name="Argument.value">shop_name_${__Random(10,10000,)}</stringProp>
                    <stringProp name="Argument.desc">店铺名称</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="platId" elementType="Argument">
                    <stringProp name="Argument.name">platId</stringProp>
                    <stringProp name="Argument.value">101</stringProp>
                    <stringProp name="Argument.desc">平台站点（101 Amazon美国站 102 ebay美国站等等）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="unShopFlag" elementType="Argument">
                    <stringProp name="Argument.name">unShopFlag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.desc">是否需要授权（0是需要亚马逊授权校验 1是不需要）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="salesCategory" elementType="Argument">
                    <stringProp name="Argument.name">salesCategory</stringProp>
                    <stringProp name="Argument.value">08</stringProp>
                    <stringProp name="Argument.desc">销售类目（01-10）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bankAccountName" elementType="Argument">
                    <stringProp name="Argument.name">bankAccountName</stringProp>
                    <stringProp name="Argument.value">hold_name</stringProp>
                    <stringProp name="Argument.desc">账户持有人名称</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="address" elementType="Argument">
                    <stringProp name="Argument.name">address</stringProp>
                    <stringProp name="Argument.value">http://mesnew2.innertest.ipaylinks.com/#/home/storeManagement/addStore</stringProp>
                    <stringProp name="Argument.desc">地址</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sellerId" elementType="Argument">
                    <stringProp name="Argument.name">sellerId</stringProp>
                    <stringProp name="Argument.value">A3PN50Y06VN8VQ</stringProp>
                    <stringProp name="Argument.desc">卖家编号</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mwsAuthToken" elementType="Argument">
                    <stringProp name="Argument.name">mwsAuthToken</stringProp>
                    <stringProp name="Argument.value">amzn.mws.d8aff87d-ead1-f9f2-833e-cbd9ddd02bbd</stringProp>
                    <stringProp name="Argument.desc">MWS授权令牌</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="1536726427">大陆个人实名认证</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加店铺" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="设置会员需要亚马逊授权" enabled="true"/>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="设置会员需要亚马逊授权" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">update FE.T_MEMBER SET SHOP_AUTH=&apos;1&apos; WHERE LOGIN_NAME=&apos;${__P(mes.email_person_yu,)}&apos;</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="芝加哥渠道" enabled="true"/>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="启用芝加哥渠道" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">update FE.T_FUND_IN_CHANNEL set PLAT=&apos;101,102&apos;,CHANNEL_TYPE=&apos;1&apos;,REGION=&apos;US&apos;,CURRENCY=&apos;USD&apos;,ACCOUNT_OPEN_TYPE=&apos;1&apos;,ACCOUNT_LIVE_TYPE=&apos;1&apos;,FUND_IN_TYPE=&apos;1&apos;,PRIORITY=&apos;1&apos;,STATUS=&apos;1&apos;
where CHANNEL_CODE=&apos;INBK&apos;</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="禁用非芝加哥渠道" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">update FE.T_FUND_IN_CHANNEL set STATUS=&apos;0&apos;,UPDATE_DATE = sysdate
where CHANNEL_CODE!=&apos;INBK&apos;</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                  </hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询卖家编号被占用的店铺id 根据卖家编号" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Select Statement</stringProp>
                    <stringProp name="query">select ID from FE.T_SHOP where AUTH_DATA like &apos;%&quot;${sellerId}&quot;%&apos;
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames">shopId</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果店铺数存在就修改该店铺的授权信息" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(${shopId_#}&gt;0,)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除收款账户信息表数据 根据店铺ID" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">delete from FE.T_FUND_IN_ACCOUNT where SHOP_ID=${shopId_1}</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除账户信息表数据 根据店铺ID" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">delete from FE.T_ACCOUNT_INFO where SHOP_ID=${shopId_1}</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="更新卖家编号 根据店铺id" enabled="false">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">UPDATE FE.T_SHOP set AUTH_DATA=&apos;{&quot;mwsAuthToken&quot;:&quot;amzn.mws.e2b33378-3130-980c-f29f-2af378e6776e&quot;,&quot;sellerId&quot;:&quot;0000&quot;,&quot;accessKey&quot;:&quot;AKIAIY3ITZLROHJ3X2CA&quot;,&quot;sellerKey&quot;:&quot;TrXcnFVwhFK0I+qyWJNo1slxSgZPF+NtjKRqqfgO&quot;}&apos;
WHERE id =${shopId_1}</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除店铺表数据 根据授权信息" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">delete from FE.T_SHOP WHERE AUTH_DATA id=${shopId_1}
</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除账户余额表数据 根据店铺ID" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Prepared Update Statement</stringProp>
                      <stringProp name="query">delete from FE.T_ACCOUNT_BALANCE where SHOP_ID=${shopId_1}</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                  </hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询是否还有芝加哥收款账户 " enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Select Statement</stringProp>
                    <stringProp name="query">select ID from FE.T_FUND_IN_ACCOUNT where STATUS=0 and channel_code=&apos;INBK&apos; AND CURRENCY=&apos;USD&apos;
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames">counts</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果芝加哥收款账户不存在就插入一条" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(${counts_#}==0,)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="插入一条芝加哥收款账号" enabled="true">
                      <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                      <stringProp name="queryType">Update Statement</stringProp>
                      <stringProp name="query">insert into fe.T_FUND_IN_ACCOUNT(id,bank_account_no,bank_account_name,bank_address,bank_router_no,status,create_time,create_user,update_time,update_user,channel_code,Currency) values(fe.seq_fund_in_account.nextval,&apos;${__time(,)}&apos;,&apos;test&apos;,&apos;USA&apos;,&apos;SWIFTCODE&apos;,0,sysdate,&apos;SYS&apos;,sysdate,&apos;SYS&apos;,&apos;INBK&apos;,&apos;USD&apos;)</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="variableNames"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                    </JDBCSampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                      <stringProp name="Header.value">${token}</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加亚马逊北美洲店铺" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;${name}&quot;,&#xd;
  &quot;platId&quot;: ${platId},&#xd;
  &quot;unShopFlag&quot;: ${unShopFlag},&#xd;
  &quot;salesCategory&quot;: &quot;${salesCategory}&quot;,&#xd;
  &quot;bankAccountName&quot;: &quot;${bankAccountName}&quot;,&#xd;
  &quot;address&quot;: &quot;${address}&quot;,&#xd;
  &quot;sellerId&quot;: &quot;${sellerId}&quot;,&#xd;
  &quot;mwsAuthToken&quot;: &quot;${mwsAuthToken}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/mes-gateway/api/shop/manager/addShop.json</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="poss 激活收款账户" enabled="false"/>
                <hashTree>
                  <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                    <collectionProp name="CookieManager.cookies"/>
                    <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                  </CookieManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取验证码" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                    <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                    <stringProp name="HTTPSampler.path">/cfp-poss/validatecode/validatecode.htm?d=${__UUID}</stringProp>
                    <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录poss" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="j_username" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${__P(poss.username,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">j_username</stringProp>
                        </elementProp>
                        <elementProp name="j_password" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${__P(poss.loginPwd,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">j_password</stringProp>
                        </elementProp>
                        <elementProp name="rand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${__P(poss.verifyCode,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">rand</stringProp>
                        </elementProp>
                        <elementProp name="uuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${__UUID}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uuid</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                    <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                    <stringProp name="HTTPSampler.path">/cfp-poss/j_spring_security_check</stringProp>
                    <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="poss 生成开户批次" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="channelCode" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">INBK</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">channelCode</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                    <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                    <stringProp name="HTTPSampler.path">/cfp-poss/accountActivateBatch.do?method=createBatchFile</stringProp>
                    <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器-path" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">path</stringProp>
                      <stringProp name="RegexExtractor.regex">com(.+?)\|null</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">path</stringProp>
                      <stringProp name="RegexExtractor.match_number">0</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器-host" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">host</stringProp>
                      <stringProp name="RegexExtractor.regex">//(.+?)/</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">host</stringProp>
                      <stringProp name="RegexExtractor.match_number">0</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/html;charset=UTF-8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="下载批次文件" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${host}</stringProp>
                    <stringProp name="HTTPSampler.port">80</stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${path}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.io.*;

byte[] result = prev.getResponseData(); // 获取接口返回数据
vars.put(&quot;AutoTestPath&quot;,System.getProperty(&quot;user.dir&quot;)+&quot;\\AutoTest\\CIMAutoTest&quot;);

log.info(&quot;AutoTestPath：{}&quot;,System.getProperty(&quot;user.dir&quot;)+&quot;\\AutoTest\\CIMAutoTest&quot;)</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加-亚马逊日本站店铺-授权" enabled="false">
              <stringProp name="TestPlan.comments">QBC渠道
</stringProp>
            </GenericController>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="添加店铺" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="name" elementType="Argument">
                    <stringProp name="Argument.name">name</stringProp>
                    <stringProp name="Argument.value">shop_name_${__Random(10,10000,)}</stringProp>
                    <stringProp name="Argument.desc">店铺名称</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="platId" elementType="Argument">
                    <stringProp name="Argument.name">platId</stringProp>
                    <stringProp name="Argument.value">105</stringProp>
                    <stringProp name="Argument.desc">平台站点（101 Amazon美国站 102 ebay美国站等等）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="unShopFlag" elementType="Argument">
                    <stringProp name="Argument.name">unShopFlag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.desc">是否需要授权（0是需要亚马逊授权校验 1是不需要）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="salesCategory" elementType="Argument">
                    <stringProp name="Argument.name">salesCategory</stringProp>
                    <stringProp name="Argument.value">02</stringProp>
                    <stringProp name="Argument.desc">销售类目（01-10）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bankAccountName" elementType="Argument">
                    <stringProp name="Argument.name">bankAccountName</stringProp>
                    <stringProp name="Argument.value">hold_name</stringProp>
                    <stringProp name="Argument.desc">账户持有人名称</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="address" elementType="Argument">
                    <stringProp name="Argument.name">address</stringProp>
                    <stringProp name="Argument.value">http://mesnew2.innertest.ipaylinks.com/#/home/storeManagement/addStore</stringProp>
                    <stringProp name="Argument.desc">地址</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sellerId" elementType="Argument">
                    <stringProp name="Argument.name">sellerId</stringProp>
                    <stringProp name="Argument.value">A1RFAE8BZ1EYM5</stringProp>
                    <stringProp name="Argument.desc">卖家编号</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mwsAuthToken" elementType="Argument">
                    <stringProp name="Argument.name">mwsAuthToken</stringProp>
                    <stringProp name="Argument.value">amzn.mws.70b2f0be-48fa-5b60-fbb0-a4857f1a4475</stringProp>
                    <stringProp name="Argument.desc">MWS授权令牌</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="616450570">个人登录</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="QBC渠道" enabled="true"/>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="启用QBC渠道" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">update FE.T_FUND_IN_CHANNEL set PLAT=&apos;105&apos;,CHANNEL_TYPE=&apos;1&apos;,CURRENCY=&apos;JPY&apos;,ACCOUNT_OPEN_TYPE=&apos;1&apos;,ACCOUNT_LIVE_TYPE=&apos;1&apos;,FUND_IN_TYPE=&apos;2&apos;,PRIORITY=&apos;1&apos;,STATUS=&apos;1&apos;,UPDATE_DATE=SYSDATE
where CHANNEL_CODE=&apos;QBC&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="禁用非QBC渠道" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">update FE.T_FUND_IN_CHANNEL set STATUS=&apos;0&apos;,UPDATE_DATE = sysdate
where CHANNEL_CODE!=&apos;QBC&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询卖家编号被占用的店铺id 根据卖家编号" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_SHOP where AUTH_DATA like &apos;%&quot;${sellerId}&quot;%&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">shopId</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果店铺数存在就修改该店铺的授权信息" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(${shopId_#}&gt;0,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除收款账户信息表数据 根据店铺ID" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_FUND_IN_ACCOUNT where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除账户信息表数据 根据店铺ID" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_ACCOUNT_INFO where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="更新卖家编号 根据店铺id" enabled="false">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">UPDATE FE.T_SHOP set AUTH_DATA=&apos;{&quot;mwsAuthToken&quot;:&quot;amzn.mws.e2b33378-3130-980c-f29f-2af378e6776e&quot;,&quot;sellerId&quot;:&quot;0000&quot;,&quot;accessKey&quot;:&quot;AKIAIY3ITZLROHJ3X2CA&quot;,&quot;sellerKey&quot;:&quot;TrXcnFVwhFK0I+qyWJNo1slxSgZPF+NtjKRqqfgO&quot;}&apos;
WHERE id =${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除店铺表数据 根据授权信息" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_SHOP WHERE id=${shopId_1}
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除账户余额表数据 根据店铺ID" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_ACCOUNT_BALANCE where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询是否还有芝加哥收款账户 " enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_FUND_IN_ACCOUNT where STATUS=0 and channel_code=&apos;QBC&apos; AND CURRENCY=&apos;JPY&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">counts</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果芝加哥收款账户不存在就插入一条" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(${counts_#}==0,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="插入一条芝加哥收款账号" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="query">insert into fe.T_FUND_IN_ACCOUNT(id,bank_account_no,bank_account_name,bank_address,bank_router_no,status,create_time,create_user,update_time,update_user,channel_code,Currency) values(fe.seq_fund_in_account.nextval,&apos;${__time(,)}&apos;,&apos;test&apos;,&apos;Japan&apos;,&apos;071006651&apos;,0,sysdate,&apos;SYS&apos;,sysdate,&apos;SYS&apos;,&apos;QBC&apos;,&apos;JPY&apos;);
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加店铺" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;${name}&quot;,&#xd;
  &quot;platId&quot;: ${platId},&#xd;
  &quot;unShopFlag&quot;: ${unShopFlag},&#xd;
  &quot;salesCategory&quot;: &quot;${salesCategory}&quot;,&#xd;
  &quot;bankAccountName&quot;: &quot;${bankAccountName}&quot;,&#xd;
  &quot;address&quot;: &quot;${address}&quot;,&#xd;
  &quot;sellerId&quot;: &quot;${sellerId}&quot;,&#xd;
  &quot;mwsAuthToken&quot;: &quot;${mwsAuthToken}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/shop/manager/addShop.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="poss 激活收款账户" enabled="true"/>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                </CookieManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取验证码" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/cfp-poss/validatecode/validatecode.htm?d=${__UUID}</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录poss" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="j_username" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__P(poss.username,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">j_username</stringProp>
                      </elementProp>
                      <elementProp name="j_password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__P(poss.loginPwd,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">j_password</stringProp>
                      </elementProp>
                      <elementProp name="rand" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__P(poss.verifyCode,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">rand</stringProp>
                      </elementProp>
                      <elementProp name="uuid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__UUID}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">uuid</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/cfp-poss/j_spring_security_check</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询店铺id" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_SHOP where NAME=&apos;${name}&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">new_shopId</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="poss 店铺审核" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="choose" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${new_shopId_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">choose</stringProp>
                      </elementProp>
                      <elementProp name="setPageSize13" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">20</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">setPageSize13</stringProp>
                      </elementProp>
                      <elementProp name="auditDesc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">店铺审核备注</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">auditDesc</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/cfp-poss/shop.do?method=batchAuditNew&amp;auditType=2</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1867169789">success</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加-亚马逊澳洲站店铺-授权" enabled="false">
              <stringProp name="TestPlan.comments">PAYzero渠道
</stringProp>
            </GenericController>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="添加店铺" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="name" elementType="Argument">
                    <stringProp name="Argument.name">name</stringProp>
                    <stringProp name="Argument.value">shop_name_${__Random(10,10000,)}</stringProp>
                    <stringProp name="Argument.desc">店铺名称</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="platId" elementType="Argument">
                    <stringProp name="Argument.name">platId</stringProp>
                    <stringProp name="Argument.value">107</stringProp>
                    <stringProp name="Argument.desc">平台站点（103 Amazo欧洲站 ,104 亚马逊英国站）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="unShopFlag" elementType="Argument">
                    <stringProp name="Argument.name">unShopFlag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.desc">是否需要授权（0是需要亚马逊授权校验 1是不需要）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="salesCategory" elementType="Argument">
                    <stringProp name="Argument.name">salesCategory</stringProp>
                    <stringProp name="Argument.value">03</stringProp>
                    <stringProp name="Argument.desc">销售类目（01-10）</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bankAccountName" elementType="Argument">
                    <stringProp name="Argument.name">bankAccountName</stringProp>
                    <stringProp name="Argument.value">hold_name</stringProp>
                    <stringProp name="Argument.desc">账户持有人名称</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="address" elementType="Argument">
                    <stringProp name="Argument.name">address</stringProp>
                    <stringProp name="Argument.value">http://mesnew2.innertest.ipaylinks.com/#/home/storeManagement/addStore</stringProp>
                    <stringProp name="Argument.desc">地址</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sellerId" elementType="Argument">
                    <stringProp name="Argument.name">sellerId</stringProp>
                    <stringProp name="Argument.value">A3H80XBN0SDAM6</stringProp>
                    <stringProp name="Argument.desc">卖家编号</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mwsAuthToken" elementType="Argument">
                    <stringProp name="Argument.name">mwsAuthToken</stringProp>
                    <stringProp name="Argument.value">amzn.mws.d4b56a3a-f4d2-7761-51c6-3557be473f66</stringProp>
                    <stringProp name="Argument.desc">MWS授权令牌</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bank_account_no_eur" elementType="Argument">
                    <stringProp name="Argument.name">bank_account_no_eur</stringProp>
                    <stringProp name="Argument.value">DK${__time(,)}</stringProp>
                    <stringProp name="Argument.desc">欧元收款账户</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bank_account_no_gbp" elementType="Argument">
                    <stringProp name="Argument.name">bank_account_no_gbp</stringProp>
                    <stringProp name="Argument.value">GB${__time(,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <stringProp name="Argument.desc">英镑收款账户</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="616450570">个人登录</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="payzero渠道" enabled="true"/>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="启用payzero渠道" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="query">update FE.T_FUND_IN_CHANNEL set PLAT=&apos;107&apos;,CHANNEL_TYPE=&apos;1&apos;,CURRENCY=&apos;AUD&apos;,ACCOUNT_OPEN_TYPE=&apos;2&apos;,ACCOUNT_LIVE_TYPE=&apos;2&apos;,FUND_IN_TYPE=&apos;2&apos;,PRIORITY=&apos;1&apos;,STATUS=&apos;1&apos;,UPDATE_DATE=SYSDATE
where CHANNEL_CODE=&apos;PAYZERO&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="禁用非payzero渠道" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="query">update FE.T_FUND_IN_CHANNEL set STATUS=&apos;0&apos;,UPDATE_DATE = sysdate
where CHANNEL_CODE!=&apos;PAYZERO&apos;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询卖家编号被占用的店铺id 根据卖家编号" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_SHOP where AUTH_DATA like &apos;%&quot;${sellerId}&quot;%&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">shopId</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果店铺数存在就修改该店铺的授权信息" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(${shopId_#}&gt;0,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除收款账户信息表数据 根据店铺ID" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_FUND_IN_ACCOUNT where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除账户信息表数据 根据店铺ID" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_ACCOUNT_INFO where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="更新卖家编号 根据店铺id" enabled="false">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">UPDATE FE.T_SHOP set AUTH_DATA=&apos;{&quot;mwsAuthToken&quot;:&quot;amzn.mws.e2b33378-3130-980c-f29f-2af378e6776e&quot;,&quot;sellerId&quot;:&quot;0000&quot;,&quot;accessKey&quot;:&quot;AKIAIY3ITZLROHJ3X2CA&quot;,&quot;sellerKey&quot;:&quot;TrXcnFVwhFK0I+qyWJNo1slxSgZPF+NtjKRqqfgO&quot;}&apos;
WHERE id =${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除店铺表数据 根据授权信息" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_SHOP WHERE id=${shopId_1}
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除账户余额表数据 根据店铺ID" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_ACCOUNT_BALANCE where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除payzero对应收款账号表=表数据 根据店铺id" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_IN_CHANNEL_FUND_ACCOUNT WHERE shop_id=${shopId_1}
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除payzero对应店铺信息表=表数据 根据店铺id" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_IN_CHANNEL_SHOP WHERE id=${shopId_1}
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询在payzero 商户id 根据店铺id" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Select Statement</stringProp>
                    <stringProp name="query">select MERCHANT_ID from fe.T_IN_CHANNEL_SHOP where SHOP_ID=${shopId_1}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames">merchant_id</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除收款渠道跟IPL会员对应商户表=表数据 根据店铺id" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Prepared Update Statement</stringProp>
                    <stringProp name="query">delete from FE.T_IN_CHANNEL_MERCHANT where MERCHANT_ID=&apos;${merchant_id_1}&apos;
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询是否还有SAXO欧元收款账户 " enabled="false">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_FUND_IN_ACCOUNT where STATUS=0 and channel_code=&apos;SAXO&apos; AND CURRENCY=&apos;EUR&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">counts_Eur</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询是否还有SAXO英镑收款账户 " enabled="false">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_FUND_IN_ACCOUNT where STATUS=0 and channel_code=&apos;SAXO&apos; AND CURRENCY=&apos;GBP&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">counts_Gbp</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果SAXO欧元收款账户不存在就插入一条" enabled="false">
                  <stringProp name="IfController.condition">${__jexl3(${counts_Eur_#}==0,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="插入一条SAXO欧元收款账户" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="query">insert into fe.T_FUND_IN_ACCOUNT(id, bank_account_no, bank_account_name, bank_address, bank_router_no, status,
                                 create_time, create_user, update_time, update_user, channel_code, BANK_NAME, Currency,
                                 ACCOUNT_ID,LINK_ACCOUNT_NO)
values (fe.seq_fund_in_account.nextval, &apos;${bank_account_no_eur}&apos;, &apos;test&apos;, &apos;Germany&apos;, &apos;SXPYDEHH&apos;, 0, sysdate, &apos;adminA&apos;,
        sysdate, &apos;SYS&apos;, &apos;SAXO&apos;, &apos;SAXO PAYMENTS&apos;, &apos;EUR&apos;,&apos;${bank_account_no_eur}&apos;,&apos;DK${__time(,)}&apos;)</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果SAXO英镑收款账户不存在就插入一条" enabled="false">
                  <stringProp name="IfController.condition">${__jexl3(${counts_Gbp_#}==0,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="插入一条SAXO英镑收款账户" enabled="true">
                    <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="query">insert into fe.T_FUND_IN_ACCOUNT(id, bank_account_no, bank_account_name, bank_address, bank_router_no, status,
                                 create_time, create_user, update_time, update_user, channel_code, BANK_NAME, Currency,
                                 ACCOUNT_ID,LINK_ACCOUNT_NO)
values (fe.seq_fund_in_account.nextval, &apos;${bank_account_no_gbp}&apos;, &apos;test&apos;, &apos;United Kingdom&apos;, &apos;SAPYGB2L&apos;, 0, sysdate, &apos;adminA&apos;,
        sysdate, &apos;SYS&apos;, &apos;SAXO&apos;, &apos;SAXO PAYMENTS A/S&apos;, &apos;GBP&apos;,&apos;${bank_account_no_gbp}&apos;,&apos;DK${__time(,)}&apos;)</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加店铺" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;${name}&quot;,&#xd;
  &quot;platId&quot;: ${platId},&#xd;
  &quot;unShopFlag&quot;: ${unShopFlag},&#xd;
  &quot;salesCategory&quot;: &quot;${salesCategory}&quot;,&#xd;
  &quot;bankAccountName&quot;: &quot;${bankAccountName}&quot;,&#xd;
  &quot;address&quot;: &quot;${address}&quot;,&#xd;
  &quot;sellerId&quot;: &quot;${sellerId}&quot;,&#xd;
  &quot;mwsAuthToken&quot;: &quot;${mwsAuthToken}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/shop/manager/addShop.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-490301142">{&quot;responseCode&quot;:&quot;00000000&quot;,&quot;responseMsg&quot;:&quot;成功响应&quot;,&quot;responseStatus&quot;:&quot;1&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="xxjob执行补充收款账号" enabled="false"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                </CookieManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录xxjob" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="userName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">admin</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">userName</stringProp>
                      </elementProp>
                      <elementProp name="password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">escISX4C66PI</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">password</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(xxjob.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/xxl-job-admin/login</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-956033633">{&quot;code&quot;:200,&quot;msg&quot;:null,&quot;content&quot;:null}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="执行payzero接受收款账号补充执行器任务" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">326</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">id</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(xxjob.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/xxl-job-admin/jobinfo/trigger</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-956033633">{&quot;code&quot;:200,&quot;msg&quot;:null,&quot;content&quot;:null}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="poss 审核店铺" enabled="true"/>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                </CookieManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取验证码" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/cfp-poss/validatecode/validatecode.htm?d=${__UUID}</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录poss" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="j_username" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__P(poss.username,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">j_username</stringProp>
                      </elementProp>
                      <elementProp name="j_password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__P(poss.loginPwd,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">j_password</stringProp>
                      </elementProp>
                      <elementProp name="rand" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__P(poss.verifyCode,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">rand</stringProp>
                      </elementProp>
                      <elementProp name="uuid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__UUID}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">uuid</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/cfp-poss/j_spring_security_check</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询店铺id" enabled="true">
                  <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                  <stringProp name="queryType">Prepared Select Statement</stringProp>
                  <stringProp name="query">select ID from FE.T_SHOP where NAME=&apos;${name}&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">new_shopId</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="poss 店铺审核" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="choose" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${new_shopId_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">choose</stringProp>
                      </elementProp>
                      <elementProp name="setPageSize13" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">20</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">setPageSize13</stringProp>
                      </elementProp>
                      <elementProp name="auditDesc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">店铺审核备注</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">auditDesc</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/cfp-poss/shop.do?method=batchAuditNew&amp;auditType=2</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1867169789">success</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="xxjob执行补充收款账号" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                </CookieManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录xxjob" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="userName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">admin</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">userName</stringProp>
                      </elementProp>
                      <elementProp name="password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">escISX4C66PI</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">password</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(xxjob.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/xxl-job-admin/login</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-956033633">{&quot;code&quot;:200,&quot;msg&quot;:null,&quot;content&quot;:null}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="执行payzero接受收款账号补充执行器任务" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">326</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">id</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(xxjob.ip,)}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                  <stringProp name="HTTPSampler.path">/xxl-job-admin/jobinfo/trigger</stringProp>
                  <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-956033633">{&quot;code&quot;:200,&quot;msg&quot;:null,&quot;content&quot;:null}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="debug" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询 fe.t_member 根据 login_name" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">select MEMBER_CODE
  from FE.T_MEMBER t
 where t.login_name = &apos;${__P(mes.email,)}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">memberCode</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${memberCode_#}&gt;0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_MEMBER 根据 member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_MEMBER t
where t.member_code = &apos;${memberCode_1}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_INDIVIDUAL_INFO 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_INDIVIDUAL_INFO t
where t.member_code = &apos;${memberCode_1}&apos;
or t.cer_code = &apos;${__P(mes.idCardNo,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_BASE 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_BASE t
where t.member_code = &apos;${memberCode_1}&apos;
or t.biz_licence_code = &apos;9151010409889665X3&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CERTIFICATE 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_CERTIFICATE t
where t.member_code = &apos;${memberCode_1}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CONTACT 根据member_code" enabled="true">
                <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">delete from FE.T_ENTERPRISE_CONTACT t
where t.member_code = &apos;${memberCode_1}&apos; or t.cer_code = &apos;${__P(mes.idCardNo,)}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="登录" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="600886531">注册-登录</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="已登录" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="上传图片至OSS" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传身份证人像面至OSS" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="/Data/gitlab_space/jmeter/testdata/mes-gateway/身份证正面.jpg" elementType="HTTPFileArg">
                      <stringProp name="File.path">/Data/gitlab_space/jmeter/testdata/mes-gateway/身份证正面.jpg</stringProp>
                      <stringProp name="File.paramname">file</stringProp>
                      <stringProp name="File.mimetype">image/jpeg</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="subPath" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">auth</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">subPath</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 personIdPath" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;personIdPath&quot;, fileOssKey);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传身份证国徽面至OSS" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="../..//testdata/mes-gateway/身份证反面.jpg" elementType="HTTPFileArg">
                      <stringProp name="File.path">../..//testdata/mes-gateway/身份证反面.jpg</stringProp>
                      <stringProp name="File.paramname">file</stringProp>
                      <stringProp name="File.mimetype">image/jpeg</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="subPath" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">auth</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">subPath</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 personIdBackPath" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;personIdBackPath&quot;, fileOssKey);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传手持身份证至OSS" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="../..//testdata/mes-gateway/手持身份证.jpg" elementType="HTTPFileArg">
                      <stringProp name="File.path">../..//testdata/mes-gateway/手持身份证.jpg</stringProp>
                      <stringProp name="File.paramname">file</stringProp>
                      <stringProp name="File.mimetype">image/jpeg</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="subPath" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">auth</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">subPath</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 personIdHoldPath" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;personIdHoldPath&quot;, fileOssKey);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="大陆个人实名认证" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="大陆个人实名认证" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;country&quot;: &quot;中国大陆&quot;,&#xd;
    &quot;name&quot;: &quot;${__P(mes.individualName,)}&quot;,&#xd;
    &quot;cerCode&quot;: &quot;${__P(mes.idCardNo,)}&quot;,&#xd;
    &quot;address&quot;: &quot;${__P(mes.address,)}&quot;,&#xd;
    &quot;personIdPath&quot;: &quot;${personIdPath}&quot;,&#xd;
    &quot;personIdBackPath&quot;: &quot;${personIdBackPath}&quot;,&#xd;
    &quot;cerStartExpDate&quot;: &quot;${__P(mes.idCardStartExpDate,)}&quot;,&#xd;
    &quot;cerExpDate&quot;: &quot;${__P(mes.idCardEndExpDate,)}&quot;,&#xd;
    &quot;individualEnName&quot;: &quot;${__P(mes.individualEnName,)}&quot;,&#xd;
    &quot;personIdHoldPath&quot;: &quot;${personIdHoldPath}&quot;,&#xd;
    &quot;bankCardNo&quot;: &quot;${__P(mes.bankCardNo,)}&quot;,&#xd;
    &quot;mobile&quot;: &quot;${__P(mes.reservedPhoneNo,)}&quot;,&#xd;
    &quot;passport&quot;: &quot;&quot;,&#xd;
    &quot;city&quot;: &quot;${__P(mes.city,)}&quot;,&#xd;
    &quot;province&quot;: &quot;${__P(mes.province,)}&quot;,&#xd;
    &quot;birthDate&quot;: &quot;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
                <stringProp name="HTTPSampler.path">/mes-gateway/api/modifyLoginPwd/doPersonAuthentication.json</stringProp>
                <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                    <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                    <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发送注册短信验证码" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;requestObj&quot;:&quot;${__P(mes.phone,)}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
          <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/sendSmsCode.json</stringProp>
          <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
              <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
              <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
              <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="注册-登录" enabled="false"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 fe.t_member 根据login_name" enabled="true">
            <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">delete from FE.T_MEMBER t
where t.login_name = &apos;${__P(mes.email,)}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="手机号注册" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发送注册短信验证码" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;requestObj&quot;:&quot;${__P(mes.phone,)}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
            <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/sendSmsCode.json</stringProp>
            <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis del" enabled="true">
            <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_SEND_TIMES_${__P(mes.phone,)}_user_regist&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	jedis.del(redisKey);

	String responseData = &quot;del redisKey：&quot; + redisKey + &quot; success&quot;;
	jedis.close();
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="redis 查询注册短信验证码" enabled="true">
            <stringProp name="BeanShellSampler.query">import redis.clients.jedis.Jedis;
import me.yangqiuhua.jmeter.protocol.config.RedisElement;

	String redisPoolName = &quot;${__P(redis.pool-name,)}&quot;;
	log.info(&quot;redisPoolName：{}&quot;,redisPoolName);
	Jedis jedis = RedisElement.getJedis(redisPoolName);

	String redisKey = &quot;MES_GATEWAY_SMS_${__P(mes.phone,)}_user_regist&quot;;
	log.info(&quot;redisKey：{}&quot;,redisKey);
	
	String redisValue = jedis.get(redisKey);
	log.info(&quot;redisValue：{}&quot;,redisValue);
	vars.put(&quot;verifyCode&quot;, redisValue.replaceAll(&quot;\&quot;&quot;, &quot;&quot;));

	String responseData = &quot;redisKey：&quot; + redisKey + &quot;\r\n&quot; 
	+ &quot;redisValue：&quot; + redisValue;
jedis.close();
SampleResult.setResponseData(responseData, &quot;utf-8&quot;); </stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="注册" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;requestObj&quot;: {&#xd;
        &quot;agreement&quot;: true,&#xd;
        &quot;loginPhone&quot;: &quot;${__P(mes.phone,)}&quot;,&#xd;
        &quot;moblileVerifCode&quot;: &quot;${verifyCode}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
            <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/mobile.json</stringProp>
            <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                <stringProp name="1001411671">&quot;responseObj&quot;:&quot;MES_SIGN_VERFY_TOKEN_${__P(mes.phone,)}&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="完善账户信息" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;requestObj&quot;: {&#xd;
        &quot;email&quot;: &quot;${__P(mes.email,)}&quot;,&#xd;
        &quot;loginPhone&quot;: &quot;${__P(mes.phone,)}&quot;,&#xd;
        &quot;payPwd&quot;: &quot;${__P(mes.payPwd,)}&quot;,&#xd;
        &quot;payPwdRepeat&quot;: &quot;${__P(mes.payPwd,)}&quot;,&#xd;
        &quot;pwd&quot;: &quot;${__P(mes.loginPwd,)}&quot;,&#xd;
        &quot;pwdRepeat&quot;: &quot;${__P(mes.loginPwd,)}&quot;,&#xd;
        &quot;recommendCode&quot;: &quot;&quot;,&#xd;
        &quot;signType&quot;: 1,&#xd;
        &quot;verfyToken&quot;: &quot;MES_SIGN_VERFY_TOKEN_${__P(mes.phone,)}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
            <stringProp name="HTTPSampler.path">/mes-gateway/api/sign/signup/improveInfo.json</stringProp>
            <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                <stringProp name="-619203974">&quot;responseObj&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="登录" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;requestObj&quot;: {&#xd;
    &quot;loginName&quot;: &quot;${__P(mes.phone,)}&quot;,&#xd;
    &quot;password&quot;: &quot;${__P(mes.loginPwd,)}&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
            <stringProp name="HTTPSampler.path">/mes-gateway/api/security/login.json</stringProp>
            <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                <stringProp name="-2083166786">&quot;responseObj&quot;:{&quot;token&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取token" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String token = responseObj.getString(&quot;token&quot;);
vars.put(&quot;token&quot;, token);
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="登录" enabled="false"/>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;requestObj&quot;: {&#xd;
    &quot;loginName&quot;: &quot;${__P(mes.email_person_yu,)}&quot;,&#xd;
    &quot;password&quot;: &quot;${__P(mes.loginPwd_person_yu,)}&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
          <stringProp name="HTTPSampler.path">/mes-gateway/api/security/login.json</stringProp>
          <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
              <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
              <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
              <stringProp name="-2083166786">&quot;responseObj&quot;:{&quot;token&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取token" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = (JSONObject) responseData.get(&quot;responseObj&quot;);
String token = String.valueOf(responseObj.get(&quot;token&quot;));
vars.put(&quot;token&quot;, token);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="企业登录" enabled="false"/>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;requestObj&quot;: {&#xd;
    &quot;loginName&quot;: &quot;${__P(mes.email_company_yu,)}&quot;,&#xd;
    &quot;password&quot;: &quot;${__P(mes.loginPwd_company_yu,)}&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
          <stringProp name="HTTPSampler.path">/mes-gateway/api/security/login.json</stringProp>
          <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
              <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
              <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
              <stringProp name="-2083166786">&quot;responseObj&quot;:{&quot;token&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取token" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = (JSONObject) responseData.get(&quot;responseObj&quot;);
String token = String.valueOf(responseObj.get(&quot;token&quot;));
vars.put(&quot;token&quot;, token);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="大陆个人实名认证" enabled="false"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询 fe.t_member 根据 login_name" enabled="true">
            <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">select MEMBER_CODE
  from FE.T_MEMBER t
 where t.login_name = &apos;${__P(mes.email,)}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">memberCode</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
            <stringProp name="IfController.condition">${memberCode_#}&gt;0</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_MEMBER 根据 member_code" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">delete from FE.T_MEMBER t
where t.member_code = &apos;${memberCode_1}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_INDIVIDUAL_INFO 根据member_code" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">delete from FE.T_INDIVIDUAL_INFO t
where t.member_code = &apos;${memberCode_1}&apos;
or t.cer_code = &apos;${__P(mes.idCardNo,)}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_BASE 根据member_code" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">delete from FE.T_ENTERPRISE_BASE t
where t.member_code = &apos;${memberCode_1}&apos;
or t.biz_licence_code = &apos;9151010409889665X3&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CERTIFICATE 根据member_code" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">delete from FE.T_ENTERPRISE_CERTIFICATE t
where t.member_code = &apos;${memberCode_1}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CONTACT 根据member_code" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">delete from FE.T_ENTERPRISE_CONTACT t
where t.member_code = &apos;${memberCode_1}&apos; or t.cer_code = &apos;${__P(mes.idCardNo,)}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="登录" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="600886531">注册-登录</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="已登录" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="上传图片至OSS" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传身份证人像面至OSS" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="/Data/gitlab_space/jmeter/testdata/mes-gateway/身份证正面.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">/Data/gitlab_space/jmeter/testdata/mes-gateway/身份证正面.jpg</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subPath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">auth</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subPath</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
              <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
              <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 personIdPath" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;personIdPath&quot;, fileOssKey);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                  <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                  <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传身份证国徽面至OSS" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="../..//testdata/mes-gateway/身份证反面.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">../..//testdata/mes-gateway/身份证反面.jpg</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subPath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">auth</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subPath</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
              <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
              <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 personIdBackPath" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;personIdBackPath&quot;, fileOssKey);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                  <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                  <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传手持身份证至OSS" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="../..//testdata/mes-gateway/手持身份证.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">../..//testdata/mes-gateway/手持身份证.jpg</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subPath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">auth</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subPath</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
              <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
              <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 personIdHoldPath" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;personIdHoldPath&quot;, fileOssKey);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                  <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                  <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="大陆个人实名认证" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="大陆个人实名认证" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;country&quot;: &quot;中国大陆&quot;,&#xd;
    &quot;name&quot;: &quot;${__P(mes.individualName,)}&quot;,&#xd;
    &quot;cerCode&quot;: &quot;${__P(mes.idCardNo,)}&quot;,&#xd;
    &quot;address&quot;: &quot;${__P(mes.address,)}&quot;,&#xd;
    &quot;personIdPath&quot;: &quot;${personIdPath}&quot;,&#xd;
    &quot;personIdBackPath&quot;: &quot;${personIdBackPath}&quot;,&#xd;
    &quot;cerStartExpDate&quot;: &quot;${__P(mes.idCardStartExpDate,)}&quot;,&#xd;
    &quot;cerExpDate&quot;: &quot;${__P(mes.idCardEndExpDate,)}&quot;,&#xd;
    &quot;individualEnName&quot;: &quot;${__P(mes.individualEnName,)}&quot;,&#xd;
    &quot;personIdHoldPath&quot;: &quot;${personIdHoldPath}&quot;,&#xd;
    &quot;bankCardNo&quot;: &quot;${__P(mes.bankCardNo,)}&quot;,&#xd;
    &quot;mobile&quot;: &quot;${__P(mes.reservedPhoneNo,)}&quot;,&#xd;
    &quot;passport&quot;: &quot;&quot;,&#xd;
    &quot;city&quot;: &quot;${__P(mes.city,)}&quot;,&#xd;
    &quot;province&quot;: &quot;${__P(mes.province,)}&quot;,&#xd;
    &quot;birthDate&quot;: &quot;&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
              <stringProp name="HTTPSampler.path">/mes-gateway/api/modifyLoginPwd/doPersonAuthentication.json</stringProp>
              <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                  <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                  <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="企业实名认证" enabled="false"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化DB" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询 fe.t_member 根据 login_name" enabled="true">
            <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select MEMBER_CODE
  from FE.T_MEMBER t
 where t.login_name = &apos;${__P(mes.email,)}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">memberCode</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
            <stringProp name="IfController.condition">${memberCode_#}&gt;0</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_INDIVIDUAL_INFO 根据member_code" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">delete from FE.T_INDIVIDUAL_INFO t
where t.member_code = &apos;${memberCode_1}&apos;
or t.cer_code = &apos;${__P(mes.idCardNo,)}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_BASE 根据member_code" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">delete from FE.T_ENTERPRISE_BASE t
where t.member_code = &apos;${memberCode_1}&apos;
or t.GOV_CODE = &apos;9151010409889665X3&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CERTIFICATE 根据member_code" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">delete from FE.T_ENTERPRISE_CERTIFICATE t
where t.member_code = &apos;${memberCode_1}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="删除 FE.T_ENTERPRISE_CONTACT 根据member_code" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">delete from FE.T_ENTERPRISE_CONTACT t
where t.member_code = &apos;${memberCode_1}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="修改 FE.T_MEMBER 根据 member_code" enabled="true">
              <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">delete from FE.T_MEMBER t
where t.member_code = &apos;${memberCode_1}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="登录" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="600886531">注册-登录</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="已登录" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="上传图片至OSS" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传营业执照至OSS" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="../../testdata/mes-gateway/营业执照.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">../../testdata/mes-gateway/营业执照.jpg</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subPath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">auth</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subPath</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
              <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
              <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 businessLicense" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;businessLicense&quot;, fileOssKey);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                  <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                  <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业法人身份证人像面至OSS" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="../../testdata/mes-gateway/企业法人身份证正面.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">../../testdata/mes-gateway/企业法人身份证正面.jpg</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subPath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">auth</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subPath</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
              <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
              <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 legalFront" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;legalFront&quot;, fileOssKey);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                  <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                  <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业法人身份证国徽面至OSS" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="../..//testdata/mes-gateway/企业法人身份证反面.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">../..//testdata/mes-gateway/企业法人身份证反面.jpg</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subPath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">auth</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subPath</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
              <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
              <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 legalBack" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;legalBack&quot;, fileOssKey);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                  <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                  <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业代理人身份证人像面至OSS" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="../../testdata/mes-gateway/企业代理人身份证正面.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">../../testdata/mes-gateway/企业代理人身份证正面.jpg</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subPath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">auth</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subPath</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
              <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
              <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 agentFront" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;agentFront&quot;, fileOssKey);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                  <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                  <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业代理人身份证国徽面至OSS" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="../..//testdata/mes-gateway/企业代理人身份证反面.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">../..//testdata/mes-gateway/企业代理人身份证反面.jpg</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subPath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">auth</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subPath</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
              <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
              <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 agentBack" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;agentBack&quot;, fileOssKey);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                  <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                  <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传企业授权书至OSS" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="../../testdata/mes-gateway/企业授权书.png" elementType="HTTPFileArg">
                    <stringProp name="File.path">../../testdata/mes-gateway/企业授权书.png</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subPath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">auth</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subPath</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
              <stringProp name="HTTPSampler.path">/mes-gateway/api/file/upload.json</stringProp>
              <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="提取 fileOssKey 为 agentAuthorizationLetter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataString = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataString);

JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String fileOssKey = responseObj.getString(&quot;fileOssKey&quot;);
String fileSignedUrl = responseObj.getString(&quot;fileSignedUrl&quot;);
log.info(&quot;fileOssKey:{}&quot;, fileOssKey);
log.info(&quot;fileSignedUrl:{}&quot;, fileSignedUrl);
vars.put(&quot;agentAuthorizationLetter&quot;, fileOssKey);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                  <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                  <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="大陆企业实名认证" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="大陆企业实名认证" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;country&quot;: &quot;中国大陆&quot;,&#xd;
    &quot;zhName&quot;: &quot;成都精英银河建筑装饰设计有限公司&quot;,&#xd;
    &quot;enName&quot;: &quot;CDJY&quot;,&#xd;
    &quot;govCode&quot;: &quot;9151010409889665X3&quot;,&#xd;
    &quot;addr&quot;: &quot;成都市锦江区庆云南街69号红星国际3-3-313号&quot;,&#xd;
    &quot;certificateType&quot;: &quot;&quot;,&#xd;
    &quot;pdfOssToken&quot;: &quot;&quot;,&#xd;
    &quot;legalRegisterPlace&quot;: &quot;中国大陆&quot;,&#xd;
    &quot;legalName&quot;: &quot;杨秋华&quot;,&#xd;
    &quot;legalEnName&quot;: &quot;yangqiuhua&quot;,&#xd;
    &quot;legalProvince&quot;: &quot;江苏省&quot;,&#xd;
    &quot;legalCity&quot;: &quot;南京市&quot;,&#xd;
    &quot;legalAddress&quot;: &quot;南京市高淳区阳江镇杨家湾村350号&quot;,&#xd;
    &quot;legalFrontImgOssToken&quot;: &quot;${legalFront}&quot;,&#xd;
    &quot;legalBackImgOssToken&quot;: &quot;${legalBack}&quot;,&#xd;
    &quot;legalPassportImgOssToken&quot;: &quot;&quot;,&#xd;
    &quot;agentRegisterPlace&quot;: &quot;中国大陆&quot;,&#xd;
    &quot;agentName&quot;: &quot;李志祥&quot;,&#xd;
    &quot;agentEnName&quot;: &quot;lizhixiang&quot;,&#xd;
    &quot;agentFrontImgOssToken&quot;: &quot;${agentFront}&quot;,&#xd;
    &quot;agentBackImgOssToken&quot;: &quot;${agentBack}&quot;,&#xd;
    &quot;agentPassportImgOssToken&quot;: &quot;&quot;,&#xd;
    &quot;agenAuthorizationLetter&quot;: &quot;${agentAuthorizationLetter}&quot;,&#xd;
    &quot;bussImgOssToken&quot;: &quot;${businessLicense}&quot;,&#xd;
    &quot;regImgOssToken&quot;: &quot;&quot;,&#xd;
    &quot;enterpriseUpgradeFlag&quot;: &quot;0&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(mesGateway.ip,)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(mesGateway.port,)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
              <stringProp name="HTTPSampler.path">/mes-gateway/api/modifyLoginPwd/doCompanyAuthentication.json</stringProp>
              <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-96172152">&quot;responseCode&quot;:&quot;00000000&quot;</stringProp>
                  <stringProp name="-1064460224">&quot;responseMsg&quot;:&quot;成功响应&quot;</stringProp>
                  <stringProp name="792847174">&quot;responseStatus&quot;:&quot;1&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="poss 实名认证审核" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询 fe.t_member 根据 login_name" enabled="true">
            <stringProp name="dataSource">${__P(datasource.pool-name,)}</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">select t.*, t.rowid
  from FE.T_MEMBER t
 where t.login_name = &apos;${__P(mes.email,)}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">memberList</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.List;

List&lt;Map&lt;String, Object&gt;&gt; memberList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;memberList&quot;);
Map&lt;String, Object&gt; member = memberList.get(0);
String memberCode = String.valueOf(member.get(&quot;MEMBER_CODE&quot;));
vars.put(&quot;memberCode&quot;, memberCode);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取验证码" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
            <stringProp name="HTTPSampler.path">/cfp-poss/validatecode/validatecode.htm?d=${__UUID}</stringProp>
            <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录poss" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="j_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__P(poss.username,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">j_username</stringProp>
                </elementProp>
                <elementProp name="j_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__P(poss.loginPwd,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">j_password</stringProp>
                </elementProp>
                <elementProp name="rand" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__P(poss.verifyCode,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">rand</stringProp>
                </elementProp>
                <elementProp name="uuid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__UUID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">uuid</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
            <stringProp name="HTTPSampler.path">/cfp-poss/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="poss 实名认证审核" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="memberCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${memberCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberCode</stringProp>
                </elementProp>
                <elementProp name="checkType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">checkType</stringProp>
                </elementProp>
                <elementProp name="auditDesc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">checkType=1 通过；checkType=2 拒绝</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">auditDesc</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(poss.ip,)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(poss.port,)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">${charset}</stringProp>
            <stringProp name="HTTPSampler.path">/cfp-poss/cfpMemberCheck.do?method=memberCheckCompany</stringProp>
            <stringProp name="HTTPSampler.method">${httpMethod}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1149187101">SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
