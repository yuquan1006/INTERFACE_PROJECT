<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0.20190611">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="注册中心地址" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="registry.address" elementType="Argument">
            <stringProp name="Argument.name">registry.address</stringProp>
            <stringProp name="Argument.value">101.132.113.199:2181,101.132.113.199:2182,101.132.113.199:2183</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="出款" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="生成 bizOrderId" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String bizOrderId = &quot;${__time(yyMMddHHmmssSSS,)}${__RandomString(4,0123456789,)}&quot;;
vars.put(&quot;bizOrderId&quot;, bizOrderId);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">2</stringProp>
          </LoopController>
          <hashTree>
            <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="OutChannelFundoutFacade.fundOut" enabled="true">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="url" elementType="Argument">
                    <stringProp name="Argument.name">url</stringProp>
                    <stringProp name="Argument.value">${url}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="registryConfigs" elementType="Argument">
                    <stringProp name="Argument.name">registryConfigs</stringProp>
                    <stringProp name="Argument.value">${registryConfigs}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="monitorConfig" elementType="Argument">
                    <stringProp name="Argument.name">monitorConfig</stringProp>
                    <stringProp name="Argument.value">${monitorConfig}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="interfaceName" elementType="Argument">
                    <stringProp name="Argument.name">interfaceName</stringProp>
                    <stringProp name="Argument.value">${interfaceName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="version" elementType="Argument">
                    <stringProp name="Argument.name">version</stringProp>
                    <stringProp name="Argument.value">${version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="methodConfigs" elementType="Argument">
                    <stringProp name="Argument.name">methodConfigs</stringProp>
                    <stringProp name="Argument.value">${methodConfigs}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="methodName" elementType="Argument">
                    <stringProp name="Argument.name">methodName</stringProp>
                    <stringProp name="Argument.value">${methodName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="methodParameters" elementType="Argument">
                    <stringProp name="Argument.name">methodParameters</stringProp>
                    <stringProp name="Argument.value">${methodParameters}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
            </JavaSampler>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="515839844">interfaceName</stringProp>
                  <stringProp name="351608024">version</stringProp>
                  <stringProp name="-723163380">methodName</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="23891221">
                    <stringProp name="2098248130">com.ipaylinks.cfp.channel.facade.fundout.OutChannelFundoutFacade</stringProp>
                    <stringProp name="48563">1.0</stringProp>
                    <stringProp name="-509648311">fundOut</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                <collectionProp name="UserParameters.names">
                  <stringProp name="116079">url</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-825906266">
                    <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.cfp.channel.facade.fundout.request.FundOutRequest;
	
	FundOutRequest req = new FundOutRequest();
	req.setBizOrderId(new java.math.BigDecimal(&quot;${bizOrderId}&quot;));
	req.setTransactionOrderNo(&quot;20${bizOrderId}&quot;);
	req.setMemberCode(20000001520L);
	req.setBizType(&quot;1&quot;);
	req.setCurrencyCodeSrc(&quot;USD&quot;);
	req.setAmountSrc(new java.math.BigDecimal(&quot;2997&quot;));
	req.setCurrencyCode(&quot;CNY&quot;);
	req.setAmount(new java.math.BigDecimal(&quot;20379.6&quot;));
	req.setOrgCode(&quot;CCS_ONLINE&quot;);
	req.setBankName(&quot;中国银行&quot;);
	req.setBankAddress(&quot;中国上海浦东&quot;);
	req.setBankAcountName(&quot;杨秋华&quot;);
	req.setBankAccountNo(&quot;290613ae6980601eee4b3fac2222041aea020aefed265198&quot;);
	req.setSubAcctNo(&quot;1560201403990018003519&quot;);
	req.setSwiftCode(&quot;&quot;);
	req.setBusinessType(new Short(&quot;1&quot;));
	req.setBatchNo(&quot;&quot;);
	req.setFundSource(&quot;3&quot;);
	req.setBankBizNo(&quot;&quot;);
	req.setDeclareBatchNo(&quot;&quot;);
	req.setReferenceNo(&quot;&quot;);
	req.setRemark(&quot;remark&quot;);
	req.setExt1(&quot;&quot;);
	req.setPayeeName(&quot;杨秋华&quot;);
	req.setBankCnapsCode(&quot;104290003582&quot;);
	req.setCertNo(&quot;32012519930807171X&quot;);
	req.setExchangeRate(&quot;6.8&quot;);
//	req.setFeeType(&quot;&quot;);
	req.setFeeAmount(new java.math.BigDecimal(&quot;0&quot;));
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;9&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;fundout_router_success&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;出款路由成功&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="订单查询" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="FundOutOrderFacade.getFundorderByBizOrderId" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-551014913">
                      <stringProp name="-25454133">com.ipaylinks.cfp.channel.facade.fundout.FundOutOrderFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="-1301498688">getFundorderByBizOrderId</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import java.math.BigDecimal;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.cfp.channel.facade.fundout.request.FundOutRequest;
	
	String bizOrderId = &quot;${bizOrderId}&quot;;
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(bizOrderId);
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

String responseDataStr = prev.getResponseDataAsString();
JSONObject responseData = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONObject responseObj = responseData.getJSONObject(&quot;responseObj&quot;);
String foOrderId = responseObj.getString(&quot;id&quot;);
log.info(&quot;foOrderId:{}&quot;, foOrderId);
vars.put(&quot;foOrderId&quot;, foOrderId);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;1&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;00000000&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;成功响应&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="组包回调出款" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="FundOutOrderFacade.FundOutPackNotify" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="1163616259">
                      <stringProp name="241412940">com.ipaylinks.cfp.channel.facade.fundout.ChannelFundOutFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="-337304117">FundOutPackNotify</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import java.math.BigDecimal;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.cfp.channel.facade.fundout.request.FundOutPackNotifyRequest;
	
	FundOutPackNotifyRequest req = new FundOutPackNotifyRequest();
	req.setFoOrderId(new BigDecimal(&quot;${foOrderId}&quot;));
	req.setPackOrderType(1);
	req.setPackOrderStatus(1);
	req.setPlatName(&quot;amazon&quot;);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;1&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;00000000&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;成功响应&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
