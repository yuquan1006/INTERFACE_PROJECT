<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0.20190611">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="profiles active 变量 选择" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="DB" elementType="Argument">
            <stringProp name="Argument.name">DB</stringProp>
            <stringProp name="Argument.value">DB-gathering-dev</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">数据库环境</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB gathering-dev" enabled="true">
        <stringProp name="TestPlan.comments">Connect to local HSPAD_Demo_CO and set its isolation mode to SNAPSHOT (4096) and disable auto commit.</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1 from dual</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">DB-gathering-dev</stringProp>
        <stringProp name="dbUrl">jdbc:oracle:thin:@47.101.147.47:2522:CFPDB</stringProp>
        <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">PLe36GRseopJD0bShNx9</stringProp>
        <stringProp name="poolMax">8</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">FE</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB gathering-test1" enabled="false">
        <stringProp name="TestPlan.comments">Connect to local HSPAD_Demo_CO and set its isolation mode to SNAPSHOT (4096) and disable auto commit.</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1 from dual</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">DB-gathering-test1</stringProp>
        <stringProp name="dbUrl">jdbc:oracle:thin:@106.15.186.65:2523:cfpdbt</stringProp>
        <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">d8InpLfgCEVdJUeu</stringProp>
        <stringProp name="poolMax">8</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">testquery</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB gathering-test2" enabled="false">
        <stringProp name="TestPlan.comments">Connect to local HSPAD_Demo_CO and set its isolation mode to SNAPSHOT (4096) and disable auto commit.</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1 from dual</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">DB-gathering-test2</stringProp>
        <stringProp name="dbUrl">jdbc:oracle:thin:@106.15.186.65:2524:cfpdbtt</stringProp>
        <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">d8InpLfgCEVdJUeu</stringProp>
        <stringProp name="poolMax">8</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">testquery</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <me.yangqiuhua.jmeter.protocol.config.RedisElement guiclass="TestBeanGUI" testclass="me.yangqiuhua.jmeter.protocol.config.RedisElement" testname="RedisElement" enabled="false">
        <stringProp name="database">1</stringProp>
        <stringProp name="host">101.132.162.77</stringProp>
        <stringProp name="jedisPoolName">redis</stringProp>
        <stringProp name="maxIdle">8</stringProp>
        <stringProp name="maxTotal">8</stringProp>
        <stringProp name="maxWaitMillis">-1</stringProp>
        <stringProp name="minIdle">0</stringProp>
        <stringProp name="password">123456</stringProp>
        <stringProp name="port">6379</stringProp>
        <stringProp name="timeout">60000</stringProp>
      </me.yangqiuhua.jmeter.protocol.config.RedisElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="注册中心地址" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="registry.address" elementType="Argument">
            <stringProp name="Argument.name">registry.address</stringProp>
            <stringProp name="Argument.value">101.132.113.199:2181,101.132.113.199:2182,101.132.113.199:2183</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <org.apache.jmeter.protocol.jdbc.sampler.DbunitSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.jdbc.sampler.DbunitSampler" testname="DbunitSampler backup" enabled="false">
          <stringProp name="dataSource">${DB}</stringProp>
          <stringProp name="backupFileName">backupFile</stringProp>
          <stringProp name="operationType">backup</stringProp>
          <stringProp name="schema">FE</stringProp>
          <stringProp name="tables">T_ACCOUNT_INFO,T_ACCOUNT_BALANCE</stringProp>
        </org.apache.jmeter.protocol.jdbc.sampler.DbunitSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="开户" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="开通店铺账户" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">4</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="openShopAccount-req" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding">UTF-8</stringProp>
                <stringProp name="filename">../../testdata/dubboTest-cfp-acct/openShopAccount-req.csv</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">true</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames"></stringProp>
              </CSVDataSet>
              <hashTree/>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="openShopAccount-resp" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding">UTF-8</stringProp>
                <stringProp name="filename">../../testdata/dubboTest-cfp-acct/openShopAccount-resp.csv</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">true</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames"></stringProp>
              </CSVDataSet>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="AccountManageFacade.openAccount" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-1461494111">AccountManageFacade.openAccount</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="openShopAccount-fe.t_account_info-req" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding">UTF-8</stringProp>
                <stringProp name="filename">../../testdata/dubboTest-cfp-acct/openShopAccount-fe.t_account_info-req.csv</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">true</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames"></stringProp>
              </CSVDataSet>
              <hashTree/>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="openShopAccount-fe.t_account_info-resp" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding">UTF-8</stringProp>
                <stringProp name="filename">../../testdata/dubboTest-cfp-acct/openShopAccount-fe.t_account_info-resp.csv</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">true</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames"></stringProp>
              </CSVDataSet>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="fe.T_ACCOUNT_INFO 查询" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="1472724931">fe.T_ACCOUNT_INFO 查询</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="openShopAccount-fe.t_account_balance-req" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding">UTF-8</stringProp>
                <stringProp name="filename">../../testdata/dubboTest-cfp-acct/openShopAccount-fe.t_account_balance-req.csv</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">true</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames"></stringProp>
              </CSVDataSet>
              <hashTree/>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="openShopAccount-fe.t_account_balance-resp" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding">UTF-8</stringProp>
                <stringProp name="filename">../../testdata/dubboTest-cfp-acct/openShopAccount-fe.t_account_balance-resp.csv</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">true</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames"></stringProp>
              </CSVDataSet>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="fe.T_ACCOUNT_BALANCE 查询" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-486136435">fe.T_ACCOUNT_BALANCE 查询</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="开通钱包账户" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="openWalletAccount-req" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding">UTF-8</stringProp>
                <stringProp name="filename">../../testdata/dubboTest-cfp-acct/openWalletAccount-req.csv</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">true</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames"></stringProp>
              </CSVDataSet>
              <hashTree/>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="openWalletAccount-resp" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding">UTF-8</stringProp>
                <stringProp name="filename">../../testdata/dubboTest-cfp-acct/openWalletAccount-resp.csv</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">true</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames"></stringProp>
              </CSVDataSet>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="AccountManageFacade.openAccount" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-1461494111">AccountManageFacade.openAccount</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="计算共有多少个币种" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="计算共有多少个币种" enabled="true">
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String[] currencies = &quot;${currencies}&quot;.split(&quot;;&quot;);
int currenciesLength = currencies.length;
vars.put(&quot;currenciesLength&quot;, currenciesLength+&quot;&quot;);
log.info(&quot;currenciesLength：{}&quot;,currenciesLength);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${currenciesLength}</stringProp>
              </LoopController>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="openWalletAccount-fe.t_account_info-req" enabled="true">
                  <stringProp name="delimiter">,</stringProp>
                  <stringProp name="fileEncoding">UTF-8</stringProp>
                  <stringProp name="filename">../../testdata/dubboTest-cfp-acct/openWalletAccount-fe.t_account_info-req.csv</stringProp>
                  <boolProp name="ignoreFirstLine">false</boolProp>
                  <boolProp name="quotedData">true</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="variableNames"></stringProp>
                </CSVDataSet>
                <hashTree/>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="openWalletAccount-fe.t_account_info-resp" enabled="true">
                  <stringProp name="delimiter">,</stringProp>
                  <stringProp name="fileEncoding">UTF-8</stringProp>
                  <stringProp name="filename">../../testdata/dubboTest-cfp-acct/openWalletAccount-fe.t_account_info-resp.csv</stringProp>
                  <boolProp name="ignoreFirstLine">false</boolProp>
                  <boolProp name="quotedData">true</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="variableNames"></stringProp>
                </CSVDataSet>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="fe.T_ACCOUNT_INFO 查询" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="869052411">测试计划</stringProp>
                    <stringProp name="869052411">测试计划</stringProp>
                    <stringProp name="1472724931">fe.T_ACCOUNT_INFO 查询</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="openWalletAccount-fe.t_account_balance-req" enabled="true">
                  <stringProp name="delimiter">,</stringProp>
                  <stringProp name="fileEncoding">UTF-8</stringProp>
                  <stringProp name="filename">../../testdata/dubboTest-cfp-acct/openWalletAccount-fe.t_account_balance-req.csv</stringProp>
                  <boolProp name="ignoreFirstLine">false</boolProp>
                  <boolProp name="quotedData">true</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="variableNames"></stringProp>
                </CSVDataSet>
                <hashTree/>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="openWalletAccount-fe.t_account_balance-resp" enabled="true">
                  <stringProp name="delimiter">,</stringProp>
                  <stringProp name="fileEncoding">UTF-8</stringProp>
                  <stringProp name="filename">../../testdata/dubboTest-cfp-acct/openWalletAccount-fe.t_account_balance-resp.csv</stringProp>
                  <boolProp name="ignoreFirstLine">false</boolProp>
                  <boolProp name="quotedData">true</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="variableNames"></stringProp>
                </CSVDataSet>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="fe.T_ACCOUNT_BALANCE 查询" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="869052411">测试计划</stringProp>
                    <stringProp name="869052411">测试计划</stringProp>
                    <stringProp name="-486136435">fe.T_ACCOUNT_BALANCE 查询</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="记账申请" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="店铺入账" enabled="true"/>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="生成requestNo" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String requestNo = &quot;${__time(yyyyMMddHHmmssSSS,)}${__RandomString(4,0123456789,)}&quot;;
vars.put(&quot;requestNo&quot;, requestNo);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.apply 店铺入账" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="735758514">
                      <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="93029230">apply</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountOrderDTO;
import com.ipaylinks.acct.facade.dto.AccountingApplyDTO;
import com.ipaylinks.acct.facade.enums.AccountingFlagEnum;
	
	SingleRequest&lt;AccountingApplyDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingApplyDTO accountingApplyDTO=new AccountingApplyDTO();

	accountingApplyDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingApplyDTO.setRequestType(&quot;TX_COMMON&quot;);
	accountingApplyDTO.setBzOrderNo(&quot;biz${requestNo}&quot;);
	accountingApplyDTO.setBzType(&quot;CHANNEL_IN_ACCT&quot;);
	accountingApplyDTO.setTxOrderNo(&quot;txn${requestNo}&quot;);
	accountingApplyDTO.setTxType(&quot;1001&quot;);
	List&lt;AccountOrderDTO&gt; accountOrderDTOList=new ArrayList&lt;&gt;();
	AccountOrderDTO accountOrderDTO=new AccountOrderDTO();
	accountOrderDTO.setAccountingFlag(AccountingFlagEnum.INCOME.getCode());
	accountOrderDTO.setAccountNo(&quot;320299120000001520840000000009527&quot;);
	accountOrderDTO.setAmount(new BigDecimal(&quot;30000.88&quot;));
	accountOrderDTO.setCurrency(&quot;USD&quot;);
	accountOrderDTO.setTransferType(&quot;CHANNEL_IN_ACCT&quot;);
	accountOrderDTO.setRemark(&quot;test CHANNEL_IN_ACCT&quot;);
		Map&lt;String,String&gt; extendDataMap=new HashMap&lt;&gt;();
		extendDataMap.put(&quot;inAccountNo&quot;,&quot;11111111&quot;);
	accountOrderDTO.setExtendDataMap(extendDataMap);
	accountOrderDTOList.add(accountOrderDTO);
	
	AccountOrderDTO accountOrderDTO2=new AccountOrderDTO();
	accountOrderDTO2.setAccountingFlag(AccountingFlagEnum.INCOME.getCode());
	accountOrderDTO2.setAccountNo(&quot;320299120000001520840000000009528&quot;);
	accountOrderDTO2.setAmount(new BigDecimal(&quot;200000&quot;));
	accountOrderDTO2.setCurrency(&quot;USD&quot;);
	accountOrderDTO2.setTransferType(&quot;CHANNEL_IN_ACCT&quot;);
	accountOrderDTO2.setRemark(&quot;test&quot;);
		Map&lt;String,String&gt; extendDataMap2=new HashMap&lt;&gt;();
		extendDataMap2.put(&quot;inAccountNo&quot;,&quot;22222222&quot;);
	accountOrderDTO2.setExtendDataMap(extendDataMap2);
	accountOrderDTOList.add(accountOrderDTO2);
	
	accountingApplyDTO.setAccountOrderDTOs(accountOrderDTOList);
	
	req.setRequestObj(accountingApplyDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="资金冻结" enabled="true"/>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="生成requestNo" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String requestNo = &quot;${__time(yyyyMMddHHmmssSSS,)}${__RandomString(4,0123456789,)}&quot;;
vars.put(&quot;requestNo&quot;, requestNo);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.apply 资金冻结" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="735758514">
                      <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="93029230">apply</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountOrderDTO;
import com.ipaylinks.acct.facade.dto.AccountingApplyDTO;
import com.ipaylinks.acct.facade.enums.AccountingFlagEnum;
	
	SingleRequest&lt;AccountingApplyDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingApplyDTO accountingApplyDTO=new AccountingApplyDTO();
	accountingApplyDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingApplyDTO.setRequestType(&quot;TX_COMMON&quot;);
	accountingApplyDTO.setBzOrderNo(&quot;biz${requestNo}&quot;);
	accountingApplyDTO.setBzType(&quot;FREEZE&quot;);
	accountingApplyDTO.setTxOrderNo(&quot;txn${requestNo}&quot;);
	accountingApplyDTO.setTxType(&quot;2001&quot;);
	List&lt;AccountOrderDTO&gt; accountOrderDTOList=new ArrayList&lt;&gt;();
	AccountOrderDTO accountOrderDTO=new AccountOrderDTO();
	accountOrderDTO.setAccountingFlag(AccountingFlagEnum.PAY.getCode());
	accountOrderDTO.setAccountNo(&quot;320299120000001520840000000009527&quot;);
	accountOrderDTO.setAmount(new BigDecimal(&quot;30000.88&quot;));
	accountOrderDTO.setCurrency(&quot;USD&quot;);
	accountOrderDTO.setTransferType(&quot;FREEZE&quot;);
	accountOrderDTO.setRemark(&quot;test FREEZE&quot;);
	accountOrderDTOList.add(accountOrderDTO);
	
	accountingApplyDTO.setAccountOrderDTOs(accountOrderDTOList);
	
	req.setRequestObj(accountingApplyDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="资金解冻" enabled="true"/>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="生成requestNo" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String requestNo = &quot;${__time(yyyyMMddHHmmssSSS,)}${__RandomString(4,0123456789,)}&quot;;
vars.put(&quot;requestNo&quot;, requestNo);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.apply 资金解冻" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="735758514">
                      <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="93029230">apply</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountOrderDTO;
import com.ipaylinks.acct.facade.dto.AccountingApplyDTO;
import com.ipaylinks.acct.facade.enums.AccountingFlagEnum;
	
	SingleRequest&lt;AccountingApplyDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingApplyDTO accountingApplyDTO=new AccountingApplyDTO();
	accountingApplyDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingApplyDTO.setRequestType(&quot;TX_COMMON&quot;);
	accountingApplyDTO.setBzOrderNo(&quot;biz${requestNo}&quot;);
	accountingApplyDTO.setBzType(&quot;UNFREEZE&quot;);
	accountingApplyDTO.setTxOrderNo(&quot;txn${requestNo}&quot;);
	accountingApplyDTO.setTxType(&quot;2001&quot;);
	List&lt;AccountOrderDTO&gt; accountOrderDTOList=new ArrayList&lt;&gt;();
	AccountOrderDTO accountOrderDTO=new AccountOrderDTO();
	accountOrderDTO.setAccountingFlag(AccountingFlagEnum.INCOME.getCode());
	accountOrderDTO.setAccountNo(&quot;320299120000001520840000000009527&quot;);
	accountOrderDTO.setAmount(new BigDecimal(&quot;30000.88&quot;));
	accountOrderDTO.setCurrency(&quot;USD&quot;);
	accountOrderDTO.setTransferType(&quot;UNFREEZE&quot;);
	accountOrderDTO.setRemark(&quot;test UNFREEZE&quot;);
	accountOrderDTOList.add(accountOrderDTO);
	
	accountingApplyDTO.setAccountOrderDTOs(accountOrderDTOList);
	
	req.setRequestObj(accountingApplyDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="店铺提现" enabled="true"/>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="生成requestNo" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String requestNo = &quot;${__time(yyyyMMddHHmmssSSS,)}${__RandomString(4,0123456789,)}&quot;;
vars.put(&quot;requestNo&quot;, requestNo);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.apply 店铺提现" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="735758514">
                      <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="93029230">apply</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountOrderDTO;
import com.ipaylinks.acct.facade.dto.AccountingApplyDTO;
import com.ipaylinks.acct.facade.enums.AccountingFlagEnum;
	
	SingleRequest&lt;AccountingApplyDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingApplyDTO accountingApplyDTO=new AccountingApplyDTO();
	
	accountingApplyDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingApplyDTO.setRequestType(&quot;TX_COMMON&quot;);
	accountingApplyDTO.setBzOrderNo(&quot;biz${requestNo}&quot;);
	accountingApplyDTO.setBzType(&quot;SHOP_WITHDRAW&quot;);
	accountingApplyDTO.setTxOrderNo(&quot;txn${requestNo}&quot;);
	accountingApplyDTO.setTxType(&quot;3001&quot;);
	List&lt;AccountOrderDTO&gt; accountOrderDTOList=new ArrayList&lt;&gt;();
	AccountOrderDTO accountOrderDTO=new AccountOrderDTO();
	accountOrderDTO.setAccountingFlag(AccountingFlagEnum.PAY.getCode());
	accountOrderDTO.setAccountNo(&quot;320299120000001520840000000009527&quot;);
	accountOrderDTO.setAmount(new BigDecimal(&quot;30000.88&quot;));
	accountOrderDTO.setCurrency(&quot;USD&quot;);
	accountOrderDTO.setTransferType(&quot;SHOP_WITHDRAW&quot;);
	accountOrderDTO.setRemark(&quot;test SHOP_WITHDRAW&quot;);
		Map&lt;String,String&gt; extendDataMap=new HashMap&lt;&gt;();
		extendDataMap.put(&quot;memberCode&quot;,&quot;20000001520&quot;);
		extendDataMap.put(&quot;shopName&quot;,&quot;9527&quot;);
		extendDataMap.put(&quot;withdrawId&quot;,&quot;withdrawId${requestNo}&quot;);
		extendDataMap.put(&quot;bankName&quot;,&quot;中国银行&quot;);
		extendDataMap.put(&quot;bankAcctNo&quot;,&quot;6217880800001810391&quot;);
	accountOrderDTO.setExtendDataMap(extendDataMap);
	accountOrderDTOList.add(accountOrderDTO);

	AccountOrderDTO accountOrderDTO2=new AccountOrderDTO();
	accountOrderDTO2.setAccountingFlag(AccountingFlagEnum.PAY.getCode());
	accountOrderDTO2.setAccountNo(&quot;320299120000001520840000000009528&quot;);
	accountOrderDTO2.setAmount(new BigDecimal(&quot;200000&quot;));
	accountOrderDTO2.setCurrency(&quot;USD&quot;);
	accountOrderDTO2.setTransferType(&quot;SHOP_WITHDRAW&quot;);
	accountOrderDTO2.setRemark(&quot;test SHOP_WITHDRAW&quot;);
		Map&lt;String,String&gt; extendDataMap2=new HashMap&lt;&gt;();
		extendDataMap2.put(&quot;memberCode&quot;,&quot;20000001520&quot;);
		extendDataMap2.put(&quot;shopName&quot;,&quot;9528&quot;);
		extendDataMap2.put(&quot;withdrawId&quot;,&quot;withdrawId${requestNo}&quot;);
		extendDataMap2.put(&quot;bankName&quot;,&quot;中国银行&quot;);
		extendDataMap2.put(&quot;bankAcctNo&quot;,&quot;6217880800001810391&quot;);
	accountOrderDTO2.setExtendDataMap(extendDataMap2);
	accountOrderDTOList.add(accountOrderDTO2);
	
	accountingApplyDTO.setAccountOrderDTOs(accountOrderDTOList);
	
	req.setRequestObj(accountingApplyDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="记账回滚" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="店铺入账，资金回冲" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="店铺入账" enabled="true"/>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="生成requestNo" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String requestNo = &quot;${__time(yyyyMMddHHmmssSSS,)}${__RandomString(4,0123456789,)}&quot;;
vars.put(&quot;requestNo&quot;, requestNo);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">2</stringProp>
              </LoopController>
              <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.apply 店铺入账" enabled="true">
                  <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="url" elementType="Argument">
                        <stringProp name="Argument.name">url</stringProp>
                        <stringProp name="Argument.value">${url}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="registryConfigs" elementType="Argument">
                        <stringProp name="Argument.name">registryConfigs</stringProp>
                        <stringProp name="Argument.value">${registryConfigs}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="monitorConfig" elementType="Argument">
                        <stringProp name="Argument.name">monitorConfig</stringProp>
                        <stringProp name="Argument.value">${monitorConfig}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="interfaceName" elementType="Argument">
                        <stringProp name="Argument.name">interfaceName</stringProp>
                        <stringProp name="Argument.value">${interfaceName}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="Argument">
                        <stringProp name="Argument.name">version</stringProp>
                        <stringProp name="Argument.value">${version}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="methodConfigs" elementType="Argument">
                        <stringProp name="Argument.name">methodConfigs</stringProp>
                        <stringProp name="Argument.value">${methodConfigs}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="methodName" elementType="Argument">
                        <stringProp name="Argument.name">methodName</stringProp>
                        <stringProp name="Argument.value">${methodName}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="methodParameters" elementType="Argument">
                        <stringProp name="Argument.name">methodParameters</stringProp>
                        <stringProp name="Argument.value">${methodParameters}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
                </JavaSampler>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="515839844">interfaceName</stringProp>
                      <stringProp name="351608024">version</stringProp>
                      <stringProp name="-723163380">methodName</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="735758514">
                        <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                        <stringProp name="48563">1.0</stringProp>
                        <stringProp name="93029230">apply</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="116079">url</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="-825906266">
                        <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountOrderDTO;
import com.ipaylinks.acct.facade.dto.AccountingApplyDTO;
import com.ipaylinks.acct.facade.enums.AccountingFlagEnum;
	
	SingleRequest&lt;AccountingApplyDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingApplyDTO accountingApplyDTO=new AccountingApplyDTO();

	accountingApplyDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingApplyDTO.setRequestType(&quot;TX_COMMON&quot;);
	accountingApplyDTO.setBzOrderNo(&quot;biz${requestNo}&quot;);
	accountingApplyDTO.setBzType(&quot;CHANNEL_IN_ACCT&quot;);
	accountingApplyDTO.setTxOrderNo(&quot;txn${requestNo}&quot;);
	accountingApplyDTO.setTxType(&quot;1001&quot;);
	List&lt;AccountOrderDTO&gt; accountOrderDTOList=new ArrayList&lt;&gt;();
	AccountOrderDTO accountOrderDTO=new AccountOrderDTO();
	accountOrderDTO.setAccountingFlag(AccountingFlagEnum.INCOME.getCode());
	accountOrderDTO.setAccountNo(&quot;320299120000001520840000000009527&quot;);
	accountOrderDTO.setAmount(new BigDecimal(&quot;30000.88&quot;));
	accountOrderDTO.setCurrency(&quot;USD&quot;);
	accountOrderDTO.setTransferType(&quot;CHANNEL_IN_ACCT&quot;);
	accountOrderDTO.setRemark(&quot;test CHANNEL_IN_ACCT&quot;);
		Map&lt;String,String&gt; extendDataMap=new HashMap&lt;&gt;();
		extendDataMap.put(&quot;inAccountNo&quot;,&quot;11111111&quot;);
	accountOrderDTO.setExtendDataMap(extendDataMap);
	accountOrderDTOList.add(accountOrderDTO);
	
	AccountOrderDTO accountOrderDTO2=new AccountOrderDTO();
	accountOrderDTO2.setAccountingFlag(AccountingFlagEnum.INCOME.getCode());
	accountOrderDTO2.setAccountNo(&quot;320299120000001520840000000009528&quot;);
	accountOrderDTO2.setAmount(new BigDecimal(&quot;200000&quot;));
	accountOrderDTO2.setCurrency(&quot;USD&quot;);
	accountOrderDTO2.setTransferType(&quot;CHANNEL_IN_ACCT&quot;);
	accountOrderDTO2.setRemark(&quot;test&quot;);
		Map&lt;String,String&gt; extendDataMap2=new HashMap&lt;&gt;();
		extendDataMap2.put(&quot;inAccountNo&quot;,&quot;22222222&quot;);
	accountOrderDTO2.setExtendDataMap(extendDataMap2);
	accountOrderDTOList.add(accountOrderDTO2);
	
	accountingApplyDTO.setAccountOrderDTOs(accountOrderDTOList);
	
	req.setRequestObj(accountingApplyDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.rollback 店铺入账，资金回冲" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-395345995">
                      <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="-259719452">rollback</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountingRollbackDTO;
	
	SingleRequest&lt;AccountingRollbackDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingRollbackDTO accountingRollbackDTO=new AccountingRollbackDTO();
	accountingRollbackDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingRollbackDTO.setRequestType(&quot;TX_COMMON&quot;);
	
	req.setRequestObj(accountingRollbackDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="店铺入账" enabled="true"/>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="生成requestNo" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String requestNo = &quot;${__time(yyyyMMddHHmmssSSS,)}${__RandomString(4,0123456789,)}&quot;;
vars.put(&quot;requestNo&quot;, requestNo);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.apply 店铺入账" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="735758514">
                      <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="93029230">apply</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountOrderDTO;
import com.ipaylinks.acct.facade.dto.AccountingApplyDTO;
import com.ipaylinks.acct.facade.enums.AccountingFlagEnum;
	
	SingleRequest&lt;AccountingApplyDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingApplyDTO accountingApplyDTO=new AccountingApplyDTO();

	accountingApplyDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingApplyDTO.setRequestType(&quot;TX_COMMON&quot;);
	accountingApplyDTO.setBzOrderNo(&quot;biz${requestNo}&quot;);
	accountingApplyDTO.setBzType(&quot;CHANNEL_IN_ACCT&quot;);
	accountingApplyDTO.setTxOrderNo(&quot;txn${requestNo}&quot;);
	accountingApplyDTO.setTxType(&quot;1001&quot;);
	List&lt;AccountOrderDTO&gt; accountOrderDTOList=new ArrayList&lt;&gt;();
	AccountOrderDTO accountOrderDTO=new AccountOrderDTO();
	accountOrderDTO.setAccountingFlag(AccountingFlagEnum.INCOME.getCode());
	accountOrderDTO.setAccountNo(&quot;320299120000001520840000000009527&quot;);
	accountOrderDTO.setAmount(new BigDecimal(&quot;30000.88&quot;));
	accountOrderDTO.setCurrency(&quot;USD&quot;);
	accountOrderDTO.setTransferType(&quot;CHANNEL_IN_ACCT&quot;);
	accountOrderDTO.setRemark(&quot;test CHANNEL_IN_ACCT&quot;);
		Map&lt;String,String&gt; extendDataMap=new HashMap&lt;&gt;();
		extendDataMap.put(&quot;inAccountNo&quot;,&quot;11111111&quot;);
	accountOrderDTO.setExtendDataMap(extendDataMap);
	accountOrderDTOList.add(accountOrderDTO);
	
	AccountOrderDTO accountOrderDTO2=new AccountOrderDTO();
	accountOrderDTO2.setAccountingFlag(AccountingFlagEnum.INCOME.getCode());
	accountOrderDTO2.setAccountNo(&quot;320299120000001520840000000009528&quot;);
	accountOrderDTO2.setAmount(new BigDecimal(&quot;200000&quot;));
	accountOrderDTO2.setCurrency(&quot;USD&quot;);
	accountOrderDTO2.setTransferType(&quot;CHANNEL_IN_ACCT&quot;);
	accountOrderDTO2.setRemark(&quot;test&quot;);
		Map&lt;String,String&gt; extendDataMap2=new HashMap&lt;&gt;();
		extendDataMap2.put(&quot;inAccountNo&quot;,&quot;22222222&quot;);
	accountOrderDTO2.setExtendDataMap(extendDataMap2);
	accountOrderDTOList.add(accountOrderDTO2);
	
	accountingApplyDTO.setAccountOrderDTOs(accountOrderDTOList);
	
	req.setRequestObj(accountingApplyDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="资金冻结，资金回冲" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="资金冻结" enabled="true"/>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="生成requestNo" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String requestNo = &quot;${__time(yyyyMMddHHmmssSSS,)}${__RandomString(4,0123456789,)}&quot;;
vars.put(&quot;requestNo&quot;, requestNo);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">2</stringProp>
              </LoopController>
              <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.apply 资金冻结" enabled="true">
                  <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="url" elementType="Argument">
                        <stringProp name="Argument.name">url</stringProp>
                        <stringProp name="Argument.value">${url}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="registryConfigs" elementType="Argument">
                        <stringProp name="Argument.name">registryConfigs</stringProp>
                        <stringProp name="Argument.value">${registryConfigs}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="monitorConfig" elementType="Argument">
                        <stringProp name="Argument.name">monitorConfig</stringProp>
                        <stringProp name="Argument.value">${monitorConfig}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="interfaceName" elementType="Argument">
                        <stringProp name="Argument.name">interfaceName</stringProp>
                        <stringProp name="Argument.value">${interfaceName}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="Argument">
                        <stringProp name="Argument.name">version</stringProp>
                        <stringProp name="Argument.value">${version}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="methodConfigs" elementType="Argument">
                        <stringProp name="Argument.name">methodConfigs</stringProp>
                        <stringProp name="Argument.value">${methodConfigs}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="methodName" elementType="Argument">
                        <stringProp name="Argument.name">methodName</stringProp>
                        <stringProp name="Argument.value">${methodName}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="methodParameters" elementType="Argument">
                        <stringProp name="Argument.name">methodParameters</stringProp>
                        <stringProp name="Argument.value">${methodParameters}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
                </JavaSampler>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="515839844">interfaceName</stringProp>
                      <stringProp name="351608024">version</stringProp>
                      <stringProp name="-723163380">methodName</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="735758514">
                        <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                        <stringProp name="48563">1.0</stringProp>
                        <stringProp name="93029230">apply</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="116079">url</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="-825906266">
                        <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountOrderDTO;
import com.ipaylinks.acct.facade.dto.AccountingApplyDTO;
import com.ipaylinks.acct.facade.enums.AccountingFlagEnum;
	
	SingleRequest&lt;AccountingApplyDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingApplyDTO accountingApplyDTO=new AccountingApplyDTO();
	accountingApplyDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingApplyDTO.setRequestType(&quot;TX_COMMON&quot;);
	accountingApplyDTO.setBzOrderNo(&quot;biz${requestNo}&quot;);
	accountingApplyDTO.setBzType(&quot;FREEZE&quot;);
	accountingApplyDTO.setTxOrderNo(&quot;txn${requestNo}&quot;);
	accountingApplyDTO.setTxType(&quot;2001&quot;);
	List&lt;AccountOrderDTO&gt; accountOrderDTOList=new ArrayList&lt;&gt;();
	AccountOrderDTO accountOrderDTO=new AccountOrderDTO();
	accountOrderDTO.setAccountingFlag(AccountingFlagEnum.PAY.getCode());
	accountOrderDTO.setAccountNo(&quot;320299120000001520840000000009527&quot;);
	accountOrderDTO.setAmount(new BigDecimal(&quot;30000.88&quot;));
	accountOrderDTO.setCurrency(&quot;USD&quot;);
	accountOrderDTO.setTransferType(&quot;FREEZE&quot;);
	accountOrderDTO.setRemark(&quot;test FREEZE&quot;);
	accountOrderDTOList.add(accountOrderDTO);
	
	accountingApplyDTO.setAccountOrderDTOs(accountOrderDTOList);
	
	req.setRequestObj(accountingApplyDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.rollback 资金冻结，资金回冲" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-395345995">
                      <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="-259719452">rollback</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountingRollbackDTO;
	
	SingleRequest&lt;AccountingRollbackDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingRollbackDTO accountingRollbackDTO=new AccountingRollbackDTO();
	accountingRollbackDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingRollbackDTO.setRequestType(&quot;TX_COMMON&quot;);
	
	req.setRequestObj(accountingRollbackDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="资金冻结" enabled="true"/>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="生成requestNo" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String requestNo = &quot;${__time(yyyyMMddHHmmssSSS,)}${__RandomString(4,0123456789,)}&quot;;
vars.put(&quot;requestNo&quot;, requestNo);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.apply 资金冻结" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="735758514">
                      <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="93029230">apply</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountOrderDTO;
import com.ipaylinks.acct.facade.dto.AccountingApplyDTO;
import com.ipaylinks.acct.facade.enums.AccountingFlagEnum;
	
	SingleRequest&lt;AccountingApplyDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingApplyDTO accountingApplyDTO=new AccountingApplyDTO();
	accountingApplyDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingApplyDTO.setRequestType(&quot;TX_COMMON&quot;);
	accountingApplyDTO.setBzOrderNo(&quot;biz${requestNo}&quot;);
	accountingApplyDTO.setBzType(&quot;FREEZE&quot;);
	accountingApplyDTO.setTxOrderNo(&quot;txn${requestNo}&quot;);
	accountingApplyDTO.setTxType(&quot;2001&quot;);
	List&lt;AccountOrderDTO&gt; accountOrderDTOList=new ArrayList&lt;&gt;();
	AccountOrderDTO accountOrderDTO=new AccountOrderDTO();
	accountOrderDTO.setAccountingFlag(AccountingFlagEnum.PAY.getCode());
	accountOrderDTO.setAccountNo(&quot;320299120000001520840000000009527&quot;);
	accountOrderDTO.setAmount(new BigDecimal(&quot;30000.88&quot;));
	accountOrderDTO.setCurrency(&quot;USD&quot;);
	accountOrderDTO.setTransferType(&quot;FREEZE&quot;);
	accountOrderDTO.setRemark(&quot;test FREEZE&quot;);
	accountOrderDTOList.add(accountOrderDTO);
	
	accountingApplyDTO.setAccountOrderDTOs(accountOrderDTOList);
	
	req.setRequestObj(accountingApplyDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="资金解冻，资金回冲" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="资金解冻" enabled="true"/>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="生成requestNo" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String requestNo = &quot;${__time(yyyyMMddHHmmssSSS,)}${__RandomString(4,0123456789,)}&quot;;
vars.put(&quot;requestNo&quot;, requestNo);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">2</stringProp>
              </LoopController>
              <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.apply 资金解冻" enabled="true">
                  <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="url" elementType="Argument">
                        <stringProp name="Argument.name">url</stringProp>
                        <stringProp name="Argument.value">${url}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="registryConfigs" elementType="Argument">
                        <stringProp name="Argument.name">registryConfigs</stringProp>
                        <stringProp name="Argument.value">${registryConfigs}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="monitorConfig" elementType="Argument">
                        <stringProp name="Argument.name">monitorConfig</stringProp>
                        <stringProp name="Argument.value">${monitorConfig}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="interfaceName" elementType="Argument">
                        <stringProp name="Argument.name">interfaceName</stringProp>
                        <stringProp name="Argument.value">${interfaceName}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="Argument">
                        <stringProp name="Argument.name">version</stringProp>
                        <stringProp name="Argument.value">${version}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="methodConfigs" elementType="Argument">
                        <stringProp name="Argument.name">methodConfigs</stringProp>
                        <stringProp name="Argument.value">${methodConfigs}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="methodName" elementType="Argument">
                        <stringProp name="Argument.name">methodName</stringProp>
                        <stringProp name="Argument.value">${methodName}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="methodParameters" elementType="Argument">
                        <stringProp name="Argument.name">methodParameters</stringProp>
                        <stringProp name="Argument.value">${methodParameters}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
                </JavaSampler>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="515839844">interfaceName</stringProp>
                      <stringProp name="351608024">version</stringProp>
                      <stringProp name="-723163380">methodName</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="735758514">
                        <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                        <stringProp name="48563">1.0</stringProp>
                        <stringProp name="93029230">apply</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="116079">url</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="-825906266">
                        <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountOrderDTO;
import com.ipaylinks.acct.facade.dto.AccountingApplyDTO;
import com.ipaylinks.acct.facade.enums.AccountingFlagEnum;
	
	SingleRequest&lt;AccountingApplyDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingApplyDTO accountingApplyDTO=new AccountingApplyDTO();
	accountingApplyDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingApplyDTO.setRequestType(&quot;TX_COMMON&quot;);
	accountingApplyDTO.setBzOrderNo(&quot;biz${requestNo}&quot;);
	accountingApplyDTO.setBzType(&quot;UNFREEZE&quot;);
	accountingApplyDTO.setTxOrderNo(&quot;txn${requestNo}&quot;);
	accountingApplyDTO.setTxType(&quot;2001&quot;);
	List&lt;AccountOrderDTO&gt; accountOrderDTOList=new ArrayList&lt;&gt;();
	AccountOrderDTO accountOrderDTO=new AccountOrderDTO();
	accountOrderDTO.setAccountingFlag(AccountingFlagEnum.INCOME.getCode());
	accountOrderDTO.setAccountNo(&quot;320299120000001520840000000009527&quot;);
	accountOrderDTO.setAmount(new BigDecimal(&quot;30000.88&quot;));
	accountOrderDTO.setCurrency(&quot;USD&quot;);
	accountOrderDTO.setTransferType(&quot;UNFREEZE&quot;);
	accountOrderDTO.setRemark(&quot;test UNFREEZE&quot;);
	accountOrderDTOList.add(accountOrderDTO);
	
	accountingApplyDTO.setAccountOrderDTOs(accountOrderDTOList);
	
	req.setRequestObj(accountingApplyDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.rollback 资金解冻，资金回冲" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-395345995">
                      <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="-259719452">rollback</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountingRollbackDTO;
	
	SingleRequest&lt;AccountingRollbackDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingRollbackDTO accountingRollbackDTO=new AccountingRollbackDTO();
	accountingRollbackDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingRollbackDTO.setRequestType(&quot;TX_COMMON&quot;);
	
	req.setRequestObj(accountingRollbackDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="资金解冻" enabled="true"/>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="生成requestNo" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String requestNo = &quot;${__time(yyyyMMddHHmmssSSS,)}${__RandomString(4,0123456789,)}&quot;;
vars.put(&quot;requestNo&quot;, requestNo);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.apply 资金解冻" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="735758514">
                      <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="93029230">apply</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountOrderDTO;
import com.ipaylinks.acct.facade.dto.AccountingApplyDTO;
import com.ipaylinks.acct.facade.enums.AccountingFlagEnum;
	
	SingleRequest&lt;AccountingApplyDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingApplyDTO accountingApplyDTO=new AccountingApplyDTO();
	accountingApplyDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingApplyDTO.setRequestType(&quot;TX_COMMON&quot;);
	accountingApplyDTO.setBzOrderNo(&quot;biz${requestNo}&quot;);
	accountingApplyDTO.setBzType(&quot;UNFREEZE&quot;);
	accountingApplyDTO.setTxOrderNo(&quot;txn${requestNo}&quot;);
	accountingApplyDTO.setTxType(&quot;2001&quot;);
	List&lt;AccountOrderDTO&gt; accountOrderDTOList=new ArrayList&lt;&gt;();
	AccountOrderDTO accountOrderDTO=new AccountOrderDTO();
	accountOrderDTO.setAccountingFlag(AccountingFlagEnum.INCOME.getCode());
	accountOrderDTO.setAccountNo(&quot;320299120000001520840000000009527&quot;);
	accountOrderDTO.setAmount(new BigDecimal(&quot;30000.88&quot;));
	accountOrderDTO.setCurrency(&quot;USD&quot;);
	accountOrderDTO.setTransferType(&quot;UNFREEZE&quot;);
	accountOrderDTO.setRemark(&quot;test UNFREEZE&quot;);
	accountOrderDTOList.add(accountOrderDTO);
	
	accountingApplyDTO.setAccountOrderDTOs(accountOrderDTOList);
	
	req.setRequestObj(accountingApplyDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="店铺提现，资金回冲" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="店铺提现" enabled="true"/>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="生成requestNo" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String requestNo = &quot;${__time(yyyyMMddHHmmssSSS,)}${__RandomString(4,0123456789,)}&quot;;
vars.put(&quot;requestNo&quot;, requestNo);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">2</stringProp>
              </LoopController>
              <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.apply 店铺提现" enabled="true">
                  <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="url" elementType="Argument">
                        <stringProp name="Argument.name">url</stringProp>
                        <stringProp name="Argument.value">${url}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="registryConfigs" elementType="Argument">
                        <stringProp name="Argument.name">registryConfigs</stringProp>
                        <stringProp name="Argument.value">${registryConfigs}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="monitorConfig" elementType="Argument">
                        <stringProp name="Argument.name">monitorConfig</stringProp>
                        <stringProp name="Argument.value">${monitorConfig}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="interfaceName" elementType="Argument">
                        <stringProp name="Argument.name">interfaceName</stringProp>
                        <stringProp name="Argument.value">${interfaceName}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="Argument">
                        <stringProp name="Argument.name">version</stringProp>
                        <stringProp name="Argument.value">${version}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="methodConfigs" elementType="Argument">
                        <stringProp name="Argument.name">methodConfigs</stringProp>
                        <stringProp name="Argument.value">${methodConfigs}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="methodName" elementType="Argument">
                        <stringProp name="Argument.name">methodName</stringProp>
                        <stringProp name="Argument.value">${methodName}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="methodParameters" elementType="Argument">
                        <stringProp name="Argument.name">methodParameters</stringProp>
                        <stringProp name="Argument.value">${methodParameters}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
                </JavaSampler>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="515839844">interfaceName</stringProp>
                      <stringProp name="351608024">version</stringProp>
                      <stringProp name="-723163380">methodName</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="735758514">
                        <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                        <stringProp name="48563">1.0</stringProp>
                        <stringProp name="93029230">apply</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="116079">url</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="-825906266">
                        <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountOrderDTO;
import com.ipaylinks.acct.facade.dto.AccountingApplyDTO;
import com.ipaylinks.acct.facade.enums.AccountingFlagEnum;
	
	SingleRequest&lt;AccountingApplyDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingApplyDTO accountingApplyDTO=new AccountingApplyDTO();
	
	accountingApplyDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingApplyDTO.setRequestType(&quot;TX_COMMON&quot;);
	accountingApplyDTO.setBzOrderNo(&quot;biz${requestNo}&quot;);
	accountingApplyDTO.setBzType(&quot;SHOP_WITHDRAW&quot;);
	accountingApplyDTO.setTxOrderNo(&quot;txn${requestNo}&quot;);
	accountingApplyDTO.setTxType(&quot;3001&quot;);
	List&lt;AccountOrderDTO&gt; accountOrderDTOList=new ArrayList&lt;&gt;();
	AccountOrderDTO accountOrderDTO=new AccountOrderDTO();
	accountOrderDTO.setAccountingFlag(AccountingFlagEnum.PAY.getCode());
	accountOrderDTO.setAccountNo(&quot;320299120000001520840000000009527&quot;);
	accountOrderDTO.setAmount(new BigDecimal(&quot;30000.88&quot;));
	accountOrderDTO.setCurrency(&quot;USD&quot;);
	accountOrderDTO.setTransferType(&quot;SHOP_WITHDRAW&quot;);
	accountOrderDTO.setRemark(&quot;test SHOP_WITHDRAW&quot;);
		Map&lt;String,String&gt; extendDataMap=new HashMap&lt;&gt;();
		extendDataMap.put(&quot;memberCode&quot;,&quot;20000001520&quot;);
		extendDataMap.put(&quot;shopName&quot;,&quot;9527&quot;);
		extendDataMap.put(&quot;withdrawId&quot;,&quot;withdrawId${requestNo}&quot;);
		extendDataMap.put(&quot;bankName&quot;,&quot;中国银行&quot;);
		extendDataMap.put(&quot;bankAcctNo&quot;,&quot;6217880800001810391&quot;);
	accountOrderDTO.setExtendDataMap(extendDataMap);
	accountOrderDTOList.add(accountOrderDTO);

	AccountOrderDTO accountOrderDTO2=new AccountOrderDTO();
	accountOrderDTO2.setAccountingFlag(AccountingFlagEnum.PAY.getCode());
	accountOrderDTO2.setAccountNo(&quot;320299120000001520840000000009528&quot;);
	accountOrderDTO2.setAmount(new BigDecimal(&quot;200000&quot;));
	accountOrderDTO2.setCurrency(&quot;USD&quot;);
	accountOrderDTO2.setTransferType(&quot;SHOP_WITHDRAW&quot;);
	accountOrderDTO2.setRemark(&quot;test SHOP_WITHDRAW&quot;);
		Map&lt;String,String&gt; extendDataMap2=new HashMap&lt;&gt;();
		extendDataMap2.put(&quot;memberCode&quot;,&quot;20000001520&quot;);
		extendDataMap2.put(&quot;shopName&quot;,&quot;9528&quot;);
		extendDataMap2.put(&quot;withdrawId&quot;,&quot;withdrawId${requestNo}&quot;);
		extendDataMap2.put(&quot;bankName&quot;,&quot;中国银行&quot;);
		extendDataMap2.put(&quot;bankAcctNo&quot;,&quot;6217880800001810391&quot;);
	accountOrderDTO2.setExtendDataMap(extendDataMap2);
	accountOrderDTOList.add(accountOrderDTO2);
	
	accountingApplyDTO.setAccountOrderDTOs(accountOrderDTOList);
	
	req.setRequestObj(accountingApplyDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.rollback 店铺提现，资金回冲" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-395345995">
                      <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="-259719452">rollback</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountingRollbackDTO;
	
	SingleRequest&lt;AccountingRollbackDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingRollbackDTO accountingRollbackDTO=new AccountingRollbackDTO();
	accountingRollbackDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingRollbackDTO.setRequestType(&quot;TX_COMMON&quot;);
	
	req.setRequestObj(accountingRollbackDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="店铺提现" enabled="true"/>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="生成requestNo" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String requestNo = &quot;${__time(yyyyMMddHHmmssSSS,)}${__RandomString(4,0123456789,)}&quot;;
vars.put(&quot;requestNo&quot;, requestNo);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="幂等测试" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountingFacade.apply 店铺提现" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="url" elementType="Argument">
                      <stringProp name="Argument.name">url</stringProp>
                      <stringProp name="Argument.value">${url}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="registryConfigs" elementType="Argument">
                      <stringProp name="Argument.name">registryConfigs</stringProp>
                      <stringProp name="Argument.value">${registryConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="monitorConfig" elementType="Argument">
                      <stringProp name="Argument.name">monitorConfig</stringProp>
                      <stringProp name="Argument.value">${monitorConfig}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="interfaceName" elementType="Argument">
                      <stringProp name="Argument.name">interfaceName</stringProp>
                      <stringProp name="Argument.value">${interfaceName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="version" elementType="Argument">
                      <stringProp name="Argument.name">version</stringProp>
                      <stringProp name="Argument.value">${version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodConfigs" elementType="Argument">
                      <stringProp name="Argument.name">methodConfigs</stringProp>
                      <stringProp name="Argument.value">${methodConfigs}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodName" elementType="Argument">
                      <stringProp name="Argument.name">methodName</stringProp>
                      <stringProp name="Argument.value">${methodName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="methodParameters" elementType="Argument">
                      <stringProp name="Argument.name">methodParameters</stringProp>
                      <stringProp name="Argument.value">${methodParameters}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
              </JavaSampler>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="515839844">interfaceName</stringProp>
                    <stringProp name="351608024">version</stringProp>
                    <stringProp name="-723163380">methodName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="735758514">
                      <stringProp name="-1443009367">com.ipaylinks.acct.facade.AccountingFacade</stringProp>
                      <stringProp name="48563">1.0</stringProp>
                      <stringProp name="93029230">apply</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="116079">url</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-825906266">
                      <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountOrderDTO;
import com.ipaylinks.acct.facade.dto.AccountingApplyDTO;
import com.ipaylinks.acct.facade.enums.AccountingFlagEnum;
	
	SingleRequest&lt;AccountingApplyDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountingApplyDTO accountingApplyDTO=new AccountingApplyDTO();
	
	accountingApplyDTO.setRequestNo(&quot;${requestNo}&quot;);
	accountingApplyDTO.setRequestType(&quot;TX_COMMON&quot;);
	accountingApplyDTO.setBzOrderNo(&quot;biz${requestNo}&quot;);
	accountingApplyDTO.setBzType(&quot;SHOP_WITHDRAW&quot;);
	accountingApplyDTO.setTxOrderNo(&quot;txn${requestNo}&quot;);
	accountingApplyDTO.setTxType(&quot;3001&quot;);
	List&lt;AccountOrderDTO&gt; accountOrderDTOList=new ArrayList&lt;&gt;();
	AccountOrderDTO accountOrderDTO=new AccountOrderDTO();
	accountOrderDTO.setAccountingFlag(AccountingFlagEnum.PAY.getCode());
	accountOrderDTO.setAccountNo(&quot;320299120000001520840000000009527&quot;);
	accountOrderDTO.setAmount(new BigDecimal(&quot;30000.88&quot;));
	accountOrderDTO.setCurrency(&quot;USD&quot;);
	accountOrderDTO.setTransferType(&quot;SHOP_WITHDRAW&quot;);
	accountOrderDTO.setRemark(&quot;test SHOP_WITHDRAW&quot;);
		Map&lt;String,String&gt; extendDataMap=new HashMap&lt;&gt;();
		extendDataMap.put(&quot;memberCode&quot;,&quot;20000001520&quot;);
		extendDataMap.put(&quot;shopName&quot;,&quot;9527&quot;);
		extendDataMap.put(&quot;withdrawId&quot;,&quot;withdrawId${requestNo}&quot;);
		extendDataMap.put(&quot;bankName&quot;,&quot;中国银行&quot;);
		extendDataMap.put(&quot;bankAcctNo&quot;,&quot;6217880800001810391&quot;);
	accountOrderDTO.setExtendDataMap(extendDataMap);
	accountOrderDTOList.add(accountOrderDTO);

	AccountOrderDTO accountOrderDTO2=new AccountOrderDTO();
	accountOrderDTO2.setAccountingFlag(AccountingFlagEnum.PAY.getCode());
	accountOrderDTO2.setAccountNo(&quot;320299120000001520840000000009528&quot;);
	accountOrderDTO2.setAmount(new BigDecimal(&quot;200000&quot;));
	accountOrderDTO2.setCurrency(&quot;USD&quot;);
	accountOrderDTO2.setTransferType(&quot;SHOP_WITHDRAW&quot;);
	accountOrderDTO2.setRemark(&quot;test SHOP_WITHDRAW&quot;);
		Map&lt;String,String&gt; extendDataMap2=new HashMap&lt;&gt;();
		extendDataMap2.put(&quot;memberCode&quot;,&quot;20000001520&quot;);
		extendDataMap2.put(&quot;shopName&quot;,&quot;9528&quot;);
		extendDataMap2.put(&quot;withdrawId&quot;,&quot;withdrawId${requestNo}&quot;);
		extendDataMap2.put(&quot;bankName&quot;,&quot;中国银行&quot;);
		extendDataMap2.put(&quot;bankAcctNo&quot;,&quot;6217880800001810391&quot;);
	accountOrderDTO2.setExtendDataMap(extendDataMap2);
	accountOrderDTOList.add(accountOrderDTO2);
	
	accountingApplyDTO.setAccountOrderDTOs(accountOrderDTOList);
	
	req.setRequestObj(accountingApplyDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询账户" enabled="true"/>
        <hashTree>
          <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountBalanceFacade.queryAccount" enabled="true">
            <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="url" elementType="Argument">
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">${url}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="registryConfigs" elementType="Argument">
                  <stringProp name="Argument.name">registryConfigs</stringProp>
                  <stringProp name="Argument.value">${registryConfigs}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="monitorConfig" elementType="Argument">
                  <stringProp name="Argument.name">monitorConfig</stringProp>
                  <stringProp name="Argument.value">${monitorConfig}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="interfaceName" elementType="Argument">
                  <stringProp name="Argument.name">interfaceName</stringProp>
                  <stringProp name="Argument.value">${interfaceName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="methodConfigs" elementType="Argument">
                  <stringProp name="Argument.name">methodConfigs</stringProp>
                  <stringProp name="Argument.value">${methodConfigs}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="methodName" elementType="Argument">
                  <stringProp name="Argument.name">methodName</stringProp>
                  <stringProp name="Argument.value">${methodName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="methodParameters" elementType="Argument">
                  <stringProp name="Argument.name">methodParameters</stringProp>
                  <stringProp name="Argument.value">${methodParameters}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
          </JavaSampler>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="515839844">interfaceName</stringProp>
                <stringProp name="351608024">version</stringProp>
                <stringProp name="-723163380">methodName</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1529948105">
                  <stringProp name="2026324355">com.ipaylinks.acct.facade.AccountBalanceFacade</stringProp>
                  <stringProp name="48563">1.0</stringProp>
                  <stringProp name="266147909">queryAccount</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
              <collectionProp name="UserParameters.names">
                <stringProp name="116079">url</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-825906266">
                  <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountBalanceQueryDTO;
import com.ipaylinks.acct.facade.enums.AccountTypeEnum;
	
	SingleRequest&lt;AccountBalanceQueryDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountBalanceQueryDTO accountBalanceQueryDTO = new AccountBalanceQueryDTO();
	accountBalanceQueryDTO.setMemberCode(20000001520L);
	accountBalanceQueryDTO.setAccountType(AccountTypeEnum.SHOP_BASIC_ACCOUNT.getCode());
//	accountBalanceQueryDTO.setAccountNo(&quot;320299220000001520840000000009527&quot;);
//	accountBalanceQueryDTO.setCurrency(&quot;USD&quot;);
//	accountBalanceQueryDTO.setAccountIndentity(&quot;9527&quot;);
	accountBalanceQueryDTO.setAccountNos(Arrays.asList(&quot;320299120000001520840000000009527&quot;, &quot;320299120000001520840000000009528&quot;));
	
	req.setRequestObj(accountBalanceQueryDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="统计账户余额" enabled="true"/>
        <hashTree>
          <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountBalanceFacade.sumBalanceByMemberCode" enabled="true">
            <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="url" elementType="Argument">
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">${url}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="registryConfigs" elementType="Argument">
                  <stringProp name="Argument.name">registryConfigs</stringProp>
                  <stringProp name="Argument.value">${registryConfigs}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="monitorConfig" elementType="Argument">
                  <stringProp name="Argument.name">monitorConfig</stringProp>
                  <stringProp name="Argument.value">${monitorConfig}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="interfaceName" elementType="Argument">
                  <stringProp name="Argument.name">interfaceName</stringProp>
                  <stringProp name="Argument.value">${interfaceName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="methodConfigs" elementType="Argument">
                  <stringProp name="Argument.name">methodConfigs</stringProp>
                  <stringProp name="Argument.value">${methodConfigs}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="methodName" elementType="Argument">
                  <stringProp name="Argument.name">methodName</stringProp>
                  <stringProp name="Argument.value">${methodName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="methodParameters" elementType="Argument">
                  <stringProp name="Argument.name">methodParameters</stringProp>
                  <stringProp name="Argument.value">${methodParameters}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
          </JavaSampler>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="515839844">interfaceName</stringProp>
                <stringProp name="351608024">version</stringProp>
                <stringProp name="-723163380">methodName</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1656977144">
                  <stringProp name="2026324355">com.ipaylinks.acct.facade.AccountBalanceFacade</stringProp>
                  <stringProp name="48563">1.0</stringProp>
                  <stringProp name="1652746255">sumBalanceByMemberCode</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
              <collectionProp name="UserParameters.names">
                <stringProp name="116079">url</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-825906266">
                  <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountBalanceQueryDTO;
import com.ipaylinks.acct.facade.enums.AccountTypeEnum;
	
	SingleRequest&lt;AccountBalanceQueryDTO&gt; req = new SingleRequest&lt;&gt;();
	
	AccountBalanceQueryDTO accountBalanceQueryDTO = new AccountBalanceQueryDTO();
	accountBalanceQueryDTO.setMemberCode(20000001520L);
	accountBalanceQueryDTO.setAccountType(AccountTypeEnum.SHOP_BASIC_ACCOUNT.getCode());
	accountBalanceQueryDTO.setCurrency(&quot;USD&quot;);
//	accountBalanceQueryDTO.setAccountIndentity(&quot;9527&quot;);
	
	req.setRequestObj(accountBalanceQueryDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <org.apache.jmeter.protocol.jdbc.sampler.DbunitSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.jdbc.sampler.DbunitSampler" testname="DbunitSampler rollback" enabled="false">
          <stringProp name="dataSource">${DB}</stringProp>
          <stringProp name="backupFileName">backupFile</stringProp>
          <stringProp name="operationType">rollback</stringProp>
          <stringProp name="schema">FE</stringProp>
          <stringProp name="tables"></stringProp>
        </org.apache.jmeter.protocol.jdbc.sampler.DbunitSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="AccountManageFacade.openAccount" enabled="false"/>
      <hashTree>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="AccountManageFacade.openAccount" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="url" elementType="Argument">
                <stringProp name="Argument.name">url</stringProp>
                <stringProp name="Argument.value">${url}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="registryConfigs" elementType="Argument">
                <stringProp name="Argument.name">registryConfigs</stringProp>
                <stringProp name="Argument.value">${registryConfigs}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="monitorConfig" elementType="Argument">
                <stringProp name="Argument.name">monitorConfig</stringProp>
                <stringProp name="Argument.value">${monitorConfig}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="interfaceName" elementType="Argument">
                <stringProp name="Argument.name">interfaceName</stringProp>
                <stringProp name="Argument.value">${interfaceName}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="version" elementType="Argument">
                <stringProp name="Argument.name">version</stringProp>
                <stringProp name="Argument.value">${version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="methodConfigs" elementType="Argument">
                <stringProp name="Argument.name">methodConfigs</stringProp>
                <stringProp name="Argument.value">${methodConfigs}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="methodName" elementType="Argument">
                <stringProp name="Argument.name">methodName</stringProp>
                <stringProp name="Argument.value">${methodName}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="methodParameters" elementType="Argument">
                <stringProp name="Argument.name">methodParameters</stringProp>
                <stringProp name="Argument.value">${methodParameters}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.protocol.java.test.DubboTest</stringProp>
        </JavaSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="interfaceName version methodName" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="515839844">interfaceName</stringProp>
              <stringProp name="351608024">version</stringProp>
              <stringProp name="-723163380">methodName</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1228003723">
                <stringProp name="2135784914">com.ipaylinks.acct.facade.AccountManageFacade</stringProp>
                <stringProp name="48563">1.0</stringProp>
                <stringProp name="-1374145405">openAccount</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="url 点对点直连" enabled="false">
            <collectionProp name="UserParameters.names">
              <stringProp name="116079">url</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-825906266">
                <stringProp name="-1887115082">dubbo://127.0.0.1:20000/</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="registryConfigs 注册中心" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import com.alibaba.dubbo.config.RegistryConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setProtocol(&quot;zookeeper&quot;);
	registryConfig.setAddress(&quot;${registry.address}&quot;);
//	registryConfig.setAddress(&quot;47.100.10.132:2181,47.100.10.132:2182,47.100.10.132:2183&quot;);

	JSONArray registryConfigs = new JSONArray();
	registryConfigs.add(registryConfig);
	vars.put(&quot;registryConfigs&quot;,registryConfigs.toJSONString());
	vars.put(&quot;url&quot;,&quot;&quot;);
//	vars.put(&quot;registryConfigs&quot;,&quot;&quot;);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="monitorConfig 监控中心" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import com.alibaba.dubbo.config.MonitorConfig;
import com.alibaba.fastjson.JSON;

	MonitorConfig monitorConfig = new MonitorConfig();
	//protocol为registry时，表示从注册中心发现监控中心地址，否则为直连监控中心
	monitorConfig.setProtocol(&quot;registry&quot;);
	//直连监控中心服务器地址
//	monitorConfig.setAddress(&quot;127.0.0.1:7070&quot;);

	vars.put(&quot;monitorConfig&quot;, JSON.toJSONString(monitorConfig));
	vars.put(&quot;monitorConfig&quot;, &quot;&quot;);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="methodConfigs 方法级别配置" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import com.alibaba.dubbo.config.MethodConfig;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

	String methodName = vars.get(&quot;methodName&quot;);

	MethodConfig methodConfig = new MethodConfig();
	methodConfig.setName(methodName);
	methodConfig.setTimeout(120000);
	methodConfig.setRetries(0);

	JSONArray methodConfigs = new JSONArray();
	methodConfigs.add(methodConfig);
	vars.put(&quot;methodConfigs&quot;, methodConfigs.toJSONString());

	vars.put(&quot;methodConfigs&quot;, &quot;&quot;);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="methodParameters groovy泛型参数对象" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.Arrays;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

import com.ipaylinks.common.rpc.request.SingleRequest;
import com.ipaylinks.acct.facade.dto.AccountOpenDTO;

	SingleRequest&lt;AccountOpenDTO&gt; req = new SingleRequest&lt;&gt;();
	AccountOpenDTO accountOpenDTO = new AccountOpenDTO();
	accountOpenDTO.setMemberCode(Long.valueOf(&quot;${memberCode}&quot;));
	accountOpenDTO.setMemberType(Integer.valueOf(&quot;${memberType}&quot;));
	accountOpenDTO.setAccountIndentity(&quot;${accountIdentity}&quot;);
	accountOpenDTO.setAccountType(&quot;${accountType}&quot;);
	log.info(&quot;currencies:{}&quot;,&quot;${currencies}&quot;);
	String[] currencies = &quot;${currencies}&quot;.split(&quot;;&quot;);
	accountOpenDTO.setCurrencys(Arrays.asList(currencies));
	req.setRequestObj(accountOpenDTO);
	 
	JSONArray methodParameters = new JSONArray();
	methodParameters.add(JSON.toJSONString(req));
	vars.put(&quot;methodParameters&quot;,methodParameters.toJSONString());</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
            <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

//预期结果
JSONObject expectedMap = new JSONObject();
expectedMap.put(&quot;responseStatus&quot;,&quot;${responseStatus}&quot;);
expectedMap.put(&quot;responseCode&quot;,&quot;${responseCode}&quot;);
expectedMap.put(&quot;responseMsg&quot;,&quot;${responseMsg}&quot;);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果
String responseDataStr = prev.getResponseDataAsString();
JSONObject actualMap = JSON.parseObject(responseDataStr);
//log.info(&quot;actualMap:{}&quot;,actualMap);
JSONArray responseObj = actualMap.getJSONArray(&quot;responseObj&quot;);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	Failure=true;
	FailureMessage=failMessage;
//	log.info(&quot;Failure:{}&quot;,Failure);
//	log.info(&quot;FailureMessage:{}&quot;,FailureMessage);
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="fe.T_ACCOUNT_INFO 查询" enabled="false"/>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="fe.T_ACCOUNT_INFO 查询" enabled="true">
          <stringProp name="dataSource">${DB}</stringProp>
          <stringProp name="query">select t.*
  from fe.T_ACCOUNT_INFO t
 where 1 = 1
   and t.account_no = ?</stringProp>
          <stringProp name="queryArguments">${accountNo}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
          <stringProp name="resultVariable">accountInfoList</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.List;

//预期结果
String expectedSize = &quot;1&quot;;
Map&lt;String, Object&gt; expectedMap = new HashMap&lt;&gt;();
expectedMap.put(&quot;MEMBER_CODE&quot;,&quot;${MEMBER_CODE}&quot;);
expectedMap.put(&quot;MEMBER_TYPE&quot;,&quot;${MEMBER_TYPE}&quot;);
expectedMap.put(&quot;ACCOUNT_INDENTITY&quot;,&quot;${ACCOUNT_INDENTITY}&quot;);
expectedMap.put(&quot;ACCOUNT_TYPE&quot;,&quot;${ACCOUNT_TYPE}&quot;);
expectedMap.put(&quot;CURRENCY&quot;,&quot;${CURRENCY}&quot;);
expectedMap.put(&quot;ACCOUNT_NO&quot;,&quot;${ACCOUNT_NO}&quot;);
expectedMap.put(&quot;CHECK_IN&quot;,&quot;${CHECK_IN}&quot;);
expectedMap.put(&quot;CHECK_OUT&quot;,&quot;${CHECK_OUT}&quot;);
expectedMap.put(&quot;CANCEL_ACCOUNT&quot;,&quot;${CANCEL_ACCOUNT}&quot;);
expectedMap.put(&quot;accountInfoListSize&quot;,expectedSize);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果

List&lt;Map&lt;String, Object&gt;&gt; accountInfoList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;accountInfoList&quot;);
int actualSize = accountInfoList.size();
Map&lt;String, Object&gt; actualMap = accountInfoList.get(0);
actualMap.put(&quot;accountInfoListSize&quot;,actualSize);
//log.info(&quot;actualMap:{}&quot;,actualMap);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(failMessage);
}

</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="fe.T_ACCOUNT_BALANCE 查询" enabled="false"/>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="fe.T_ACCOUNT_BALANCE 查询" enabled="true">
          <stringProp name="dataSource">${DB}</stringProp>
          <stringProp name="query">select t.*
  from fe.T_ACCOUNT_BALANCE t
 where 1 = 1
   and t.account_no = ?</stringProp>
          <stringProp name="queryArguments">${accountNo}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
          <stringProp name="resultVariable">accountBalanceList</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import org.apache.jmeter.assertions.JMeterAssert;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.List;

//预期结果
String expectedSize = &quot;1&quot;;
Map&lt;String, Object&gt; expectedMap = new HashMap&lt;&gt;();
expectedMap.put(&quot;MEMBER_CODE&quot;,&quot;${MEMBER_CODE}&quot;);
expectedMap.put(&quot;MEMBER_GRADE&quot;,&quot;${MEMBER_GRADE}&quot;);
expectedMap.put(&quot;ACCOUNT_NO&quot;,&quot;${ACCOUNT_NO}&quot;);
expectedMap.put(&quot;ACCOUNT_TYPE&quot;,&quot;${ACCOUNT_TYPE}&quot;);
expectedMap.put(&quot;BALANCE&quot;,&quot;${BALANCE}&quot;);
expectedMap.put(&quot;FREEZE_AMOUNT&quot;,&quot;${FREEZE_AMOUNT}&quot;);
expectedMap.put(&quot;AVAILABLE_BALANCE&quot;,&quot;${AVAILABLE_BALANCE}&quot;);
expectedMap.put(&quot;CURRENCY&quot;,&quot;${CURRENCY}&quot;);
expectedMap.put(&quot;ACCOUNT_INDENTITY&quot;,&quot;${ACCOUNT_INDENTITY}&quot;);
expectedMap.put(&quot;accountBalanceListSize&quot;,expectedSize);
//log.info(&quot;expectedMap:{}&quot;,expectedMap);

//实际结果

List&lt;Map&lt;String, Object&gt;&gt; accountBalanceList = (List&lt;Map&lt;String, Object&gt;&gt;) vars.getObject(&quot;accountBalanceList&quot;);
int actualSize = accountBalanceList.size();
Map&lt;String, Object&gt; actualMap = accountBalanceList.get(0);
actualMap.put(&quot;accountBalanceListSize&quot;,actualSize);
//log.info(&quot;actualMap:{}&quot;,actualMap);

//断言
String failMessage = JMeterAssert.assertEquals(actualMap, expectedMap);
if (StringUtils.isNotEmpty(failMessage)){
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(failMessage);
}

</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
